xui.set(xui.Locale,["en","app"], {
    en:'English',
    cn:'Chinese',
    apititle:"CrossUI 2.0 - API Documentation",

    search:'Search',
    lQ1:'Search API',
    lQ2:'Search Description',

    staticMethods:"Methods [Static ]",
    staticProperties:"Properties [Static]",
    gFun:'Global Function',
    constructor:"Constructor",
    noCons:'Static Class',
    supCls:'Parent Classes',
    subCls:'Children Classes',
    inhFrom:"Inherite from ",
    insProperties:"Properties [Instance]",
    insMethods:"Methods [Instance]",
    events:'Events',
    retV:'Return Value',
    param:'Parameters',
    codesnip:'Code snippet',
    memo:'Memo',
    seealso:'See Also',
    oCode:'Original Code',
    oCodeDesc:'/*\n * Original code in CrossUI \n * With it, maybe you can understand the function easily \n*/'
});
(function(){
    var $eo={
        $rtn:"[self]",
        $paras:[
            "fun [Optional]: Function, arguments: [xui.DomProfile Object, DOM event Object, the current element's xid]",
            "label [Optional]: String, the event label",
            "flag  [Optional]: Boolean, for remove event only. to indicate if remove all related event"
        ]
    };
    var $force="force [Optional] : Boolean, force to set the property value even if the same property value already exists. Default is [false]";
    var $profile="profile : xui.UIProfile. The current control's profile object";
    /*
    $desc string
    $paras array
    $rtn string
    $snippet array
    $links array
    $memo string
    */
    var $me=xui.Locale.en.doc;

    xui.set(xui.Locale,["en","doc","xui"], {
        $desc:"Base Namespace for xui. <br />Can be used as a function to create a xui.Dom Object to wrap a set of Elements too",
        $rtn:"xui.Dom",
        $paras:[
            "nodes [Optional]: Element/Element[]/String/String[]/Function, any variable to match a set of Elements. Maybe a [Element], a [Element] array, a [Element id], a [Element id] array, a [xid], or a [xid] array etc. Default is []",
            "flag [Optional]: Boolean, ignore clean function(for better performance) or not. Default is false. This parameter can be true only when [nodes] is a [xid] array"
        ],
        $snippet:[
            "//Input Element id \n var n=xui('btnLang'); alert(n.get(0).id);",
            "//Input Element \n var n=xui(document.getElementById('btnLang')); alert(n.get(0).id);",
            "//Input Element id array\n var n=xui(['btnLang']); alert(n.get(0).id);",
            "//Input DOM element array\n var n=xui([document.getElementById('btnLang')]); alert(n.get(0).id);",
            "//Input xui.Dom Object \n var n=xui(xui('btnLang')); alert(n.get(0).id);",
            "//Input xui.UI Object \n var n=xui(xui.UI.Div.getAll()); alert(n.get(0).id);",
            "//Input a function that can return DOM elements array\n var n=xui(function(){return [document.getElementById('btnLang')]}); alert(n.get(0).id);",
            "//Input a xid string \n var xid=xui.getId('btnLang'), n=xui(xid); alert(xid);alert(n.get(0).id);",
            "//Input a xid string array\n var xid=xui.getId('btnLang'), n=xui([xid],false); alert(xid);alert(n.get(0).id);"
        ],
        Class:{
            $desc:"Class Namespace. <br />Can be used as a function to declare a class too",
            $rtn:"Object",
            $paras:[
                "key [Required]: String, class string",
                "pkey [Required]: String/Array, parent class key , array for inheriting multi parent class in order",
                "obj [Optional]: Object, class Object. Default is {}"
            ],
            $snippet:["// Equals to declare a Namespae 'Test.NS' and declare a Class 'Test.NS.Cls'; \n  xui.Class('Test.NS.Cls'); xui.Class('Test.NS.Cls.Subcls1', 'Test.NS.Cls', {}); xui.Class('Test.NS.Cls.Subcls2', null, {});  alert(typeof Test.NS); alert(typeof Test.NS.Cls); alert(typeof Test.NS.Cls.Subcls1);alert(typeof Test.NS.Cls.Subcls2);"],
            $memo:"Class naming rules: [A-Z][0-9a-zA-Z]+",
            destroy:{
                $desc:"To dstroy a Class"
            }
        },
        Namespace:{
            $desc:"Declares a namespace",
            $rtn:"Object",
            $paras:[
                "key [Required]: String, namespace string"
            ],
            $snippet:["xui.Namespace('Test.NS'); alert(typeof Test.NS)"],
            $memo:" Namespace naming rules: [A-Z][0-9a-zA-Z]+"
        },
        //Tools functions' Namespace.",
        stamp:{
            $desc:"To get local time stamp",
            $rtn:"Number"
        },
        rand:{
            $desc:"To create a random string",
            $rtn:"String"
        },
        replace:{
            $desc:"An wrapper for advance string replace",
            $rtn:"String",
            $paras:[
                "str [Required] : string, the target string",
                "reg [Required] : Array: [string, string] or [RegExp, string]",
                "replace [Optional] : String, the replace",
                "ignore_case [Optional] : Boolean, for RegExp symbol 'i'"
            ],
            $snippet:[
                'alert(xui.replace("aAa","a","*",true));'+
                'alert(xui.replace("aAa","a","*",false));'+
                'alert(xui.replace("aAa","a","*"));'+
                'alert(xui.replace("aAa",/a/,"*"));'+
                'alert(xui.replace("aAa",["a","*"]));'+
                'alert(xui.replace("aAa",[["a","*"]]));',
                'alert(xui.replace("aAa",[["a","*"],[/A/,"-"]]))',
                '//Use "$0" to protect "ab" in the string: \n alert(xui.replace("aba",[["ab","$0"],["a","*"]]))',
                'alert(xui.replace("aba ab a",[["ab","$0"],["a",function(s,i){return s[i].toUpperCase();}]]))'
            ]
        },
        arr:{
            $desc:"A functions collection for Array",
            fastSortObject:{
                $desc:"The fast stable sort function for object array",
                $rtn:'Array',
                $paras: [
                    "arr [Required]: Array, target array",
                    "byKey [Required]: Function. function to get sort key"
                ]
            },
            stableSort:{
                $desc:"The stable sort function",
                $rtn:'Array',
                $paras: [
                    "arr [Required]: Array, target array",
                    "sortby [Required]: Function(x,y). sort function"
                ]
            },
            each:{
                $desc:"Applys a function to each element of the array in specified order",
                $rtn:'Array',
                $paras: [
                    "arr [Required]: Array, target array",
                    "fun [Required]: Function, arguments: [array element, array index]. The function to apply to array item",
                    "scope [Optional]: Object, [this] pointer for [fun]. Default is [arr]",
                    "order [Optional]: Boolean, iterate by descend order. Default is false"
                ],
                $snippet:[
                    "xui.arr.each(['a','b'], function(o,i){alert(i+':'+o);} )",
                    "xui.arr.each(['a','b'], function(o,i){alert(i+':'+o);alert(this===window);},window,true)"
                ]
            },
            indexOf:{
                $desc:"Returns the first index at which a given element can be found in the array, or -1 if it is not present",
                $rtn:'Number',
                $paras: [
                    "arr [Required]: Array, target array",
                    "value [Required]: Object, element to locate in the array"
                ],
                $snippet:[
                    "var a=[1,2,3,4];alert(xui.arr.indexOf(a, 3))"
                ]
            },
            insertAny:{
                $desc:"Adds one or more elements to the specified position of an array",
                $rtn:'Number',
                $paras: [
                    "arr [Required]: Array, target array",
                    "target [Required]: Object, elements to add",
                    "index [Optional]: Number, the specified position. Default is -1",
                    "flag [Optional]: Boolean, force to take [target] as a single element.  Default is false"
                ],
                $snippet:[
                    "var a=[1,2,3]; xui.arr.insertAny(a,5,1);alert(a)",
                    "var a=[1,2,3]; xui.arr.insertAny(a,[5,5],1);alert(xui.serialize(a))",
                    "var a=[1,2,3]; xui.arr.insertAny(a,[5,5],1,true);alert(xui.serialize(a))"
                ]
            },
            intersection:{
                $desc:"Gets intersection",
                $rtn:'Array',
                $paras: [
                    "arr1 [Required]: Array",
                    "arr2 [Required]: Array"
                ]
            },
            removeFrom:{
                $desc:"Removes a section of elements from an array",
                $rtn:'Array',
                $paras: [
                    "arr [Required]: Array, target array",
                    "index [Required]: Number, the specified position",
                    "length [Optional]: Number, how many elements to be removed. Default is 1"
                ],
                $snippet:[
                    "var a=[1,2,3,4,5]; xui.arr.removeFrom(a, 2,2 ); alert(a);"
                ]
            },
            removeDuplicate:{
                $desc:"Removes the dupliacte elements in an array",
                $rtn:'Array',
                $paras: [
                    "arr [Required] : Array, target array",
                    "subKey [Optional]: String, Use this sub-key to find the duplicate values (the element in Array is object)"
                ],
                $snippet:[
                    "var a=[1,2,3,4,5,3,4,5]; xui.arr.removeDuplicate(a); alert(a);",
                    "var a=[{id:1,value:'1'},{id:1,value:'2'},{id:1,value:'3'}]; xui.arr.removeDuplicate(a, 'id'); alert(xui.serialize(a));"
                ]
            },
            removeValue:{
                $desc:"Removes a specified element from an array",
                $rtn:'Array',
                $paras: [
                    "arr [Required] : Array, target array",
                    "value: Object, element to be removed"
                ],
                $snippet:[
                    "var a=[1,2,3,4,5]; xui.arr.removeValue(a, 4); alert(a);"
                ]
            },
            subIndexOf:{
                $desc:"Returns the first index at which a given key and value can be found in the Object element of the array, or -1 if it is not present",
                $rtn:'Number',
                $paras: [
                    "arr [Required]: Array, target array",
                    "key [Required]: String, a specified key in the hash element",
                    "value [Required]: Object, a specified value in the hash element"
                ],
                $snippet:[
                    "var a=[1,2,{k:'v'},4]; var i=xui.arr.subIndexOf(a,'k','v'); alert(i);"
                ]
            }
        },
        asyHTML:{
            $desc:"Asynchronous html create",
            $rtn:"Interger",
            $paras:[
                "content [Required]: String, content String",
                "callback [Required]: Function, callback function",
                "defer [Optional]: Number, gives the amount of milliseconds between shots passes. Default is 0",
                "size [Optional]: Number, specifies the size of DOM node will create in one shot. Default is 10"
            ]
        },
        asyRun:{
            $desc:"Asynchronous Function Call",
            $rtn:"Interger",
            $paras:[
                "fun [Required]: Function, target function",
                "defer [Optional]: Number, setTimeout defer time. Default is 0",
                "args [Optional]: Array, arguments for fun. Default is []",
                "scope [Optional]: Object, [this] pointer for [fun]. Default is [window]"
            ],
            $snippet:[
                "xui.asyRun(function(a,b){alert(this===window);alert(a+b)}, 300, ['a','b'], window)"
            ]
        },
        breakO:{
            $desc:"Breaks Object reference[for memory release]",
            $paras:[
                "target [Required]: Object, target Object to break",
                "depth [Optional]: Number, depth value. Default is 1"
            ],
            $snippet:[
                "var a={b:1}, o={a:a}; xui.breakO(o); alert(a && a.b);",
                "var a={b:1}, o={a:a}; xui.breakO(o,2); alert(a && a.b);"
            ]
        },
        toFixedNumber:{
            $desc:"Formats a number to use a specified number of trailing decimals. Returns number",
            $paras:[
                "number [Required]: Number, the target number",
                "digits [Optional]: Number, the number of digits after the decimal point. Default is 2"
            ],
            $snippet:[
                "var a=0.3+0.3+0.3; alert(a); alert(xui.toFixedNumber(a, 10));",
                "var a=0.1*0.2; alert(a); alert(xui.toFixedNumber(a, 10));"
            ]
        },
        toNumeric:{
            $desc:"Gets a number from string. Returns number",
            $paras:[
                "value [Required]: String,  the target number",
                "precision [Optional]: Number, the number of digits after the decimal point. Default is 2",
                "groupingSeparator[Optional]: String, thousands separator. Default is  ','",
                "decimalSeparator[Optional]: String, decimal separator. Default is  \".\""
            ]
        },
        formatNumeric:{
            $desc:"Formats a number to string. Returns number",
            $paras:[
                "value [Required]: Number,  the target number",
                "precision [Optional]: Number, the number of digits after the decimal point. Default is 2",
                "groupingSeparator[Optional]: String, thousands separator. Default is  ','",
                "decimalSeparator[Optional]: String, decimal separator. Default is  \".\"",
                "forceFillZero[Optional]: Boolean, forces to fill zeros for precision or doesn't. Default is [true]"
            ]
        },
        clone:{
            $desc:"Clones Object, deep copy",
            $rtn:"Object",
            $paras:[
                "hash [Required]: Object, target Object to clone",
                "filter [Optional]: Function, arguments: [hash value, hash key]. To determine whether or not it clones certain item. Or [true], means to neglect those items which key starts with '_'",
                "deep [Optional]: Number, Default is 100"
            ],
            $snippet:[
                "var a=1, b='s'; alert(xui.clone(a)); alert(xui.clone(b));",
                "var o={a:1,b:{b:{c:2}}}; alert(xui.serialize(xui.clone(o))); alert(xui.serialize(xui.clone(o,function(o,i){return i!='c'}))); ",
                "var o={a:1,_b:2,$c:3}; alert(xui.serialize(xui.clone(o,true)));",
                "var o=['1','2','3']; alert(xui.serialize(xui.clone(o))); alert(xui.serialize(xui.clone(o,function(o){return o!='2'}))); "
            ]
        },
        copy:{
            $desc:"Shadow copy, just clones the fist layer of Object",
            $rtn:"Object",
            $paras:[
                "hash [Required]: Object, target Object to copy",
                "filter [Optional]: Function, arguments: [hash value, hash key]. To determine whether or not it copy certain item. Or [true], means to neglect those items which key starts with '_'"
            ],
            $memo:"Sees <a href='#xui.clone'>xui.clone</a>"
        },
        each:{
            $desc:"Loops through each element of the Object, and apply fun",
            $rtn:"Object",
            $paras:[
                "hash [Required]: Object, Object to loop",
                "fun [Required]: Function, arguments: [hash value, hash key]. The Function for apply",
                "scope [Optional]: Object, [this] pointer for [fun]"
            ],
            $snippet:[
                "var h={a:1,b:2}; xui.each(h,function(o,i){alert(i+':'+o)})"
            ]
        },
        'exec':{
            $desc:"Executes script string",
            $rtn:"Object",
            $paras:[
                "script [Required]: String, script string"
            ],
            $snippet:[
                "xui.exec('alert(\"a\")')"
            ]
        },
        isDefined:{
            $desc:"Equals to [target===undefined]",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: Object, target Object"
            ],
            $snippet:[
                "alert(xui.isDefined(window.aaaa))"
            ]
        },
        filter:{
            $desc:"Filters items out of a Object({} or [])",
            $rtn:"Object",
            $paras:[
                "obj [Required]: Object, Object to filter",
                "filter [Optional]: Function, arguments: [hash value, hash key]. To determine whether or not it keeps certain item. Or [true], means to filter those items which key starts with '_'",
                "force [Optional]: Boolean, force to take [obj] as a {}. Default is false"
            ],
            $snippet:[
                "var o={a:1,b:2}; xui.filter(o,function(o,i){return i!='b'}); alert(xui.serialize(o))",
                "var o={a:1,_b:2}; xui.filter(o,true); alert(xui.serialize(o))",
                "var o=[1,2,3]; xui.filter(o,function(o,i){return o!=2}); alert(xui.serialize(o))"
            ]
        },
        fun:{
            $desc:"A functions collection for Function. <br />Can be used as a function to get an empty function too",
            $rtn:"Function",
            $snippet:[
                "alert(xui.serialize(xui.fun()));"
            ],
            args:{
                $desc:"Gets function arguments",
                $rtn:"Array",
                $paras:[
                    "fun [Required]: Function, target function"
                ],
                $snippet:[
                    "alert(xui.fun.args(function(a,b,c){var body=1;}))"
                ]
            },
            body:{
                $desc:"Gets function body",
                $rtn:"String",
                $paras:[
                    "fun [Required]: Function, target function"
                ],
                $snippet:[
                    "alert(xui.fun.body(function(a,b,c){var body=1;}))"
                ]
            },
            clone:{
                $desc:"Clones function",
                $rtn:"Function",
                $paras:[
                    "fun [Required]: Function, target function"
                ],
                $snippet:[
                    "var fun=function(a,b,c){var body=1;}, fun_cloned =  xui.fun.clone(fun); alert(xui.fun.args(fun_cloned));alert(xui.fun.body(fun_cloned));alert(fun_cloned.toString()); alert(fun==fun_cloned); "
                ]
            }
        },
        get:{
            $desc:"Gets something from deep hash",
            $rtn:"Object",
            $paras:[
                "hash [Required]: Object, deep hash Object",
                "arr [Required]: Array, path array, ['a','b','c'] => {a:{b:{c:[variable]}}}"
            ],
            $snippet:[
                "alert(xui.get({a:{b:{c:1}}},'a'))",
                "alert(xui.get({a:{b:{c:1}}},['a','b']))",
                "alert(xui.get({a:{b:{c:1}}},['a','b','c']))",
                "alert(xui.get({a:{b:{c:1}}},['a','b','c','d']))"
            ]
        },
        "id":{
            $desc:"Gets unique system id string. 26 chars: /a-z/. It can be used as a class too",
            $rtn:"String",
            $snippet:[
                "alert('system id: ' + xui.id());",
                "var test=new xui.id(); var out=[]; for(var i=0;i<100;i++){out.push(test.next())}; alert(out);"
            ]
        },
        isArr :{
            $desc:"To determine whether or not the target is Array",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isArr('s')+':'+xui.isArr(new RegExp())+':'+xui.isArr(function(){})+':'+xui.isArr(1)+':'+xui.isArr(NaN)+':'+xui.isArr({})+':'+xui.isArr(new Date)+':'+xui.isArr(null)+':'+xui.isArr(undefined)+':'+xui.isArr(true)+':'+xui.isArr([]));"
            ]
        },
        isBool :{
            $desc:"To determine whether or not the target is Boolean",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isBool('s')+':'+xui.isBool(new RegExp())+':'+xui.isBool(function(){})+':'+xui.isBool(1)+':'+xui.isBool(NaN)+':'+xui.isBool({})+':'+xui.isBool(new Date)+':'+xui.isBool(null)+':'+xui.isBool(undefined)+':'+xui.isBool(true)+':'+xui.isBool([]));"
            ]
        },
        isDate :{
            $desc:"To determine whether or not the target is Date",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isDate('s')+':'+xui.isDate(new RegExp())+':'+xui.isDate(function(){})+':'+xui.isDate(1)+':'+xui.isDate(NaN)+':'+xui.isDate({})+':'+xui.isDate(new Date)+':'+xui.isDate(null)+':'+xui.isDate(undefined)+':'+xui.isDate(true)+':'+xui.isDate([]));"
            ]
        },
        isEmpty :{
            $desc:"To determine whether or not the target is empty Object",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isEmpty('s')+':'+xui.isEmpty(new RegExp())+':'+xui.isEmpty(function(){})+':'+xui.isEmpty(1)+':'+xui.isEmpty(NaN)+':'+xui.isEmpty({})+':'+xui.isEmpty(new Date)+':'+xui.isEmpty(null)+':'+xui.isEmpty(undefined)+':'+xui.isEmpty(true)+':'+xui.isEmpty([]));"
            ],
            $memo:"It's only for hash Object"
        },
        isFun :{
            $desc:"To determine whether or not the target is a Function",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isFun('s')+':'+xui.isFun(new RegExp())+':'+xui.isFun(function(){})+':'+xui.isFun(1)+':'+xui.isFun(NaN)+':'+xui.isFun({})+':'+xui.isFun(new Date)+':'+xui.isFun(null)+':'+xui.isFun(undefined)+':'+xui.isFun(true)+':'+xui.isFun([]));"
            ]
        },
        isArguments:{
            $desc:"To determine whether or not the target is an arguments Object",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "(function(){alert(xui.isArguments(arguments));alert(xui.isArguments({}));alert(xui.isArguments([]));}())"
            ]
        },
        isHash:{
            $desc:"To determine whether or not the target is a hash Object",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isHash('s')+':'+xui.isHash(new RegExp())+':'+xui.isHash(function(){})+':'+xui.isHash()+':'+xui.isHash(1)+':'+xui.isHash(NaN)+':'+xui.isHash({})+':'+xui.isHash(new Date)+':'+xui.isHash(null)+':'+xui.isHash(undefined)+':'+xui.isHash(true)+':'+xui.isHash([]));"
            ]
        },
        isNull:{
            $desc:"To determine whether or not the target is null",
            $rtn:"Boolean",
            $paras:[
                "targe [Required]t: any"
            ],
            $snippet:[
                "alert(xui.isNull('s')+':'+xui.isNull(new RegExp())+':'+xui.isNull(function(){})+':'+xui.isNull(1)+':'+xui.isNull(NaN)+':'+xui.isNull({})+':'+xui.isNull(new Date)+':'+xui.isNull(null)+':'+xui.isNull(undefined)+':'+xui.isNull(true)+':'+xui.isNull([]));"
            ]
        },
        isFinite:{
            $desc:"To determine whether or not the target is an valid number",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isFinite('s')+':'+xui.isFinite(new RegExp())+':'+xui.isFinite(function(){})+':'+xui.isFinite(1)+':'+xui.isFinite(NaN)+':'+xui.isFinite({})+':'+xui.isFinite(new Date)+':'+xui.isFinite(null)+':'+xui.isFinite(undefined)+':'+xui.isFinite(true)+':'+xui.isFinite([]));"
            ]
        },
        isNumb:{
            $desc:"To determine whether or not the target is Number",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isNumb('s')+':'+xui.isNumb(new RegExp())+':'+xui.isNumb(function(){})+':'+xui.isNumb(1)+':'+xui.isNumb(NaN)+':'+xui.isNumb({})+':'+xui.isNumb(new Date)+':'+xui.isNumb(null)+':'+xui.isNumb(undefined)+':'+xui.isNumb(true)+':'+xui.isNumb([]));"
            ]
        },
        isObj :{
            $desc:"To determine whether or not the target is Object",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isObj('s')+':'+xui.isObj(new RegExp())+':'+xui.isObj(function(){})+':'+xui.isObj(1)+':'+xui.isObj(NaN)+':'+xui.isObj({})+':'+xui.isObj(new Date)+':'+xui.isObj(null)+':'+xui.isObj(undefined)+':'+xui.isObj(true)+':'+xui.isObj([]));"
            ]
        },
        isReg :{
            $desc:"To determine whether or not the target is regular expression",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isReg('s')+':'+xui.isReg(new RegExp())+':'+xui.isReg(function(){})+':'+xui.isReg(1)+':'+xui.isReg(NaN)+':'+xui.isReg({})+':'+xui.isReg(new Date)+':'+xui.isReg(null)+':'+xui.isReg(undefined)+':'+xui.isReg(true)+':'+xui.isReg([]));"
            ]
        },
        isSet:{
            $desc:"To determine whether or not the target is set",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isSet('s')+':'+xui.isSet(new RegExp())+':'+xui.isSet(function(){})+':'+xui.isSet(1)+':'+xui.isSet(NaN)+':'+xui.isSet({})+':'+xui.isSet(new Date)+':'+xui.isSet(null)+':'+xui.isSet(undefined)+':'+xui.isSet(true)+':'+xui.isSet([]));"
            ]
        },
        isElem:{
            $desc:"To determine whether or not the target is DOM element",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ]
        },
        "isNaN":{
            $desc:"To determine whether or not the target is NaN",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ]
        },
        isStr :{
            $desc:"To determine whether or not the target is String",
            $rtn:"Boolean",
            $paras:[
                "target [Required]: any"
            ],
            $snippet:[
                "alert(xui.isStr('s')+':'+xui.isStr(new RegExp())+':'+xui.isStr(function(){})+':'+xui.isStr(1)+':'+xui.isStr(NaN)+':'+xui.isStr({})+':'+xui.isStr(new Date)+':'+xui.isStr(null)+':'+xui.isStr(undefined)+':'+xui.isStr(true)+':'+xui.isStr([]));"
            ]
        },
        merge:{
            $desc:"Merges hash from source to target",
            $rtn:"Object",
            $paras:[
                "target [Required]: Object, target hash Object",
                "source [Required]: Object, source hash Object",
                "type [Optional]: String/Function,arguments: [hash value, hash key]. one of 'all', 'with', 'without'[default], or function"
            ],
            $snippet:[
                "var a={a:1},b={b:1}; alert(xui.serialize(xui.merge(a,b)))",
                "var a={a:1},b={a:2,b:1}; alert(xui.serialize(xui.merge(a,b,'with')))",
                "var a={a:1},b={a:2,b:1}; alert(xui.serialize(xui.merge(a,b,'all')))",
                "var a={a:1},b={a:2,b:1}; alert(xui.serialize(xui.merge(a,b,function(o,i){return o!=1})))"
            ]
        },
        resetRun:{
            $desc:"This will always run the latest set function asynchronously",
            $paras:[
                "key [Required]: String, Key for identify",
                "fun [Required]: Function, Function to run",
                "defer [Optional]: Number,. Timeout defer time. Default is 0",
                "args [Optional]: Array, Arguments for fun",
                "scope [Optional]: Object, [this] pointer for [fun]"
            ],
            $snippet:[
                "xui.resetRun('id',function(){alert(1)},200);xui.resetRun('id',function(){alert(2)},200);xui.resetRun('id',function(){alert(3)},200);"
            ],
            $memo:"xui.resetRun.exists(id): To determine whether a specified asynchronous function exists or not"
        },
        observableRun:{
            $desc:"Wraps a function/a set of functions to an UI-Observable thread and executes it",
            $paras:[
                "tasks [Required]: Funtion or Array, A single task(function) or a set of tasks(functions)",
                "onEnd [Optional]: Function, 'on end' callback function",
                "threadid [Optional]: Stirng, thread id. If this thread exists, all [tasks] will be insert into this thread"
            ],
            $snippet:[
                "xui.observableRun(xui.fun());",
                "//To keep the busy UI 1 second: \n"+
                "xui.observableRun(function(threadid){xui.Thread(threadid).suspend(); xui.asyRun(function(){xui.Thread(threadid).resume();},1000)});"
            ]
        },
        stringify:{
            $desc: "To stringify Object to JSON string (Doesn't force to convert to UTF8)",
            $rtn: "String",
            $paras:[
                "obj [Required]: Object, target Object",
                 "filter [Optional]: Function, arguments: [hash value, hash key]. To determine whether or not it serializes certain item. Or [true], means to neglect those items which key starts with '_'",
                "dateformat  [Optional]: String, 'utc' or 'gmt'. Force to stringify all the [Date]in the target Object into ISO UTC string, ISO GMT string, or the default format( new Date(yyyy,mm,dd,hh,nn,ss,ms) )"
            ],
            $snippet:[
                "alert(xui.stringify('a'));"+
                "alert(xui.stringify({a:1}));"+
                "alert(xui.stringify([1,2,{a:1}]));"+
                "alert(xui.stringify([1,2,{_a:1}],true));"+
                "alert(xui.stringify({d:new Date}));"+
                "alert(xui.stringify({d:new Date},'utc'))",
                "alert(xui.stringify({d:new Date},'gmt'))",
                "alert(xui.stringify(xui('btnLang')))",
                "alert(xui.stringify(xui.Dom.byId('btnLang')))",
                "alert(xui.stringify(xui.UIProfile.getFromDom('btnLang')))",
                "alert(xui.stringify(xui.UIProfile.getFromDom('btnLang').boxing()))"
            ]
        },
        serialize:{
            $desc: "To serialize Object to JSON string (Force to convert to UTF8)",
            $rtn: "String",
            $paras:[
                "obj [Required]: Object, target Object",
                 "filter [Optional]: Function, arguments: [hash value, hash key]. To determine whether or not it serializes certain item. Or [true], means to neglect those items which key starts with '_'",
                "dateformat  [Optional]: String, 'utc' or 'gmt'. Force to serialize all the [Date]in the target Object into ISO UTC string, ISO GMT string, or the default format( new Date(yyyy,mm,dd,hh,nn,ss,ms) )"
            ],
            $snippet:[
                "alert(xui.serialize('a'));"+
                "alert(xui.serialize({a:1}));"+
                "alert(xui.serialize([1,2,{a:1}]));"+
                "alert(xui.serialize([1,2,{_a:1}],true));"+
                "alert(xui.serialize({d:new Date}));"+
                "alert(xui.serialize({d:new Date},'utc'))",
                "alert(xui.serialize({d:new Date},'gmt'))",
                "alert(xui.serialize(xui('btnLang')))",
                "alert(xui.serialize(xui.Dom.byId('btnLang')))",
                "alert(xui.serialize(xui.UIProfile.getFromDom('btnLang')))",
                "alert(xui.serialize(xui.UIProfile.getFromDom('btnLang').boxing()))"
            ]
        },
        set:{
            $desc:"Sets/Unsets something to deep hash",
            $rtn:"Object",
            $paras:[
                "hash [Required]: Object, deep hash Object",
                "arr [Required]: Array, path array, ['a','b','c'] => {a:{b:{c:[variable]}}}",
                "value [Optional]: any, value to set. Default is undefined => Unsets value"
            ],
            $snippet:[
                "var o={}; xui.set(o,['a','b','c'], 1); alert(xui.serialize(o)); xui.set(o,['a','b','c']); alert(xui.serialize(o));"
            ]
        },
        toUTF8:{
            $desc:"Converts a string to UTF8 string",
            $rtn:"String",
            $paras:[
                "str [Required] : String"
            ],
            $snippet:[
                "alert(xui.toUTF8('\u6C49\u5B57'));",
                "alert(xui.fromUTF8(xui.toUTF8('\u6C49\u5B57')));"
            ]
        },
        fromUTF8:{
            $desc:"Converts a UTF8 string back",
            $rtn:"String",
            $paras:[
                "str [Required] : String"
            ],
            $snippet:[
                "alert(xui.toUTF8('\u6C49\u5B57'));",
                "alert(xui.fromUTF8(xui.toUTF8('\u6C49\u5B57')));"
            ]
        },
        urlEncode:{
            $desc:"Converts a key/value pairs Object to URL query string",
            $rtn:"String",
            $paras:[
                "hash [Required] : a key/value pairs Object"
            ],
            $snippet:[
                "alert(xui.urlEncode({a:1,b:2}));"+
                "alert(xui.urlEncode({a:1,b:{b1:1,b2:2}}));"+
                "alert(xui.serialize(xui.urlDecode(xui.urlEncode({a:1,b:{b1:1,b2:2}}))))"
            ]
        },
        urlDecode:{
            $desc:"Gets a value from a given query string",
            $rtn:"Object",
            $paras:[
                "str [Required] : String, query string",
                "key [Optional] : String"
            ],
            $snippet:[
                "var qs='a=1&b=2&c=3'; alert(xui.serialize(xui.urlDecode(qs)));alert(xui.urlDecode(qs,'a'));"
            ]
        },
        str:{
            $desc:"A functions collection for String",
            endWith :{
                $desc:"Tests if this string ends with the specified str",
                $rtn:'Boolean',
                $paras:[
                    "str [Required]: String, target string",
                    "eStr [Required]: String, test string"
                ],
                $snippet:[
                    "alert(xui.str.endWith('abc','c'))"
                ]
            },
            initial:{
                $desc:"Makes Initial letter of the specified string to capital letter",
                $rtn:'String',
                $paras:[
                    "str [Required]: String, target string"
                ],
                $snippet:[
                    "alert(xui.str.initial('abc'))"
                ]
            },
            ltrim :{
                $desc:"Returns a copy of the string, with leading whitespace omitted",
                $rtn:'String',
                $paras:[
                    "str [Required]: String, target string"
                ],
                $snippet:[
                    "alert(xui.str.ltrim(' abc ').length)"
                ]
            },
            repeat:{
                $desc:"To repeat the specified string with specified times, and returns the result",
                $rtn:'String',
                $paras:[
                    "str [Required]: String, target string",
                    "times [Required]: repeat time"
                ],
                $snippet:[
                    "alert(xui.str.repeat('abc',3))"
                ]
            },
            rtrim :{
                $desc:"Returns a copy of the string, with trailing whitespace omitted",
                $rtn:'String',
                $paras:[
                    "str [Required]: String, target string"
                ],
                $snippet:[
                    "alert(xui.str.rtrim(' abc ').length)"
                ]
            },
            startWith :{
                    $desc:"Tests if this string starts with the specified str",
                    $rtn:'Boolean',
                    $paras:[
                        "str [Required]: String, target string",
                        "sStr [Required]: String, test string"
                    ],
                    $snippet:[
                        "alert(xui.str.startWith('abc','a'))"
                    ]
            },
            toDom:{
                $desc:"To create Element based on the specified string",
                $rtn:'xui.Dom',
                $paras:[
                    "str [Required]: String, target string"
                ],
                $snippet:[
                    "var node = xui.str.toDom('<div>a</div>'); alert(node.outerHTML())"
                ]
            },
            trim :{
                $desc:"Returns a copy of the string, with leading and trailing whitespace omitted",
                $rtn:'String',
                $paras:[
                    "str [Required]: String, target string"
                ],
                $snippet:[
                    "alert(xui.str.trim(' abc ').length)"
                ]
            }
        },
        toArr:{
            $desc:"Makes an Array Object from input value",
            $rtn:"Array",
            $paras:[
                "value [Required]: Object, target Object",
                "force [Optional]: Boolean , char, or [undefined]. [undefined] for trans arguments to Array, char for trans String to Arry, Boolean for trans hash Object to Array. Default is [undefined]"
            ],
            $snippet:[
                "var s='a,b,c', a=xui.toArr(s); alert(xui.serialize(a));",
                "var s='a:b:c', a=xui.toArr(s,':'); alert(xui.serialize(a));",
                "var f=function(a,b,c){ var a=xui.toArr(arguments);alert(xui.serialize(a));}; f(1,2,3); ",
                "var hash={a:1,b:2}, a=xui.toArr(hash,true); alert(xui.serialize(a));",
                "var hash={a:1,b:2}, a=xui.toArr(hash,false); alert(xui.serialize(a));"
            ]
        },
        tryF:{
            $desc:"To try to run a function",
            $rtn:"Object",
            $paras:[
                "fun [Required]: Function, Function to run",
                "args [Optional]: Array, Arguments for fun",
                "scope [Optional]: Object, [this] pointer for [fun]",
                "df [Optional]: Object, Default return value of fun( if [fun] is not a Function)"
            ],
            $snippet:[
                "alert(xui.tryF()); alert(xui.tryF('s')); alert(xui.tryF(4,null,null,true)); ",
                "var f=function(){return 'a';}; alert(xui.tryF(f));",
                "var f=function(v){alert(v);return this.a;}, o={a:true}; alert(xui.tryF(f,['parameter'],o));"
            ]
        },
        unserialize:{
            $desc:"To unserialize JSON string to a javascript Object",
            $rtn:"Object",
            $paras:[
                "str [Required]: String, string to unserialize",
                "dateformat [Optional]: String, To determine unserialize Date string representing or not"
            ],
            $snippet:[
                "var o={a:[1,{k:1}],s:'s',d:new Date},str; alert(str=xui.serialize(o)); var o2=xui.unserialize(str); alert(o2.d)",
                "var o={a:[1,,{k:1}],s:'s',d:new Date},str; alert(str=xui.serialize(o)); var o2=xui.unserialize(str, true); alert(o2.d)",
                "alert(typeof xui.unserialize(xui.serialize(xui('btnLang'))))",
                "alert(typeof xui.unserialize(xui.serialize(xui.Dom.byId('btnLang'))))",
                "alert(typeof xui.unserialize(xui.serialize(xui.UIProfile.getFromDom('btnLang'))))",
                "alert(typeof xui.unserialize(xui.serialize(xui.UIProfile.getFromDom('btnLang').boxing())))"
            ]
        },
        preLoadImage:{
            $desc:"preLoad Image(s)",
            $rtn:"Number",
            $paras:[
                "src [Required]: String, image's url address, or an Array of url address",
                "onSuccess [Optional]: Function, function(img), callback function for image loaded successfully",
                "onFail [Optional]: Function, function(img), callback function for image loaded "
            ]
        },

        SERIALIZEMAXLAYER:{
             $desc:"The max layers for serialize"
        },
        SERIALIZEMAXSIZE:{
            $desc:"The max size for serialize"
        },
        basePath:{
            $desc:"Dir where xui lib exists"
        },
        use:{
            $desc:"Uses a xid (each xid represents a DOM Element) to quickly pack a DOM Element to a xui.Dom Object. No new xui.Dom was created here",
            $rtn:"xui.Dom Object",
            $paras:[
                "xid [Required]: String. each xid represents a DOM Element"
            ],
            $snippet:[
                    "var id='xui.temp.1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=xui.create('<button>click me</button>')); o.onClick(function(p,e,xid){ xui.use(xid).text('updated')  });"+
                    "}"
            ],
            $memo:"Uses the [xui.use] result immediately"
        },
        getId:{
            $desc:"Gets corresponding xid string from a DOM Element or id",
            $rtn:'String',
            $snippet:[
                "alert(xui.getId('btnLang'))"
            ]
        },
        getNode:{
            $desc:"Gets DOM element from xid",
            $rtn:'Object'
        },
        setNodeData:{
            $desc:"Sets data to a dom element",
            $rtn:"Object",
            $paras:[
                "node [Required]: Element/String, a dom element or a xid",
                "path [Required]: Array, path array, ['a','b','c'] => {a:{b:{c:[variable]}}}",
                "value [Optional]: any, value to set. Default is undefined => Unsets value"
            ],
            $snippet:[
                    "var id='xui.temp.2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=xui.create('<button>click me</button>')); xui.setNodeData(o.get(0), 'key1','value1'); xui.setNodeData(o.get(0),['key21','key22'],'value2'); o.onClick(function(p,e,xid){ alert(xui.getNodeData(xid, 'key1')); alert(xui.getNodeData(xid, ['key21','key22']));});"+
                    "}"
            ]
        },
        getNodeData:{
            $desc:"Gets data from a dom element",
            $rtn:"Object",
            $paras:[
                "node [Required]: Element/String, a dom element or a xid",
                "path [Required]: Array, path array, ['a','b','c'] => {a:{b:{c:[variable]}}}"
            ],
            $snippet:[
                    "var id='xui.temp.3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=xui.create('<button>click me</button>')); xui.setNodeData(o.get(0), 'key1','value1'); xui.setNodeData(o.get(0),['key21','key22'],'value2'); o.onClick(function(p,e,xid){ alert(xui.getNodeData(xid, 'key1')); alert(xui.getNodeData(xid, ['key21','key22']));});"+
                    "}"
            ]
        },
        isDomReady:{
            $desc:"Indicates whether or not the DOM is ready",
            $rtn:"Boolean",
            $snippet:[
                "alert(xui.isDomReady)"
            ]
        },
        Locale: {
            $desc:"xui.Locale is an hash Object for locale related info",
            $rtn:"Object",
            $snippet:[
                "xui.each(xui.Locale.en,function(o,i){alert(i+':'+o)})"
            ],
            $memo:"Use xui.getRes([resource key]) to get Locale value"
        },
        browser:{
            $desc:"xui.browser is an hash Object for browser related info",
            $rtn:"Object",
            $snippet:[
                "alert(xui.serialize(xui.browser))"
            ]
        },
        ini:{
            $desc:"xui.ini is an hash Object collection for CrossUI path, application path and other path name. And, CrossUI will merge customized [xui_ini](You must declare [xui_ini] before CrossUI lib is loaded.) Object into [xui.ini] too",
            $rtn:"Object",
            $snippet:[
                "alert(xui.serialize(xui.ini))"
            ]
        },
        win:{
            $desc:"The shortcut of xui([window])",
            $rtn:"xui.Dom"
        },
        doc:{
            $desc:"The shortcut of xui([document])",
            $rtn:"xui.Dom"
        },
        create:{
            $desc:"To create DOM element or xui.UI Object",
            $rtn:"xui.Dom/xui.UI",
            $snippet:[
                "//create DOM element \n var a=xui.create('div'); alert(a.get(0).nodeName)",
                "//create DOM element \n var a=xui.create('<div>node</div>'); alert(a.get(0).nodeName)",
                "//create xui.UI Object \n var a=xui.create('xui.UI.Button'); alert(a.get(0).key)",
                "//create xui.UI Object \n //parameters: // key,properties, events, host, children \n var a=xui.create('xui.UI.Button',{caption:'btn'}); alert(a.get(0).key)",
                "//create xui.UI Object \n var profile = (new xui.UI.Button()).get(0); var a=xui.create(profile); alert(a.get(0).key)"
            ]
        },
        getObject:{
            $desc:"Each xui.UIProfile Object has an unique id, this function enables you to get UIProfile Object by the unique id",
            $rtn:'xui.UIProfile',
            $paras:[
                "id [Required]: String, xui.UI Object unique id"
            ],
            $snippet:[
                "var id=xui.UI.getAll().get(0).getId(); alert(xui.getObject(id).key);"
            ]
        },
        getObjectByAlias:{
            $desc:"To get the widget from its alias",
            $rtn:'xui.absBox',
            $paras:[
                "alias [Required]: String, the alias"
            ]
        },
        getPath:{
            $desc:"Gets the absolute URL path from its class path key",
            $rtn:'String',
            $paras:[
                "key [Required]: String, class path key",
                "tag [Optional]: String, file postfix",
                "folder [Optional]: String, folder name"
            ],
            $snippet:[
                "alert(xui.getPath('a.b.c')); alert(xui.getPath('a.b.c','.js')); alert(xui.getPath('a.b.c','.gif','img')); ",
                "alert(xui.getPath('xui.b.c')); alert(xui.getPath('xui.b.c','.js')); alert(xui.getPath('xui.b.c','.gif','img')); "
            ]
        },
        adjustVar:{
            $desc:"Try to adjust XUI pseudocode to JS variable",
            $rtn:"Object",
            $paras:[
                "obj [Required]: Object,  variable",
                "scope [Optional]: Object, the scope object.  Default is [window]"
            ]
        },
        adjustRes:{
            $desc:"Adjust the string with resource id (a word beginning with '$' and including \".\")",
            $rtn:'String',
            $paras:[
                "str [Required]: String, the string including resource id",
                "wrap [Optional]: Boolean, to determine whether wrapRes function is used or not(using getRes)"
            ],
            $snippet:[
                "alert(xui.adjustRes('$color.LIST.E1FFFF $color.LIST.E1FFFF $abd.kkk $abc')); "
            ]
        },
        getRes:{
            $desc:"Gets the resource string from resource id",
            $rtn:'String',
            $paras:[
                "id [Required]: String, resource id"
            ],
            $snippet:[
                "alert(xui.getRes('doc.xui.Class.$$desc')); alert(xui.Locale[xui.getLang()].doc.xui.Class.$$desc); ",
                "alert(xui.getRes('color.LIST.E1FFFF')); alert(xui.Locale[xui.getLang()].color.LIST.E1FFFF); ",
                "// if does't exist, return the last word \n alert(xui.getRes('doesnt.exist'))"

            ],
            $memo:"All the resource string is in [xui.Locale] <br \> [<a href='#xui.setLang'>xui.setLang</a>], [<a href='#xui.getRes'>xui.getRes</a>/<a href='#xui.wrapRes'>xui.wrapRes</a>] often used together"
        },
        fetchClass:{
            $desc:"Gets the last class from a locale or remote URI",
            $paras:[
                "uri [Required]: String, .js file path",
                "onSuccess [Optional]: Function(class, uir), if it's successfully, call this function",
                "onFail [Optional]: Function, if it's fail, call this function",
                "onAlert [Optional]: Function, if there's an alert, call this function",
                "force [Optional]: Boolean, whether force to read the file or not"
            ]
        },
        include:{
            $desc:"Includes the target class .js file to the current document",
            $paras:[
                "id [Required]: String, class key. Uses '' if you dont want to check whether or not it exists",
                "path [Required]: String, .js file path",
                "onSuccess [Optional]: Function, if includes the file successfully, call this function",
                "onFail [Optional]: Function, if doesn't include the file, call this function",
                "sync [Optional]: Boolean, sync or async. Default is [false]",
                "options [Optional]: Object, a set of key/value pairs that configure the request"
            ],
            $snippet:[
                "//If the class have been included already, it'll trigger onSuccess callback function. \n"+
                "xui.include('xui.Thread', '../js/clsname.js',function(){alert('success');},function(){alert('fail')});",
                "//This will include .js file to document \n"+
                "App.Test1=undefined; xui.include('App.Test1', 'App/js/Test1.js',function(){alert('success');},function(){alert('fail')});",
                "////This path doesn't exist \n " +
                "xui.include('App.doesntexist', 'App/js/doesntexist.js', function(){alert('success');},function(){alert('fail')});"
            ]
        },
        mailTo:{
            $desc:"Pop up system email window",
            $paras:[
                "email [Required]: String, email addrss",
                "subject [Optional]: String, email subject",
                "body [Optional]: String, email  body",
                "cc [Optional]: String, cc address",
                "bcc  [Optional]: String, bcc address"
            ]
        },
        require:{
            $desc:"Requires a class",
            $paras:[
                "cls [Required]: String/Array, class name",
                "onEnd [Optional]: Function, the end callback function",
                "onSuccess [Optional]: Function(class, uir), if it's successfully, call this function",
                "onFail [Optional]: Function, if it's fail, call this function",
                "onAlert [Optional]: Function, if there's an alert, call this function",
                "force [Optional]: Boolean, whether force to read the file or not"
            ],
            $snippet:[
                "// Gets .js sync \n"+
                "App.Test1=undefined; xui.require('App.Test1',function(cls){alert(cls.KEY);},null,false); ",
                "// This path doesn't exist \n " +
                "xui.require('App.doesntexist',function(rsp){alert(rsp)});"
            ]
        },
        request:{
            $desc:"To get/set data from/to server. It can switch between xui.Ajax, xui.JSONP and xui.XDMI automatically according to url and request method"+
                  "<>default=>xui.Ajax; if(isCrossDomain(uri))=>xui.JSONP;if(method=='POST')=>xui.XDMI;</strong>",
            $paras:[
                "uri [Required]: String, The URL of the request target",
                "query [Optional]:  Object[Key/value pairs], request data. Defalut is {}",
                "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request is done successfully",
                "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request fails",
                "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute request -> resume thread]",
                "options [Optional]: Object, a set of key/value pairs that configure the request"
            ],
            $memo:"Sees <a href='#xui.Ajax'>xui.Ajax</a>, <a href='#xui.JSONP'>xui.JSONP</a> and <a href='#xui.XDMI'>xui.XDMI</a> please!"
        },
        restGet:{
            $desc:"To call RESTful GET service ",
            $paras:[
                "uri [Required]: String, The URL of the request target",
                "query [Optional]:  Object[Key/value pairs], request data. Defalut is {}",
                "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request is done successfully",
                "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request fails",
                "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute request -> resume thread]",
                "options [Optional]: Object, a set of key/value pairs that configure the request"
            ]
        },
        restPost:{
            $desc:"To call RESTful POST service ",
            $paras:[
                "uri [Required]: String, The URL of the request target",
                "query [Optional]:  Object[Key/value pairs], request data. Defalut is {}",
                "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request is done successfully",
                "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request fails",
                "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute request -> resume thread]",
                "options [Optional]: Object, a set of key/value pairs that configure the request"
            ]
        },
        restPut:{
            $desc:"To call RESTful PUT service ",
            $paras:[
                "uri [Required]: String, The URL of the request target",
                "query [Optional]:  Object[Key/value pairs], request data. Defalut is {}",
                "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request is done successfully",
                "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request fails",
                "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute request -> resume thread]",
                "options [Optional]: Object, a set of key/value pairs that configure the request"
            ]
        },
        restDelete:{
            $desc:"To call RESTful DELETE service ",
            $paras:[
                "uri [Required]: String, The URL of the request target",
                "query [Optional]:  Object[Key/value pairs], request data. Defalut is {}",
                "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request is done successfully",
                "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request fails",
                "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute request -> resume thread]",
                "options [Optional]: Object, a set of key/value pairs that configure the request"
            ]
        },
        log:{
            $desc:"Logs information to Debugger Window. Call window.console.log by default, or xui.echo",
            $snippet:[
                "xui.log(1,'a',[],{});"
            ],
            $memo:"You can input multi parameters to this funciton. <br /> <b>You must include xui.Debugger.js to enable this function.</b>"
        },
        echo:{
            $desc:"Echos information to xui Monitor Window",
            $snippet:[
                "xui.echo(1,'a',[],{});"
            ],
            $memo:"You can input multi parameters to this funciton. <br /> <b>You must include xui.Debugger.js to enable this function.</b>"
        },
        main:{
            $desc:"Binds a function to be executed whenever the DOM is ready. You can have as many main functions on your page as you like. The functions are then executed in the order they were added",
            $paras:[
                'fun [Required]: Function, function to be bound'
            ],
            $snippet:[
                "//xui.main(function(){alert('first')}); \n//xui.main(function(){alert('second')}); \n ////The above code will bind two functions to DOM ready event"
            ]
        },
        broadcast:{
            $desc:"Broadcast message to specific type MessageService",
            $rtn:"undefined",
            $paras:[
                "id [Required]: String, message id",
                "msg1 [Optional]: Object, message 1",
                "msg2 [Optional]: Object, message 2",
                "msg3 [Optional]: Object, message 3",
                "msg4 [Optional]: Object, message 4",
                "msg5 [Optional]: Object, message 5",
                "msg6 [Optional]: Object, message 6",
                "msg7 [Optional]: Object, message 7",
                "msg8 [Optional]: Object, message 8",
                "msg9 [Optional]: Object, message 9"
            ]
        },
        launch:{
            $desc:"To create a xui.Module , and show it",
            $paras:[
                "cls [Required] : String, the full class path name(e.g'xui.App')",
                "onEnd [Optional]: Function(err:Error/String, module: xui.Module). This function will be called after the process is end",
                "lang [Optional] : String, language name.(e.g'en')",
                "theme [Optional] : String, theme name..(e.g'vista')",
                "showUI [Optional] : Boolean, indicates whether or not it shows the Module UI. Default is true;"
            ],
            $memo:"Equals to xui.Module.load"
        },
        getModule :{
            $desc:"Gets a Module Object from cache directly if it exists, or loads the Module code first, creates the Module and returns it",
            $rtn:"xui.Module",
            $paras:[
                "cls [Required] : String, the Module class",
                "onEnd [Optional] : Function(err:Error/String, module: xui.Module, threadid:String), the callback function, it will be executed once when the Module is created successfully",
                "threadid [Optional] : String, the inner threadid",
                "cached [Optional] : Boolean, Default is true. If cached is false, that indicates ModuleFactory won't get it from the Module cache, and won't cache the result",
                "properties [Optional] : Object, key/value pairs, module's properties",
                "events [Optional] : Object, key/value pairs, module's events"
            ],
            $memo:"Equals to xui.ModuleFactory.getModule"
        },
        newModule:{
            $desc:"Creates a new Module Class if the Class exists, or loads the Module Class code first, creates it, and returns it",
            $paras:[
                "cls [Required] : String, the Module Class path name",
                "onEnd [Optional] : Function(err:Error/String, module: xui.Module, threadid:String), the callback function, it will be executed once when the Module is created successfully",
                "threadid [Optional] : String, the inner threadid",
                "properties [Optional] : Object, key/value pairs, module's properties",
                "events [Optional] : Object, key/value pairs, module's events"
            ],
            $memo:"Equals to xui.ModuleFactory.newModule"
        },
        showModule:{
            $desc:"Creates a module and show it",
            $paras:[
                "cls [Required] : String, the Module Class path name",
                "beforeShow[Optional] : Function(module: xui.Module, threadid:String), the callback function, it will be executed once before the Module will be showed. If returns false, the default show function will be ignored",
                "onEnd [Optional] : Function(err:Error/String, module: xui.Module, threadid:String), the callback function, it will be executed once when the Module is created successfully",
                "threadid [Optional] : String, the inner threadid",
                "cached [Optional] : Boolean, Default is true. If cached is false, that indicates ModuleFactory won't get it from the Module cache, and won't cache the result",
                "properties [Optional] : Object, key/value pairs, module's properties",
                "events [Optional] : Object, key/value pairs, module's events",
                "parent [Required] : xui.UI, xui.UI ojbect, Element or xui.Dom Object",
                "subId [Optional] : String, the sub id that determines the set of UIProfiles will be added to",
                "left [Optional] : Number, the css left value",
                "top [Optional] : Number, the css top value"
            ]
        },
        message:{
            $desc:"Shows a message into browser window",
            $paras:[
                "body [Required]: String, message body",
                "head [Optional]: String, message head",
                "width [Optional]: Number, message box width with px. Default is 200px",
                "time [Optional]: Number, message box will be removed after [time] ms. Default is 5000ms"
            ],
            $snippet:[
                "xui.message('A message')",
                "//This will show message box with 100px width, and it will be removed after 1 second. \n" +
                "xui.message('Body', 'Head', 100, 1000)"
            ],
            $memo:"You must include xui.Debugger.js to enable this function"
        },
        alert:{
            $desc:"To show an alert dialog",
            $rtn:"xui.Dialog",
            $paras:[
                "title [Optional] : String, the title string",
                "content [Optional] : String, the content string",
                "onClose [Optional] : Function, the close callback function",
                "btnCap  [Optional] : String, the caption for button",
                "left [Optional] : Number, left value",
                "top [Optional] : Number, top value",
                "parent [Optional] : xui.Dom Object, or xui.UI Object. the parent node. Default is xui('body')",
                "subId [Optional] : String, the sub id",
                "noCache [Optional] : Boolean, to determine to use the cached alert dialog or not, Default is [false]"
            ],
            $snippet:[
                "xui.alert('title','content',function(){alert('ok')})",
                "xui.alert('title','content content content content content content content content content content content content ',function(){alert('ok')})"
            ]
        },
        confirm:{
            $desc:"To show an confirm dialog",
            $rtn:"xui.Dialog",
            $paras:[
                "title [Optional] : String, the title string",
                "content [Optional] : String, the content string",
                "onYes [Optional] : Function, the Yes callback function",
                "onNo [Optional] : Function, the No callback function",
                "btnCapYes [Optional] : String, the Yes button's caption",
                "btnCapNo [Optional] : String, the No button's caption",
                "left [Optional] : Number, left value",
                "top [Optional] : Number, top value",
                "parent [Optional] : xui.Dom Object, or xui.UI Object. the parent node. Default is xui('body')",
                "subId [Optional] : String, the sub id",
                "noCache [Optional] : Boolean, to determine to use the cached confirm dialog or not, Default is [false]"
            ],
            $snippet:[
                "xui.confirm('title','content',function(){alert('yes')},function(){alert('no')})",
                "xui.confirm('title','content content content content content content content content content content content content ',function(){alert('yes')},function(){alert('no')})"
            ]
        },
        pop:{
            $desc:"To show an message dialog",
            $rtn:"xui.Dialog",
            $paras:[
                "title [Optional] : String, the title string",
                "content [Optional] : String, the content string",
                "btnCap [Optional] : String, the command button string",
                "left [Optional] : Number, left value",
                "top [Optional] : Number, top value",
                "parent [Optional] : xui.Dom Object, or xui.UI Object. the parent node. Default is xui('body')",
                "subId [Optional] : String, the sub id"
            ],
            $snippet:[
                "xui.pop('title','content')",
                "xui.pop('title','content content content content content content content content content content content content ','I knew it!')"
            ]
        },
        prompt:{
            $desc:"To show an prompt dialog",
            $rtn:"xui.Dialog",
            $paras:[
                "title [Optional] : String, the title string",
                "caption [Optional] : String, the caption string",
                "content [Optional] : String, the content string",
                "onYes [Optional] : Function, the Yes callback function",
                "onNo [Optional] : Function, the No callback function",
                "btnCapYes [Optional] : String, the Yes button's caption",
                "btnCapNo [Optional] : String, the No button's caption",
                "left [Optional] : Number, left value",
                "top [Optional] : Number, top value",
                "parent [Optional] : xui.Dom Object, or xui.UI Object. the parent node. Default is xui('body')",
                "subId [Optional] : String, the sub id",
                "noCache [Optional] : Boolean, to determine to use the cached prompt dialog or not, Default is [false]"
            ],
            $snippet:[
                "xui.prompt('title','caption', 'content content ',function(str){alert(str)})"
            ]
        },
        subscribe:{
            $desc:"Subscribes system message",
            $rtn:"Number",
            $paras:[
                "topic [Required]: String, the topic",
                "subscriber [Required]: String, the unique id for subscriber",
                "receiver [Required]: Function, The subscriber's message receiver(callback function). If it returns [false], all the later subscribers will be ignored",
                "asy [Optional]: Boolean, asynchronous or not, the default value is [false]"
            ],
            $snippet:[
                "xui.subscribe('topic1','id1', function(msg){alert('subscriber 1th got a message: '+msg)},true);"+
                "xui.subscribe('topic1','id2', function(msg){alert('subscriber 2th got a message: '+msg);return false});"+
                "xui.subscribe('topic1','id3', function(msg){alert('subscriber 3th got a message: '+msg)});"+
                "xui.publish('topic1',['The topic1 was published!']);"+
                "xui.unsubscribe('topic1');"+
                "xui.publish('topic1');"+
                "xui.unsubscribe();"
            ]
        },
        unsubscribe:{
            $desc:"Unsubscribes system message",
            $rtn:"undefined",
            $paras:[
                "topic [Optional]: String, the topic. If it was not specified, all subscribers will be unsubscribed",
                "subscriber [Optional]: String, the unique id for subscriber. If it was not specified, all subscribers in the topic will be unsubscribed"
            ]
        },
        publish:{
            $desc:"Publishes system message to subscribers",
            $rtn:"undefined",
            $paras:[
                "topic [Optional]: String, the topic. If it was not specified, the message will be published to all subscribers",
                "args [Optional]: Array, arguments for the callback function",
                "subscribers [Optional]: String/Array, the unique ids for subscriber",
                "scope [Optional]: Object, the callback function's scope"
            ]
        },
        getSubscribers:{
            $desc:"Gets system subscribers info",
            $rtn:"Object",
            $paras:[
                "topic [Optional]: String, the topic. If it was not specified, all subscribers will be returned",
                "subscriber [Optional]: String, the unique id for subscriber.If it was not specified, all subscribers in the topic will be returned"
            ]
        },
        getDateFormat:{
            $desc:"Gets the Date object's serialize format",
            $rtn:"String",
            $snippet:[
                "xui.setDateFormat('default'); alert(xui.getDateFormat()); alert(xui.serialize(new Date));",
                "xui.setDateFormat('gmt'); alert(xui.getDateFormat()); alert(xui.serialize(new Date));",
                "xui.setDateFormat('utc'); alert(xui.getDateFormat()); alert(xui.serialize(new Date));"
            ]
        },
        setDateFormat:{
            $desc:"Sets the Date object's serialize format'gmt', 'utc' or 'default'",
            $snippet:[
                "xui.setDateFormat('default'); alert(xui.getDateFormat()); alert(xui.serialize(new Date));",
                "xui.setDateFormat('gmt'); alert(xui.getDateFormat()); alert(xui.serialize(new Date));",
                "xui.setDateFormat('utc'); alert(xui.getDateFormat()); alert(xui.serialize(new Date));"
            ]
        },
        getAppLangKey:{
            $desc:"Gets the current application language key",
            $rtn:"String",
            $snippet:["xui.setAppLangKey('app'); alert(xui.getAppLangKey());"]
        },
        setAppLangKey:{
            $desc:"Sets the current application language key. If this key was specified, system will try to load the locale file (Locale/[xui.getLang()].js) when [xui.setLang()] is called",
            $snippet:["xui.setAppLangKey('app'); alert(xui.getAppLangKey())"]
        },
        getTheme:{
            $desc:"Gets the theme key string",
            $rtn:"String",
            $snippet:[
                "alert(xui.getTheme());"
            ]
        },
        setTheme:{
            $desc:"Sets the theme key string",
            $rtn:"[self]",
            $paras:[
                "key [Optional] : String, the theme key",
                "refresh [Optional] : Boolean, to determine whether refresh UI controls or not. Default is [true]",
                "onSuccess [Optional]: Function, if it's success, call this function",
                "onFail [Optional]: Function, if it's fail, call this function"
            ],
            $snippet:[
                "//xui.setTheme('xp')"
            ]
        },
        getLang:{
            $desc:"Gets the language key",
            $rtn:"String",
            $snippet:["alert(xui.getLang());"]
        },
        setLang:{
            $desc:"Sets the language for the whole page. System will find and load the CrossUI locale file (in [xui.ini.path]/Locale/), and the application location file (in [xui.ini.appPath]/Locale/)",
            $paras:[
                "key [Required]: String, lang key",
                "callback [Optional]: Function, callback function"
            ],
            $memo:"[<a href='#xui.setLang'>xui.setLang</a>], [<a href='#xui.getRes'>xui.getRes</a>/<a href='#xui.wrapRes'>xui.wrapRes</a>] often used together"
        },
        //request ( uri, query, onSuccess, onFail, threadid, args ),
        wrapRes:{
            $desc:"Gets the resource string from resource id, and wrap it with the specified HTML content",
            $rtn:'String',
            $paras:[
                "id [Required]: String, resource id"
            ],
            $snippet:[
                "alert(xui.wrapRes('doc.Class.$desc')); alert(xui.Locale[xui.getLang()].doc.Class.$desc); ",
                "alert(xui.wrapRes('color.LIST.E1FFFF')); alert(xui.Locale[xui.getLang()].color.LIST.E1FFFF); ",
                "// if does't exist, return the last word \n alert(xui.wrapRes('doesnt.exist'))"

            ],
            $memo:"All the resource string is in [xui.Locale]. <br \> [<a href='#xui.setLang'>xui.setLang</a>], [<a href='#xui.getRes'>xui.getRes</a>/<a href='#xui.wrapRes'>xui.wrapRes</a>] often used together. <br \> [xui.setLang] works only with [xui.wrapRes] format HTML(id=[xui.$localeDomId]) only"
        }
    });

    xui.set(xui.Locale,["en","doc","xui","Thread"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Thread Class.  Execution model: <strong>[onStart function]--delay 1-->[task function 1][callback function 1]--delay 2-->[task function 2][callback function 2]--delay 3-->[task function ...n][callback function ...n][onEnd function]</strong>",
        $rtn:"xui.Thread",
        $paras:[
            "id [Required]: String, for identify a thead. If system finds an existing xui.Thread Object with this id, this function will return that Object ; If system does not find it, or this function doesn't specify id, system will create a new xui.Thread Object, assign an unique id to it, and return it. Uses null if you don't want to specify it",
            "tasks [Required]: Array, functions/'function package' to execute. package format:<br> { <br>"+
                    "task [Required],      //Function( args:Object/String). task function.<br>"+
                    "args [Optional],      //Array, arguments for task function.<br>"+
                    "scope [Optional],    //Object, [this] pointer for [task] function.<br>"+
                    "delay [Optional],     //Number, delay time(ms) before the current function will be triggered. Default is 0.<br>"+
                    "callback [Optional]   //Function(threadid:String). callback to call after this task function is called. if callback return false, the thread will abort. <br>"+
                "}",
            "delay [Optional]: Number, default delay time(ms) before task function will be triggered. Default is 0",
            "callback [Optional]: Function(threadid:String). default callback to call after each function is called",
            "onStart [Optional]: Function(threadid:String). this function will be called before the thread triggered the first task",
            "onEnd [Optional]: Function(threadid:String). this function will be called after the thread finishes the last task",
            "cycle [Optional]: To determine whether or not the current xui.Thread is in circular mode. Default is false"
        ],
        $snippet:[
            "var s=1; xui.Thread(null, [function(){xui.message(s)},2000,{task:function(){xui.message(s)}}],200,function(){s++}).start()",
            "xui.Thread(null, [function(){xui.message(1)},function(){xui.message(2)}],2000).start()",
            "xui.Thread('_id', [function(){xui.message(1);xui.Thread('_id').abort();},function(){xui.message(2)}]).start();",
            "xui.Thread(null, [function(){xui.message(1)},2000,{task:function(){},callback:function(){return false}},function(){xui.message(2)}]).start()",
            "var a=[];xui.Thread(null, [function(threadid){a.push(threadid+' task1')},function(threadid){a.push(threadid+' task2')}],null,function(threadid){a.push(threadid+' callback')},function(threadid){a.push(threadid+' start')},function(threadid){a.push(threadid+' end'); alert(a);}).start()",
            "var a=[];xui.Thread(null, [function(threadid){a.push(threadid+' task1')},{task:function(threadid){a.push(threadid+' task2')},callback:function(threadid){a.push(threadid+' not the default callback')}}],null,function(threadid){a.push(threadid+' callback')},function(threadid){a.push(threadid+' start')},function(threadid){a.push(threadid+' end'); alert(a);}).start()",
            "var a=[],i=3; xui.Thread(null, [function(){a.push(1)},function(){a.push(2)}],0,function(){i--;if(!i)return false;},null,function(){alert(a);},true).start()"
        ],
        $memo:"Dont use [new xui.tread] to create a [xui.tread] Object",
        abort:{
            $desc:"To abort the specified thread",
            $paras:[
                "id [Required]: String, thread id"
            ],
            $snippet:[
                "xui.Thread('_id', [function(){xui.message(1);xui.Thread.abort('_id')},function(){xui.message(2)}]).start();"
            ]
        },
        observableRun:{
            $desc:"Wraps a set of functions and an onEnd function to an UI-Observable thread and executes this thread. <br /> If specified [threadid] does not exist, create a new xui.Thread, set 'dom.busy' to [thread onStart] function, and 'dom.free' to [thread onEnd] function. <br /> If specified [threadid] exists, inserts tasks and onEnd function to this existing thread",
            $paras:[
                "tasks [Required]: Funtion or Array, A single task(function) or a set of tasks(functions)",
                "onEnd [Optional]: Function, 'on end' callback function",
                "threadid [Optional]: Stirng, thread id. If this thread exists, all [tasks] will be insert into this thread"
            ],
            $snippet:[
                "xui.Thread.observableRun(function(){xui.message('fun')},function(){alert('end')});",
                "xui.Thread.observableRun(2000,function(){alert('end')});",
                "xui.Thread.observableRun([function(){xui.message('fun')},2000],function(){alert('end')});",
                "var a=[];xui.Thread.observableRun([{task:function(){a.push(3);},delay:2000}],function(){a.push(4);alert(a);},'__id'); xui.Thread.observableRun([function(){a.push(1)}],function(){a.push(2)},'__id');"
            ]
        },
        repeat:{
            $desc:"Repeats a task function again and again until the function returns [false]",
            $rtn:"xui.Thread",
            $paras:[
                "task [Required]: Function, a task function",
                "interval [Optional]: Number, repeat interval(ms)",
                "onStart [Optional]: Function",
                "onEnd [Optional]:  Function"
            ],
            $snippet:[
                "var l=1; xui.Thread.repeat(function(){alert('repeat time:' + (l++)); if(l>3)return false;}, 500)"
            ]
        },
        isAlive:{
            $desc:"To determine whether the specific thread id is alive",
            $rtn:"Boolean",
            $paras:[
                "id [Required]: String, thread id"
            ],
            $snippet:[
                "alert(xui.Thread.isAlive('_id'))",
                "var a=[];xui.Thread('_id', [function(){a.push(1);a.push(xui.Thread.isAlive('_id'));},function(){a.push(2)}],0,null,null,function(){alert(a)}).start();"
            ]
        },
        group:{
            $desc:"To group a set of xui.Thread Object(or threadid), wrap them to a shell thread. You can execute them in parallel",
            $rtn:"xui.Thread",
            $paras:[
                "id [Required]: String, thread id. Uses [null] if you don't want to specify it",
                "group [Required]: Array, a set of xui.Thread Object(or threadid)",
                "callback [Optional]: Function(threadid:String). Callback function for the shell thread",
                "onStart [Optional]: Function(threadid:String).  onStart function for the shell thread",
                "onEnd [Optional]:  Function(threadid:String).  onEnd function for the shell thread"
            ],
            $snippet:[
                "var a=[]; var t1=xui.Thread('t1',[function(){a.push(1)},function(){a.push(2)}]), t2=xui.Thread('t2',[function(){a.push('a')},function(){a.push('b')}]);"+
                "xui.Thread.group(null,[t1,'t2'],function(){a.push('|')},function(){a.push('<')},function(){a.push('>');alert(a);}).start();"
            ],
            $memo:"You have to use start function to start [thread group]!"
        },
        suspend:{
            $desc:"Suspends the specified thread until the [resume] function will be called",
            $paras:[
                "id [Required]: String, thread id"
            ],
            $snippet:[
                "xui.Thread('_bb',[function(){xui.message(1)},function(){xui.Thread.suspend('_bb');xui.asyRun(function(){xui.Thread.resume('_bb')},3000)},function(){xui.message(2)}]).start();"
            ]
        },
        getStatus:{
            $desc:"Gets the thread's status"
        },
        resume:{
            $desc:"Resumes to execute a thread that is suspended",
            $paras:[
                "id [Required]: String, thread id"
            ],
            $snippet:[
                "xui.Thread('_bb',[function(){xui.message(1)},function(){xui.Thread.suspend('_bb');xui.asyRun(function(){xui.Thread.resume('_bb')},3000)},function(){xui.message(2)}]).start();"
            ]
        },
        start:{
            $desc:"Starts to execute a thread",
            $paras:[
                "id [Required]: String, thread id"
            ],
            $snippet:[
                "xui.Thread('_t1', [function(){xui.message(1)},function(){xui.message(2)}]); xui.Thread.start('_t1')"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            links:{
                $desc:"Links another thread(the target thread) to the current one, the target thread will be started after the [onEnd] function of the current thread finishes",
                $rtn:"[self]",
                $paras:[
                    "thread [Required] : xui.Thread Object, the target thread to be linked"
                ],
                $snippet:[
                    "var out=[];var t1=xui.Thread(null,[function(){out.push(2)},function(){out.push(3)}],null,null,function(){out.push(1)},function(){out.push(4)});" +
                    "var t2=xui.Thread(null,[function(){out.push(6)},function(){out.push(7)}],null,null,function(){out.push(5)},function(){out.push(8);alert(out);});" +
                    "t1.links(t2); t1.start();"
                ]
            },
            isAlive:{
                $desc:"To determine whether the thread is alive",
                $rtn:"Boolean"
            },
            abort:{
                $desc:"To abort the thread",
                $snippet:[
                    "xui.Thread('_id', [function(){xui.message(1);xui.Thread('_id').abort();},function(){xui.message(2)}]).start();"
                ]
            },
            suspend:{
                $desc:"Suspends the thread until the [resume] function will be called",
                $rtn:"[self]",
                $paras:[
                    "time [Optional]: Number: Resumes to execute the next task after [time]ms. If it was not specified, suspend only, won't resume"
                ],
                $snippet:[
                    "xui.Thread('_bb',[function(){xui.message(1)},function(){xui.Thread('_bb').suspend();xui.asyRun(function(){xui.Thread('_bb').resume();},3000)},function(){xui.message(2)}]).start();"
                ]
            },
            resume:{
                $desc:"Resumes to execute the suspended thread",
                $rtn:"[self]",
                $paras:[
                    "time [Optional]: undefined/Number/Boolean.<br> "+
                    "Number: Resumes to execute the next task after [time]ms. <br> "+
                    "true: Resumes to execute the next task after [default delay]ms. <br> "+
                    "false: Resumes to execute the next task after 0ms. <br> "+
                    "undefined: Resumes to execute the next task after [the remaining time]. <br> "
                ],
                $snippet:[
                    "xui.Thread('_bb',[function(){xui.message(1)},function(){xui.Thread('_bb').suspend();xui.asyRun(function(){xui.Thread('_bb').resume();},3000)},function(){xui.message(2)}]).start();"
                ]
            },
            start:{
                $desc:"Starts to execute a thread",
                $rtn:"[self]",
                $paras:[
                    "id [Required]: String, thread id"
                ],
                $snippet:[
                    "xui.Thread('_t1', [function(){xui.message(1)},function(){xui.message(2)}]); xui.Thread.start('_t1')"
                ]
            },
            getCache:{
                $desc:"Get a cache value from thread Object according to a key",
                $rtn:"Object",
                $paras:[
                    "key [Required]: String, cache key"
                ],
                $snippet:[
                    "xui.Thread(null, [function(){this.setCache('k','v')},function(){xui.message(this.getCache('k'))}]).start();"
                ]
            },
            setCache:{
                $desc:"Set a cache value to thread Object",
                $rtn:"[self]",
                $paras:[
                    "key [Required]: String, cache key",
                    "value [Required]: String, cache value"
                ],
                $snippet:[
                    "xui.Thread(null, [function(){this.setCache('k','v')},function(){xui.message(this.getCache('k'))}]).start();"
                ]
            },
            insert:{
                $desc:"Inserts a set of tasks[function] to the currrent thread",
                $rtn:"[self]",
                $paras:[
                    "arr [Required]: Array, a set of tasks[function]",
                    "index [Optional]: Nubmer, the target postion. Default is the inner current index(the position before the next task to be executed)"
                ],
                $snippet:[
                    "var out=[];xui.Thread(null,[function(){out.push(1)},function(){this.insert([function(){out.push(1.5)}])},function(){out.push(2)}],null,null,null,function(){alert(out)}).start();"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","absIO"], {
        /*buildQS:{
            $desc:"To build query string",
            $rtn:"String",
            $paras:[
                "hash [Required]: Object, target Object to build query string",
                "flag [Optional]: Boolean, true: to return 'a serialized String'. false: to return a 'A URL query string'"
            ],
            $snippet:[
                "alert(xui.absIO.buildQS({a:1,b:{aa:1,bb:2}},true)); alert(xui.absIO.buildQS({a:1,b:{aa:1,bb:2}}));"
            ]
        },*/
        groupCall:{
            $desc:"To group a set of xui.absIO Object, wrap them to a shell thread. You can execute them in parallel",
            $rtn:"xui.Thread",
            $paras:[
                "hash [Required]: hash Object, A set of xui.absIO Object",
                "callback [Optional]: Function,  this function will be triggered after each xui.absIO Object has ended",
                "onStart [Optional]: Function, onStart function for the shell thread",
                "onEnd [Optional]: Function, onEnd function for the shell thread",
                "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute the request -> resume the thread]"
            ],
            $snippet:[
                "var out=[];var a=xui.Ajax('uri1',0,0,0,0,{retry:0,timeout:500}), b=xui.JSONP('uri2',0,0,0,0,{retry:0,timeout:500}), c=xui.XDMI('uri3',0,0,0,0,{retry:0,timeout:500}); xui.absIO.group({a:a,b:b,c:c},function(id){out.push(id+' end')},function(){out.push('start')},function(){out.push('end');alert(out)})"
            ]
        },
        isCrossDomain:{
            $desc:"To determine whether  or not the given path is a cross domain URI",
            $rtn:"Boolean",
            $paras:[
                "uri [Required]: String, URI path String"
            ],
            $snippet:[
                "alert(xui.absIO.isCrossDomain(location.href));alert(xui.absIO.isCrossDomain('http://www.google.com'));"
            ]
        },
        customQS: {
            $desc:"To customize query string Object. Subclass can overwrite it for adding extra variables or something",
            $rtn:"Object",
            $paras:[
                "obj [Required]: Object or String, query original value"
            ]
        },
        "get":{
            $desc:"Calls Ajax/JSONP/XDMI with GET method",
            $rtn:"xui.absIO",
            $paras:[
                "uri [Required]: String, The request target URI",
                "query [Optional]:  Object[Key/value pairs], request data",
                "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request is done successfully",
                "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request fails",
                "threadid [Optional]: String, the thread id to be bound to the current request",
                "options [Optional]: Object, a set of key/value pairs that configure the request"
             ]
        },
        "post":{
            $desc:"Calls Ajax/JSONP/XDMI with POST method",
            $rtn:"xui.absIO",
            $paras:[
                "uri [Required]: String, The request target URI",
                "query [Optional]:  Object[Key/value pairs], request data",
                "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request is done successfully",
                "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request fails",
                "threadid [Optional]: String, the thread id to be bound to the current request",
                "options [Optional]: Object, a set of key/value pairs that configure the request"
             ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            start:{
                $desc:"Starts to execute a xui.absIO Object",
                $rtn:"[self]",
                $snippet:[
                    "//xui.Ajax('uri').start();"
                ]
            },
            isAlive:{
                $desc:"To determine whether the xui.absIO is alive",
                $rtn:"Boolean"
            },
            abort:{
                $desc:'To abort a xui.absIO process',
                $snippet:[
                    "//var a=xui.Ajax('uri').start(); \n //a.abort();"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","MessageService"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.MessageService Class",
        constructor:{
            $desc:"Creates a timer Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            broadcast:{
                $desc:"Broadcast message to specific type MessageService",
                $rtn:"undefined",
                $paras:[
                    "recipientType [Required]: String, If it was not specified, the message will be published to all MessageServices",
                    "msg1 [Optional]: Object, message 1",
                    "msg2 [Optional]: Object, message 2",
                    "msg3 [Optional]: Object, message 3",
                    "msg4 [Optional]: Object, message 4",
                    "msg5 [Optional]: Object, message 5",
                    "msg6 [Optional]: Object, message 6",
                    "msg7 [Optional]: Object, message 7",
                    "msg8 [Optional]: Object, message 8",
                    "msg9 [Optional]: Object, message 9",
                    "readReceipt [Optional]: Function, read receipt"
                ]
            },
            destroy:{
                $desc:"To destroy the current Object",
                $memo:"Usually, we do not need to call this function manually"
            },
            getRecipientType:{
                $desc:"Gets the acceptable message type",
                $rtn:"String"
            },
            setRecipientType:{
                $desc:"Sets the acceptable message type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getAsynReceive:{
                $desc:"To determine whether it receive message asynchronously",
                $rtn:"Boolean"
            },
            setAsynReceive:{
                $desc:"To specify whether it receive message asynchronously",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            onMessageReceived:{
                $desc:"When it received the message",
                $paras:[
                    "profile : xui.Profile",
                    "msg1: Object, message object 1",
                    "msg2: Object, message object 2",
                    "msg3: Object, message object 3",
                    "msg4: Object, message object 4",
                    "msg5: Object, message object 5",
                    "msg6: Object, message object 6",
                    "msg7: Object, message object 7",
                    "msg8: Object, message object 8",
                    "msg9: Object, message object 9",
                    "readReceipt: Function, read receipt"
                ]
            },
            onReceipt:{
                $desc:"When it got the read receipt",
                $paras:[
                    "profile : xui.Profile",
                    "recipientType : String, the receiver type for the receiptor",
                    "args : Array,  the arguments for the read receipt function"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","XML"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.XML Class(static)",
        json2xml:{
            $desc:"Converts JSON Objec to XML text",
            $rtn:"String",
            $paras:[
                "jsonObj [Required] : Object, JOSON Object"
            ],
            $snippet:["alert(xui.XML.json2xml({root:{a:1,b:'b','@attr':'r','#text':'text','#cdata':'data'}}))"]
        },
        xml2json:{
            $desc:"Converts XML Object to JSON Objec",
            $rtn:"Object",
            $paras:[
                "xmlObj [Required] : Object, XML Object",
                "kf [Optional]: Function, filter function for key String",
                "vf [Optional]: Function, filter function for value String"
            ],
            $snippet:["alert(xui.serialize(xui.XML.xml2json(xui.XML.parseXML('<a attr=\"1\"><b>v</b></a>'))))"]
        },
        parseXML:{
            $desc:"Parses XML text to XML Object",
            $rtn:"Object",
            $paras:[
                "xmlText [Required] : String, XML text"
            ],
            $snippet:["alert(xui.serialize(xui.XML.xml2json(xui.XML.parseXML('<a attr=\"1\"><b>v</b></a>'))))"]
        }
    });


    xui.set(xui.Locale,["en","doc","xui","XMLRPC"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.XMLRPC Class(static)",
        wrapRequest:{
            $desc:"Wraps the XML string for XML RPC",
            $rtn:"String",
            $paras:[
                "methodName [Required] : String, XML RPC method name",
                "params [Required] : Object, XML RPC parameters"
            ]
        },
        parseResponse:{
            $desc:"Converts a XML RPC respose(XML Document) to JSON object",
            $rtn:"Object",
            $paras:[
                "xmlObj [Required] : Object, XML Document"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","SOAP"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.SOAP Class(static)",
        RESULT_NODE_NAME:{
            $desc:"The result node name of a SOAP response",
            $snippet:["alert(xui.SOAP.RESULT_NODE_NAME)"]
        },
        wrapRequest:{
            $desc:"Wraps the XML string for SOAP",
            $rtn:"String",
            $paras:[
                "methodName [Required] : String, SOAP method name",
                "params [Required] : Object, SOAP parameters",
                "wsdl  [Required] : Object, wdsl document for SOAP "
            ]
        },
        parseResponse:{
            $desc:"Converts a SOAP respose(XML Document) to JSON object",
            $rtn:"Object",
            $paras:[
                "xmlObj [Required] : Object, XML Document",
                "methodName [Required] : String, SOAP parameters",
                "wsdl  [Required] : Object, wdsl document for SOAP "
            ]
        },
        getWsdl:{
            $desc:"Gets the WSDL document for SOAP",
            $rtn:"Object",
            $paras:[
                "queryURL [Required] : String, SOAP service url",
                "onFail [Required] : Function, the fail callback function"
            ]
        },
        getNameSpace:{
            $desc:"Gets the name space from wsdl document",
            $rtn:"String",
            $paras:[
                "wsdl  [Required] : Object, wsdl document"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","Ajax"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Ajax Class. It can handle same domain GET/POST request, and it can handle synchronous request.</strong>",
        $rtn:"xui.Ajax",
        $paras:[
            "uri [Required]: String/Object, String -- The URL of the request target; Object(to see options) -- a set of key/value pairs that configure the request. If this parameter is Object, other parameters will be ignored",
            "query [Optional]:  Object[Key/value pairs], request data",
            "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request is done successfully",
            "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request fails",
            "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute the request -> resume the thread]",
            "options [Optional]: Object, a set of key/value pairs that configure the request. All options are optional. <strong>Values in Parameters has high priority</strong>" +
                "<br>{"+
                "<br><em>//variables</em>"+
                "<br>&nbsp;&nbsp;uri: String, The URL of the request target"+
                "<br>&nbsp;&nbsp;query: Object[Key/value pairs], request data"+
                "<br>&nbsp;&nbsp;threadid: String, a thread id to be bound to the current request"+
                "<br>&nbsp;&nbsp;asy: Boolean, To determine whether or not  the request is asynchronous. Default is [false]"+
                "<br>&nbsp;&nbsp;<strong>method: 'GET' or 'POST', the request method. Default is 'GET'.</strong>"+
                "<br>&nbsp;&nbsp;retry: Number, how many times it is tried when the request is timeout"+
                "<br>&nbsp;&nbsp;timeout: Number, the timeout time(ms) for this request"+
                "<br>&nbsp;&nbsp;reqType: String, 'form'(Ajax), 'json'(Ajax), or 'xml'(Ajax). Request type, Default is 'form'"+
                "<strong><br>&nbsp;&nbsp;rspType: String 'json'(Ajax),'xml'(Ajax), 'text'(JSONP), 'script'(JSONP), Response type, Default is 'json'.</strong>"+
                "<br><em>//functions</em>"+
                "<br>&nbsp;&nbsp;cusomQS: Function, arguments: [obj, type]. A function to customize query string Object"+
                "<br><em>//normal events</em>"+
                "<br>&nbsp;&nbsp;onSuccess: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request is done successfully"+
                "<br>&nbsp;&nbsp;onFail: Function(response:Object, responsetype:String, threadid:String). Afunction to be executed whenever the request fails"+
                "<br><em>//trace events</em>"+
                "<br>&nbsp;&nbsp;onRetry: Function, arguments:[the current retry time], A function will be triggered when the request retries"+
                "<br>&nbsp;&nbsp;onTimeout: Function, , A function will be triggered when the request the request is timeout"+
                "<br>&nbsp;&nbsp;onStart: Function,  , A function will be triggered when the request starts"+
                "<br>&nbsp;&nbsp;onEnd: Function,  , A function will be triggered when the request ends"+
                "<br><em>//before events</em>"+
                "<br>&nbsp;&nbsp;beforeStart: Function. A function to be executed before onStart, if it returns [false], the request will be End"+
                "<br>&nbsp;&nbsp;beforeFail: Function, arguments:[error Object, threadid]. A function to be executed before onFail, if it returns [false], the request will not call onFail function"+
                "<br>&nbsp;&nbsp;beforeSuccess: Function, arguments:[response, response type, threadid]. A function to be executed before onSuccess, if it returns [false], the request will not call onSuccess function"+
                "<br>}"
        ],
        $snippet:[
            "var out=[]; xui.Ajax('no.js','', function(){out.push('ok')}, function(){out.push('fail');alert(out);}, null, { onStart:function(){out.push('onStart')}, onEnd:function(){out.push('onEnd') }, onTimeout:function(){out.push('onTimeout')}, onRetry:function(){out.push('onRetry')} }).start();",
            "/*\n//The most common usage: \n"+
             "xui.Thread.observableRun(function(threadid){\n"+
             "       xui.Ajax('request.php',hash, function(response){\n"+
             "               //setResponse(response);\n"+
             "           }, function(msg){\n"+
             "               //show error msg\n"+
             "           },\n"+
             "       threadid).start();\n"+
             "   });*/"
        ],
        $memo:"Uses [xui.request] to handle simple request, it can switch ajax/JSONP/XDMI automatically according to url and request method",
        callback:{
            $desc:"String, default callback function name. <strong>Server needs to match it in the response struct.</strong>",
            $snippet:["alert(xui.Ajax.callback)"]
        },
        method:{
            $desc:"String, default request method name('GET' or 'POST') for instance",
            $snippet:["alert(xui.Ajax.method)"]
        },
        optimized:{
            $desc:"Boolean, default optimized option",
            $snippet:["alert(xui.Ajax.optimized)"]
        },
        retry:{
            $desc:"Number, default retry times",
            $snippet:["alert(xui.Ajax.retry)"]
        },
        reqType:{
            $desc:"String, default request type",
            $snippet:["alert(xui.Ajax.reqType)"]
        },
        rspType:{
            $desc:"String, default respond type",
            $snippet:["alert(xui.Ajax.rspType)"]
        },
        uid:{
            $desc:"String,  unique id "
        },
        timeout:{
            $desc:"Number, default timeout time",
            $snippet:["alert(xui.Ajax.timeout)"]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            start:{
                $desc:"Starts to execute a xui.absIO Object",
                $rtn:"[self]",
                $snippet:[
                    "//xui.Ajax('uri').start();"
                ]
            },
            abort:{
                $desc:'To abort a xui.absIO process',
                $snippet:[
                    "//var a=xui.Ajax('uri').start(); \n //a.abort();"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","JSONP"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.JSONP Class. It can handle cross domain GET/POST request.</strong>",
        $rtn:"xui.JSONP",
        $paras:[
            "uri [Required]: String/Object, String -- The URL of the request target; Object(to see options) -- a set of key/value pairs that configure the request. If this parameter is Object, other parameters will be ignored",
            "query [Optional]:  Object[Key/value pairs], request data",
            "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request is done successfully",
            "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request fails",
            "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute the request -> resume the thread]",
            "options [Optional]: Object, a set of key/value pairs that configure the request. All options are optional. <strong>Values in Parameters has high priority</strong>" +
                "<br>{"+
                "<br><em>//variables</em>"+
                "<br>&nbsp;&nbsp;uri: String, The URL of the request target"+
                "<br>&nbsp;&nbsp;query: Object[Key/value pairs], request data"+
                "<br>&nbsp;&nbsp;threadid: String, a thread id to be bound to the current request"+
                "<br>&nbsp;&nbsp;retry: Number, how many times it is tried when the request is timeout"+
                "<br>&nbsp;&nbsp;timeout: Number, the timeout time(ms) for this request"+
                "<br>&nbsp;&nbsp;reqType: String, 'form'or 'json'. Request type, Default is 'form'"+
                "<strong><br>&nbsp;&nbsp;rspType: String, 'text' or 'script'. Response type, Default is 'text'.</strong>"+
                "<br><em>//functions</em>"+
                "<br>&nbsp;&nbsp;cusomQS: Function, arguments: [obj, type]. A function to customize query string Object"+
                "<br><em>//normal events</em>"+
                "<br>&nbsp;&nbsp;onSuccess: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request is done successfully"+
                "<br>&nbsp;&nbsp;onFail: Function(response:Object, responsetype:String, threadid:String). Afunction to be executed whenever the request fails"+
                "<br><em>//trace events</em>"+
                "<br>&nbsp;&nbsp;onRetry: Function, arguments:[the current retry time], A function will be triggered when the request retries"+
                "<br>&nbsp;&nbsp;onTimeout: Function, , A function will be triggered when the request the request is timeout"+
                "<br>&nbsp;&nbsp;onStart: Function,  , A function will be triggered when the request starts"+
                "<br>&nbsp;&nbsp;onEnd: Function,  , A function will be triggered when the request ends"+
                "<br><em>//before events</em>"+
                "<br>&nbsp;&nbsp;beforeStart: Function. A function to be executed before onStart, if it returns [false], the request will be End"+
                "<br>&nbsp;&nbsp;beforeFail: Function, arguments:[error Object, threadid]. A function to be executed before onFail, if it returns [false], the request will not call onFail function"+
                "<br>&nbsp;&nbsp;beforeSuccess: Function, arguments:[response, response type, threadid]. A function to be executed before onSuccess, if it returns [false], the request will not call onSuccess function"+
                "<br>}"
        ],
        $snippet:[
            "/*\n//The most common usage: \n"+
             "xui.Thread.observableRun(function(threadid){\n"+
             "       xui.JSONP('request.php',hash, function(response){\n"+
             "               //setResponse(response);\n"+
             "           }, function(msg){\n"+
             "               //show error msg\n"+
             "           },\n"+
             "       threadid).start();\n"+
             "   });*/"
        ],
        $memo:"<br />1.Uses [xui.include] to include a .js file.<br />2.Uses [xui.request] to handle simple request, it can switch ajax/jsonp automatically according to url",
        callback:{
            $desc:"String, default callback function name. <strong>Server needs to match it in the response struct.</strong>",
            $snippet:["alert(xui.JSONP.callback)"]
        },
        method:{
            $desc:"String, default request method name('GET' or 'POST') for instance",
            $snippet:["alert(xui.JSONP.method)"]
        },
        optimized:{
            $desc:"Boolean, default optimized option",
            $snippet:["alert(xui.Ajax.optimized)"]
        },
        retry:{
            $desc:"Number, default retry times",
            $snippet:["alert(xui.JSONP.retry)"]
        },
        reqType:{
            $desc:"String, default request type",
            $snippet:["alert(xui.JSONP.reqType)"]
        },
        rspType:{
            $desc:"String, default respond type",
            $snippet:["alert(xui.JSONP.rspType)"]
        },
        uid:{
            $desc:"String,  unique id "
        },
        timeout:{
            $desc:"Number, default timeout time",
            $snippet:["alert(xui.JSONP.timeout)"]
        },
        customQS: {
            $desc:"To customize query string Object. Subclass can overwrite it for adding extra variables or something",
            $rtn:"Object",
            $paras:[
                "obj [Required]: Object, original Object"
            ]
        },

        prototype:{
            KEY:{$desc:"Class Name"},
            start:{
                $desc:"Starts to execute a xui.JSONP Object",
                $rtn:"[self]",
                $snippet:[
                    "//xui.JSONP('uri').start();"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","XDMI"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.XDMI Class. It can handle cross domain GET/POST request, and can upload/download file",
        $rtn:"xui.XDMI",
        $paras:[
            "uri [Required]: String/Object. String -- The URL of the request target; Object(to see options) -- a set of key/value pairs that configure the request. If this parameter is Object, other parameters will be ignored",
            "query [Optional]:  Object[Key/value pairs], request data",
            "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request is done successfully",
            "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request fails",
            "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute the request -> resume the thread]",
            "options [Optional]: Object, a set of key/value pairs that configure the request. All options are optional. <strong>Values in Parameters has high priority</strong>" +
                "<br>{"+
                "<br><em>//variables</em>"+
                "<br>&nbsp;&nbsp;uri: String, The URL of the request target"+
                "<br>&nbsp;&nbsp;query: Object[Key/value pairs], request data"+
                "<br>&nbsp;&nbsp;threadid: String, a thread id to be bound to the current request"+
                "<br>&nbsp;&nbsp;<strong>method: 'GET' or 'POST', the request method. Default is 'POST'.</strong>"+
                "<br>&nbsp;&nbsp;retry: Number, how many times it is tried when the request is timeout"+
                "<br>&nbsp;&nbsp;timeout: Number, the timeout time(ms) for this request"+
                "<strong><br>&nbsp;&nbsp;rspType: String 'text' or 'xml', Response type, Default is 'text'.</strong>"+
                "<br><em>//functions</em>"+
                "<br>&nbsp;&nbsp;cusomQS: Function, arguments: [obj]. A function to customize query string Object"+
                "<br><em>//normal events</em>"+
                "<br>&nbsp;&nbsp;onSuccess: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever the request is done successfully"+
                "<br>&nbsp;&nbsp;onFail: Function(response:Object, responsetype:String, threadid:String). Afunction to be executed whenever the request fails"+
                "<br><em>//trace events</em>"+
                "<br>&nbsp;&nbsp;onRetry: Function, arguments:[the current retry time], A function will be triggered when the request retries"+
                "<br>&nbsp;&nbsp;onTimeout: Function, , A function will be triggered when the request the request is timeout"+
                "<br>&nbsp;&nbsp;onStart: Function,  , A function will be triggered when the request starts"+
                "<br>&nbsp;&nbsp;onEnd: Function,  , A function will be triggered when the request ends"+
                "<br><em>//before events</em>"+
                "<br>&nbsp;&nbsp;beforeStart: Function. A function to be executed before onStart, if it returns [false], the request will be End"+
                "<br>&nbsp;&nbsp;beforeFail: Function, arguments:[error Object, threadid]. A function to be executed before onFail, if it returns [false], the request will not call onFail function"+
                "<br>&nbsp;&nbsp;beforeSuccess: Function, arguments:[response, response type, threadid]. A function to be executed before onSuccess, if it returns [false], the request will not call onSuccess function"+
                "<br>}"
        ],
        $snippet:[
            "/*\n//The most common usage: \n"+
             "xui.Thread.observableRun(function(threadid){\n"+
             "       xui.XDMI('request.php',hash, function(response){\n"+
             "               //setResponse(response);\n"+
             "           }, function(msg){\n"+
             "               //show error msg\n"+
             "           },\n"+
             "       threadid).start();\n"+
             "   });*/",
            "/*\n//The most common usage: \n"+
             "xui.Thread.observableRun(function(threadid){\n"+
             "       xui.JSONP('request.php',hash, function(response){\n"+
             "               //setResponse(response);\n"+
             "           }, function(msg){\n"+
             "               //show error msg\n"+
             "           },\n"+
             "       threadid).start();\n"+
             "   },{method:'GET'});*/"
        ],
        $memo:"You have to use xui.XDMI to post cross domain data, or to upload an iamge file",
        callback:{
            $desc:"String, default callback function name. <strong>Server needs to match it in the response struct.</strong>",
            $snippet:["alert(xui.XDMI.callback)"]
        },
        method:{
            $desc:"String, default request method name('GET' or 'POST') for instance",
            $snippet:["alert(xui.XDMI.method)"]
        },
        optimized:{
            $desc:"Boolean, default optimized option",
            $snippet:["alert(xui.Ajax.optimized)"]
        },
        retry:{
            $desc:"Number, default retry times",
            $snippet:["alert(xui.XDMI.retry)"]
        },
        reqType:{
            $desc:"String, default request type",
            $snippet:["alert(xui.XDMI.reqType)"]
        },
        rspType:{
            $desc:"String, default respond type",
            $snippet:["alert(xui.XDMI.rspType)"]
        },
        uid:{
            $desc:"String,  unique id "
        },
        timeout:{
            $desc:"Number, default timeout time",
            $snippet:["alert(xui.XDMI.timeout)"]
        },
        customQS: {
            $desc:"To customize query string Object. Subclass can overwrite it for adding extra variables or something",
            $rtn:"Object",
            $paras:[
                "obj: Object, original Object"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            start:{
                $desc:"Starts to execute a xui.XDMI Object",
                $rtn:"[self]",
                $snippet:[
                    "//xui.XDMI('uri').start();"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","SC"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Ajax Class(static).<br />Call function : Straight Call. Uses path name to call a specified class/Object. If the target class/Object exists, returns it directly, but if the target class/Object does not exist, loads it from code(in memory or in the remote file[xui.Ajax/xui.JSONP]) first, returns it, and executes the callback function(if it exists)",
        $rtn:"Object, class/Object[in synchronous mode], undefined[in asynchronous mode]",
        $paras:[
            "path [Required]: String, path name of a class/Object(e.g'xui.UI.Button')",
            "callback [Optional]: Function, arguments:[path, code, threadid]. A function to be executed whenever the straight call returns. If returns successfully, [path] will be the [path name], and [this] pointer will be the result class/Object; if fails, [path] will be [null], and [this] pointer will be the inner xui.Ajax/XDMI Object",
            "isAsy [Optional]: Boolean, To determine whether or not  the current SC is in asynchronous Mode. If the target class exists, this parameter is invalide. Default is [false]",
            "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute the request -> resume the thread]",
            "options [Optional]: Object, a set of key/value pairs that configure the inner xui.Ajax(asynchronous mode) or xui.JSONP(synchronous mode)"
        ],
        $snippet:[
            "alert(xui.SC('xui.SC'));xui.SC('xui.absIO',function(){alert(this===xui.absIO)});",
            "xui.SC('xui.UI.LoadFromRemoteFile',function(path,code,threaid){alert('You can know the calling result in firefox only!'); if(!path)alert('Fail to load '+ this.uri)},true);"
        ],
        get:{
            $desc:"Gets value from an Object according to a path name",
            $rtn:"Object",
            $paras:[
                "path [Required]: String, path name (e.g'xui.SC.get', 'xui.isArr', 'xui.ini.path')",
                "obj [Optional]: Object, target Object. Default is [window]"
            ],
            $snippet:[
                "alert(xui.SC.get('xui.ini.path')); alert(xui.get(window,'xui.ini.path'.split(\".\"))); "
            ],
            $memo:"It's a wrap of [xui.get]"
        },
        groupCall:{
            $desc:"To group a set of path names to load code snippet and execute them in parallel",
            $paras:[
                "pathArr [Required]: Array, a set of path names(String)",
                "onEnd [Optional]: Function, arguments:[the process id]. A function to be executed after all the code snippet are loaded and executed",
                "callback [Optional]: Function, arguments:[path, code]. A function to be executed whenever the code snip returns. If returns successfully, [path] will be the [path name], and [this] pointer will be an empty Object/{}; if fails, [path] will be [null], and [this] pointer will be the inner xui.Ajax/XDMI Object",
                "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute the request -> resume the thread]"
            ],
            $snippet:[
                "/*\n//The most common usage: \n"+
                "xui.SC.groupCall(['xui.UI.Button','xui.UI.Input','xui.UI.List'],function(){alert('ends')},function(path){alert(path+' loaded')});"+
                "\n*/"
            ]
        },
        runInBG:{
            $desc:"To load a set of code snippet and execute them one by one in the background. (wrap them to a shell thread)",
            $paras:[
                "pathArr [Required]: Array, a set of path names(String)",
                "callback [Optional]: Function, arguments:[path, code]. A function to be executed whenever the code snip returns. If returns successfully, [path] will be the [path name], and [this] pointer will be an empty Object/{}; if fails, [path] will be [null], and [this] pointer will be the inner xui.Ajax/XDMI Object",
                "onStart [Optional]: Function, onStart function for the shell thread",
                "onEnd [Optional]: Function, onEnd function for the shell thread"
            ],
            $snippet:[
                "/*\n//The most common usage: \n"+
                "xui.SC.runInBG(['xui.UI.Button','xui.UI.Input','xui.UI.List'],null,null,function(){alert('ends')});"+
                "\n*/"
            ]
        },
        loadSnips:{
            $desc:"To get a set of code snippets according to the [pathArry] in asynchronous mode, and cache them in the [cache] pool",
            $paras:[
                "pathArr [Required]: Array, a set of path names(String)",
                "cache [Optional]: Object[Key/value pairs], target cache pool. Defalut is [xui.$cache.text]",
                "callback [Optional]: Function, arguments:[path, code]. A function to be executed whenever the code returns. If returns successfully, [path] will be the [path name], and [this] pointer will be an empty Object/{}; if fails, [path] will be [null], and [this] pointer will be the inner xui.Ajax/XDMI Object",
                "onEnd [Optional]: Function, arguments:[the process id]. A function to be executed whenever all the code snippets returned",
                "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute the request -> resume the thread]"
            ],
            $snippet:[
                "/*\n//The most common usage: \n"+
                "var flag=false; xui.SC.loadSnips(['xui.UI.Button','xui.UI.Input','xui.UI.List'],null,null,function(){flag=true;}); \n //.... \n if(flag)xui.SC.execSnips();"+
                "\n*/"
            ]
        },
        execSnips:{
            $desc:"To execute all the code snippets that [xui.SC.loadSnips] cached, and clear the cache pool",
            $paras:[
                "cache [Optional]: Object[Key/value pairs], target cache pool. defalut is [xui.$cache.text]"
            ],
            $snippet:[
                "/*\n//The most common usage: \n"+
                "var flag=false; xui.SC.loadSnips(['xui.UI.Button','xui.UI.Input','xui.UI.List'],null,null,function(){flag=true;}); \n //.... \n if(flag)xui.SC.execSnips();"+
                "\n*/"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","Event"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Event Class",
        isSupported:{
            $desc:"To detect whether a given event is supported or not",
            $rtn:"Boolean",
            $paras:[
                "name [Required]: String, the event name"
            ]
        },
        getWheelDelta:{
            $desc:"Gets mouse's wheel delta value",
            $rtn:"Number",
            $paras:[
                "event [Required] : DOM event Object"
            ]
        },
        getBtn :{
            $desc:"Gets mouse button name from event Object",
            $rtn:"String",
            $paras:[
                "event [Required] : DOM event Object"
            ],
            $snippet:[
                "var id='xui.temp.e1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">click here ' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "xui(id).onClick(function(p,e){xui('btnLang').onClick(null); alert(xui.Event.getBtn(e));});"+
                "}"
            ]
        },
        getEventPara:{
            $desc:"Gets event parameters Object",
            $rtn:"Object",
            $paras:[
                "event [Required] : DOM event Object"
            ],
            $snippet:[
                "var id='xui.temp.e2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">click here ' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "xui(id).onClick(function(p,e){xui('btnLang').onClick(null); alert(xui.serialize(xui.Event.getEventPara(e)));});"+
                "}"
            ]
        },
        getId:{
            $desc:"Gets DOM element's id string(include window and document Object)",
            $rtn:"String",
            $paras:[
                "node [Required] : DOM element, window or document Object"
            ],
            $snippet:[
                "alert(xui.Event.getId(document.getElementById('btnLang')));alert(xui.Event.getId(document));alert(xui.Event.getId(window));"
            ]
        },
        getKey:{
            $desc:"Get keyboard related value from event Object",
            $rtn:"Object, {key:keycode string, type: event type, ctrlKey:ctrl status, shiftKey:shift status, altKey:alt status}",
            $paras:[
                "event [Required] : DOM event Object"
            ],
            $snippet:[
                "//'Run' the code, and press any keyboars please!\n"+
                "xui('body').onKeypress(function(p,e){xui('body').onKeypress(null); var kb=xui.Event.getKey(e);xui.log(kb.key,kb.type,kb.ctrlKey,kb.shiftKey,kb.altKey,kb)});"
            ]
        },
        getPos:{
            $desc:"Gets mouse postion from event Object",
            $rtn:"Object, key/value pairs. {left:xx,top:xx}",
            $paras:[
                "event [Required] : DOM event Object"
            ],
            $snippet:[
                "var id='xui.temp.e4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">click here ' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "xui(id).onClick(function(p,e){xui('btnLang').onClick(null); alert(xui.serialize(xui.Event.getPos(e)));});"+
                "}"
            ]
        },
        getSrc:{
            $desc:"Gets DOM element from event Object",
            $rtn:"Element",
            $paras:[
                "event [Required] : DOM event Object"
            ],
            $snippet:[
                "var id='xui.temp.e5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">click here ' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "xui(id).onClick(function(p,e){xui('btnLang').onClick(null); alert(xui.Event.getSrc(e).id);});"+
                "}"
            ]
        },
        keyboardHook :{
            $desc:" To add/remove a global keyboard down event hook",
            $rtn:'[self]',
            $paras:[
                "key [Required] : String, keyboard name to be monitored",
                "ctrl [Optional] : Boolean, To determine whether or not it monitors 'CTRL' status. Default is [false]",
                "shift [Optional] : Boolean, To determine whether or not it monitors 'SHIFT' status. Default is [false]",
                "alt [Optional] : Boolean, To determine whether or not it monitors 'ALT' status. Default is [false]",
                "fun [Optional] : Function, the hook function that will be executed whenever the pre-defined condition is triggered. If you do not specify this parameter, or enter a non-function variable, system will remove the event hook by the [key](keyboard name)",
                "id [Optional]: String, unique id for the hook function",
                "args [Optional]: Array, arguments for fun. Default is []",
                "scope [Optional]: Object, [this] pointer for [fun]. Default is [window]"
            ],
            $snippet:[
                "//'Run' the code, and click keyboard 'a' please! \n"+
                "xui.Event.keyboardHook('a',0,0,0,function(){xui.message('you pressed a!');xui.Event.keyboardHook('a');})",
                "//'Run' the code, and You can't input 'a' in this input! \n"+
                "if(!xui.Dom.byId('xui.temp.1')){this.prepend(xui.create('<div><input /><button id=\"xui.temp.1\" onclick=\"xui.Event.keyboardHook(\\\'a\\\');xui(this).parent().remove()\">remove this example</button></div>'));}" +
                "xui.Event.keyboardHook('a',0,0,0,function(){return false;});"
            ]
        },
        keyboardHookUp :{
            $desc:" To add/remove a global keyboard up event hook",
            $rtn:'[self]',
            $paras:[
                "key [Required] : String, keyboard name to be monitored",
                "ctrl [Optional] : Boolean, To determine whether or not it monitors 'CTRL' status. Default is [false]",
                "shift [Optional] : Boolean, To determine whether or not it monitors 'SHIFT' status. Default is [false]",
                "alt [Optional] : Boolean, To determine whether or not it monitors 'ALT' status. Default is [false]",
                "fun [Optional] : Function, the hook function that will be executed whenever the pre-defined condition is triggered. If you do not specify this parameter, or enter a non-function variable, system will remove the event hook by the [key](keyboard name)",
                "id [Optional]: String, unique id for the hook function",
                "args [Optional]: Array, arguments for fun. Default is []",
                "scope [Optional]: Object, [this] pointer for [fun]. Default is [window]"
            ]
        },
        popTabOutTrigger:{
             $desc:"Pops the latest 'TAB boundary DOM element' from the inner 'stack', and activates the previous one if it exists. Take a look at <a href='#xui.Event.pushTabOutTrigger'>xui.Event.pushTabOutTrigger</a>",
             $paras:[
                "flag [Optional] : Boolean, to force to clear the inner 'stack'(pops all 'TAB boundary DOM elements' out).Default is [false]"
             ],
             $rtn:'[self]'
        },
        pushTabOutTrigger:{
            $desc:"Pushes 'a TAB boundary DOM element with a trigger function' to a inner 'stack', and activate it(inactivate the previous one if it exists). This [trigger] funtion will be executed whenever user uses 'TAB' keyboard to let the [focus] go out the 'boundary DOM element'",
            $rtn:'[self]',
            $paras:[
                "boundary [Required] : DOM element, boundary DOM element",
                "trigger [Required] : Function, arguments[boundary DOM element]. The trigger funtion whenever user uses 'TAB' keyboard to go out the 'boundary DOM element'"
            ],
            $snippet:[
                "if(!xui.Dom.byId('xui.temp.out')){this.prepend(xui.create('<div><div id=\"xui.temp.out\" style=\"border:solid 1px;padding:10px;\">xui.temp.out<input id=\"xui.temp.out.first\"><input /><input /><input /><div id=\"xui.temp.in\"  style=\"border:solid 1px;padding:10px;\">xui.temp.in<input id=\"xui.temp.in.first\" /><input /><input /><input /><input /></div></div><div><button onclick=\"xui.arr.each(xui.Event._tabHookStack,function(o){alert(o[0])})\">Click here to show inner stack content!</button><br /><br /><button onclick=\"xui.Event.popTabOutTrigger();\">popTabOutTrigger</button><br /><br /></div><div><button onclick=\"xui.Event.popTabOutTrigger(1);xui(this).parent(2).remove();\">remove this example</button></div></div>'));\n"+
                "xui.Event.pushTabOutTrigger(document.getElementById('xui.temp.out'),function(){document.getElementById('xui.temp.out.first').focus();});"+"xui.Event.pushTabOutTrigger(document.getElementById('xui.temp.in'),function(){document.getElementById('xui.temp.in.first').focus();});}"
            ]
        },
        stopBubble:{
            $desc:"To stop both default action and event bubbling",
            $paras:[
                "event [Required] : DOM event Object"
            ],
            $snippet:[
                "if(!xui.Dom.byId('xui.temp.3')){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\" onclick=\"alert(\\\'onclick event on the div\\\')\"><p>You can click here to fire onclick event on the div </p><a id=\"xui.temp.3\" href=\"http://www.crossui.com\" onclick=\"xui.message(\\\'Event bubble is stopped. You cant fire onclick event on the outter div !\\\');xui.Event.stopBubble(event);\" >Event bubble to outter div is stopped here. Click me to try it!</a><button onclick=\"xui(this).parent().remove()\">remove this example</button></div>'))}"
            ]
        },
        stopDefault:{
            $desc:"To stop both default action",
            $paras:[
                "event [Required] : DOM event Object"
            ],
            $snippet:[
                "if(!xui.Dom.byId('xui.temp.4')){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\" ><a id=\"xui.temp.4\" href=\"http://www.crossui.com\" onclick=\"xui.message(\\\'Default action is stopped here. You cant go to \\\'+this.href);xui.Event.stopDefault(event);\" >My default action is stopped. Click me to try it!</a><button onclick=\"xui(this).parent().remove()\">remove this example</button></div>'))}"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","absBox"],{
        pack:{
            $desc: "To create a [xui.absBox] Object, and pack a set of value to this Object",
            $rtn: "xui.absBox",
            $paras:[
                "arr [Required] : Array, a set of value",
                "ensureValue [Optional] : Boolean, force to ensure value. Default is true"
            ],
            $snippet:[
                "var nodes = xui.Dom.pack(['btnLang',document.getElementById('btnLang')]); alert(nodes.get(0).id)"
            ]
        },
        plugIn:{
            $desc:"To add a a plug-in function to the current class",
            $rtn:"[self]",
            $paras:[
                "name [Required] : String, plug-in function name",
                "fun [Required] : Function, plug-in function"
            ],
            $snippet:[
                "var n=xui('btnLang'); alert(n.getBackgroundImg); xui.Dom.plugIn('getBackgroundImg',function(){return this.css('backgroundImage')}); alert(n.getBackgroundImg());"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            each:{
                $desc:"To apply a function to each element of the current xui.absBox Object",
                $rtn:'[self]',
                $paras:[
                    "fun [Required]: Function, [this] pointer is the xui.absBox Object, arguments: [element, array index]. The function to apply to inner array item"
                ],
                $snippet:[
                    "xui(['xui.UI.Layout:a:','btnLang']).each(function(o,i){alert(i+' -> #'+o.id)})"
                ]
            },
            get:{
                $desc:"To get a specified element from the xui.absBox Object by index, or get all elements",
                $rtn:"element or array of elements",
                $paras:[
                    "index [Optional] : Number"
                ],
                $snippet:[
                    "var n=xui(['xui.UI.Layout:a:','btnLang']); alert(n.get(1).id); alert(n.get()[0].id+' , '+n.get()[1].id);"
                ]
            },
            size:{
                $desc:"To get the size of elements",
                $rtn:"Number"
            },
            isEmpty:{
                $desc:"To determine if the current xui.absBox Object includes any element",
                $rtn:"Boolean",
                $snippet:[
                    "var n=xui(['xui.UI.Layout:a:','btnLang']); alert(n.isEmpty()); alert(xui().isEmpty())"
                ]
            },
            merge:{
                $desc:"To merge a target xui.absBox Object to the current one",
                $rtn:"[self]",
                $paras:[
                    "obj [Required] : xui.absBox objcet, the target Object"
                ],
                $snippet:[
                    "alert(xui('xui.UI.Layout:a:').merge(xui('btnLang')).get().length)"
                ]
            },
            reBoxing:{
                $desc:"To pack all the elements in the current Object to another xui.absBox Object",
                $trn:"xui.absBox",
                $paras:[
                    "key [Optional] : new xui.absBox class name",
                    "ensureValue [Optional] : Boolean, force to ensure value. Default is true"
                ],
                $snippet:[
                    "alert(xui('xui.UI.Layout:a:').KEY);alert(xui('xui.UI.Layout:a:').reBoxing('xui.UI.Layout').KEY);"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","Dom"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Dom Class",
        constructor:{
            $desc:"Use [xui(nodes, flag)] to create a xui.Dom Object"
        },
        Events:{
            $desc:  "<strong>Description</strong>: to add, remove or fire the specified event? There are three group of event functions are designed for a DOM event: [before-], [on-] and [after-]" +
                    "<ul>"+
                        "<li><strong>xui(/**/).onClick([function], 'label')</strong> =>adds the [function] to  [onclick]group?</li>"+
                        "<li><strong>xui(/**/).onClick([function]) </strong> => removes all event functions in [onclick] group, and adds the [function] to [onclick] group?</li>"+

                        "<li><strong>xui(/**/).onClick(null, 'label') </strong> => removes the event function labelled with 'label' from the [onclick] group.</li>"+
                        "<li><strong>xui(/**/).onClick(null) </strong> => removes all event functions in [onclick] group.</li>"+
                        "<li><strong>xui(/**/).onClick(null,null,true) </strong> => removes all event functions in [beforeclick] group, [onclick] group and [afterclick] group.</li>"+

                        "<li><strong>xui(/**/).onClick() </strong> => fire event, executes all event functions in [onclick] group in order. <strong>If any of those functions returns [false], the remaining functions will be ignored.</strong></li>"+
                        "<li><strong>xui(/**/).onClick(true) </strong> => fire event, executes all event functions in [beforeclick] group, [onclick] group and [afterclick] group in order.</li>"+
                    "</ul>"+

                    "<p><strong>Returns</strong>: Add: return [self]; Remove: return [self]; Fire: no return.</p>"+
                    "<p><strong>Parameters</strong>: </p>"+
                    "<ul>"+
                        "<li><strong>fun [Optional] </strong>: Function, [this] pointer is the current element, arguments are [xui.DomProfile Object, DOM event Object, the current element's xid].</li>"+
                        "<li><strong>label [Optional]</strong> : String, the event label.</li>"+
                        "<li><strong>flag [Optional]</strong> : Boolean, for remove event only. to indicate if remove all related event.</li>"+
                    "</ul>"+
                    "<p style='padding:5px;'><a href='#xui.Dom.prototype.afterClick' onclick='var n =xui(this).parent(5).query(\"a\",\"name\",\"xui.Dom.prototype.afterClick\").next().first(); if(n.next().css(\"display\")==\"none\")n.onClick()'><strong>Go to [onClick] for getting the code snippets!</strong></a></p>"
        },
        HIDE_VALUE:{
            $desc:"String, a constant value for hidding a DOM element( [element.style.left=xui.Dom.HIDE_VALUE] or [element.style.top=xui.Dom.HIDE_VALUE])",
            $snippet:[
                "alert(xui.Dom.HIDE_VALUE)"
            ]
        },
        TOP_ZINDEX:{
            $desc:"Number, a constant value for the top/max z-index number",
            $snippet:[
                "alert(xui.Dom.TOP_ZINDEX)"
            ]
        },
        busy:{
            $desc:"Shows busy-UI(A special top zindex div covers the whole window)",
            $paras:[
                "label [Optional] : String, the busy instance label. Calls [xui.Dom.free(label)] to release the busy UI",
                "busyMsg [Optional] : String, the busy message will be showed",
                "busyIcon [Optional] : Boolean, determin if the busy icon will be showed",
                "cursor [Optional] : String, the cursor of busy layer"
            ],
            $snippet:[
                "xui.Thread(null,[xui.fun()],1000,null,function(){xui.Dom.busy();},function(){xui.Dom.free();}).start()",
                "xui.Thread(null,[function(){xui.Dom.busy('b');xui.message('Changes [label] to \\\'b\\\' ')}, function(){xui.Dom.free();xui.message('Still busy')},function(){xui.Dom.free('a');xui.message('Still busy')},xui.fun()],1000,null,function(){xui.Dom.busy('a')},function(){xui.Dom.free('b');xui.message('free now')}).start()"
            ]
        },
        free:{
            $desc:"Releases busy-UI",
            $paras:[
                "label [Optional] : String, the busy label"
            ],
            $memo:"Sees <a href='#xui.Dom.busy'>xui.Dom.busy</a> please!"
        },
        byId:{
            $desc:"Gets the DOM element according to its id. Equivals to [document.getElementById]",
            $rtn:"Element",
            $paras:[
                "id [Required] : String, id value"
            ],
            $snippet:[
                "alert( xui.Dom.byId('btnLang') === document.getElementById ('btnLang') )"
            ]
        },
        animate:{
            $desc:"Wraps a 'Special Effects' animation into a xui.Thread Object(shell thread)",
            $rtn:"xui.Thread",
            $paras:[
                "css [Required] : Object[CSS Key/value pairs]",
                "params [Required] : Object[Key/value([from value, to value]) pairs] ",
                "onStart [Optional]: Function(threadid:String). this function will be called before the shell thread triggered the first task",
                "onEnd [Optional]: Function(threadid:String). this function will be called after the shell thread finishes the last task",
                "duration [Optional]: Number(ms), the duration of this animation. Default is 300",
                "step [Optional]: Number, the step number of this animation. Default is 0. [Deprecated]",
                "type [Optional]: String, the animate type'linear','expoIn','expoOut','expoInOut','sineIn','sineOut','sineInOut','backIn','backOut','backInOut' or 'bounceOut'. Default is 'expoIn'",
                "threadid [Optional]: String, Assigns an unique id to the shell thread Object"
            ],
            $snippet:[
                "xui.Dom.animate({backgroundColor:'#ff0000'},{left:[0,200],top:[0,300],width:[30,300],height:[30,300],opacity:[1,0]}, null, null, 500, 0, 'sineOut').start()"
            ]
        },
        getEmptyDiv:{
            $desc:"Gets an empty div in DOM, which DOM id starts with 'xui.matrix::'",
            $rtn:"xui.Dom",
            $paras:[
                "pid [Optional] : String/Dom, the parent Node",
                "sequence [Optional] : Number, sequence number. Default is 1"
            ],
            $snippet:[
                "var m1=xui.Dom.getEmptyDiv(); alert(m1.id())",
                "var m1=xui.Dom.getEmptyDiv(), m2=xui.Dom.getEmptyDiv(2); alert(m1.id());alert(m2.id()) "
            ],
            $memo:"When you on longer need the matrix div, empty the matrix div to let it 'available for [xui.Dom.getEmptyDiv]'"
        },
        getScrollBarSize:{
            $desc:"To get browser's scroll bar size",
            $rtn:"Number"
        },
        getStyle:{
            $desc:"To get the specified css property from the target DOM element",
            $rtn:"String",
            $paras:[
                "node [Required] : Element, target Element",
                "name [Required] : String, the specified css property name"
            ],
            $snippet:[
                "var n=xui.Dom.byId('btnLang'); alert(xui.Dom.getStyle(n,'width')); alert(xui.Dom.getStyle(n,'overflow'))"
            ]
        },
        setStyle:{
            $desc:"To set the specified css property to the target DOM element",
            $paras:[
                "node [Required] : Element, target Element",
                "name [Required] : String, the specified css property name",
                "value [Required] : String, the css property value to be set"
            ],
            $snippet:[
                "var n=xui.Dom.byId('btnLang'); xui.Dom.setStyle(n,'top', '100px'); xui.asyRun(function(){xui.Dom.setStyle(n,'top', '0px')}, 2000)"
            ]
        },
        setCover:{
            $desc:"To set a special cover div to the top of the page, or to hide it",
            $paras:[
                "visible [Required] : Boolean or String, true=>show the cover; false=>hide the cover; 'string'=>show the cover and the 'string'",
                "label [Optional] : String, the busy label",
                "busyIcon [Optional] : Boolean, determin if the busy icon will be showed",
                "cursor [Optional] : String, the cursor of busy layer"
            ],
            $snippet:[
                "xui.Dom.setCover(true); xui.asyRun(function(){xui.Dom.setCover(false)},2000);",
                "xui.Dom.setCover('a'); xui.asyRun(function(){xui.Dom.setCover('b')},1000); xui.asyRun(function(){xui.Dom.setCover('c')},2000); xui.asyRun(function(){xui.Dom.setCover(false)},3000);",
                "xui.Dom.setCover('<div style=\\\'font-weight:bold;padding:5px;border:solid 1px;background:#CCC;\\\'> Loading... </div>'); xui.asyRun(function(){xui.Dom.setCover(false)},2000);",
                "xui.Dom.setCover(true,'key'); xui.asyRun(function(){xui.message('The cover is still visible');xui.Dom.setCover(false)},1000); xui.asyRun(function(){xui.message('The cover is hidded');xui.Dom.setCover(false,'key')},5000);"
            ]
        },
        css3Support:{
            $desc:"Gets browser's CSS3 support feature",
            $rtn:"Boolean",
            $paras:[
                "name [Required] : CSS3 name. one of 'opacity,textShadow,animationName,columnCount,flexWrap,boxDirection,backgroundSize,perspective,boxShadow,borderImage,borderRadius,boxReflect,transform,transition,generatedContent,fontFace,rgba,hsla,multiplebgs,gradient,transform3d'"
            ],
            $snippet:[
                "var arr='opacity,textShadow,animationName,columnCount,flexWrap,boxDirection,backgroundSize,perspective,boxShadow,borderImage,borderRadius,boxReflect,transform,transition,generatedContent,fontFace,rgba,hsla,multiplebgs,gradient,transform3d'.split(',');"+
                "var hash={};\n"+
                "xui.arr.each(arr,function(o){hash[o]=xui.Dom.css3Support(o);});\n"+
                "alert(xui.stringify(hash));"
            ]
        },
        submit:{
            $desc:"To simulate a HTML form submit action",
            $paras:[
                "action [Required] : String(URL), form action property. To define where to send the data when the form is submitted",
                "data [Required] : Object[Key/value pairs], the data Object will be submitted",
                "method [Optional] : String, form method property. The HTTP method for sending data to the server(the action URL). [get|post], Default is 'get'",
                "target [Optional] : String, form target property. [_blank|_parent|_self|_top], Default is '_blank'",
                "enctype [Optional] : String, form enctype property(The enctype property sets the MIME type used to encode the content of the form), The default value is 'application/x-www-form-urlencoded'. When the [data] includes [file] type data, the value should be 'multipart/form-data'"
            ],
            $snippet:[
                "xui.Dom.submit('http://www.google.com/search',{q:'ajax ria'},'get')",
                "xui.Dom.submit('http://www.google.com/search',{q:{a:1,b:2}},'get')"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            each:{
                $desc:"To apply a function to each element of the current xui.Dom Object",
                $rtn:'[self]',
                $paras:[
                    "fun [Required]: Function, [this] pointer is the xui.absBox Object, arguments: [element, array index]. The function to apply to inner array item"
                ],
                $snippet:[
                    "xui(['xui.UI.Layout:a:','btnLang']).each(function(o,i){alert(i+' -> #'+o.id)})"
                ]
            },
            get:{
                $desc:"To get a specified element from the xui.Dom Object by index, or get all elements",
                $rtn:"element or array of elements",
                $paras:[
                    "index [Optional] : Number"
                ],
                $snippet:[
                    "var n=xui(['xui.UI.Layout:a:','btnLang']); alert(n.get(1).id); alert(n.get()[0].id+' , '+n.get()[1].id);"
                ]
            },
            addBorder:{
                $desc:"To add a border to the first element",
                $rtn:"xui.UI.Border",
                $paras:[
                    "properties [Optional] : key/value pairs, the properties of border. The most common usage: {borderActive: [Boolean]}"
                ],
                $snippet:[
                    "var div=xui.create('<div style=\\\'background:#fff;position:absolute;border:solid 1px;width:100px;height:100px;left:100px;top:100px;z-index:20000;\\\'></div>');xui('body').append(div);xui.asyRun(function(){div.addBorder();},1000);xui.asyRun(function(){div.removeBorder();},2000);xui.asyRun(function(){div.remove();},3000);",
                    "var div=xui.create('<div style=\\\'background:#fff;position:absolute;border:solid 1px;width:100px;height:100px;left:100px;top:100px;z-index:20000;\\\'></div>');xui('body').append(div);div.addBorder({borderActive:true});xui.asyRun(function(){div.remove();},5000);"
                ],
                $memo:"Required: xui.UI.Border"
            },
            removeBorder:{
                $desc:"To remove an existing border from the first element",
                $rtn:"[self]",
                $snippet:[
                    "var div=xui.create('<div style=\\\'background:#fff;position:absolute;border:solid 1px;width:100px;height:100px;left:100px;top:100px;z-index:20000;\\\'></div>');xui('body').append(div);xui.asyRun(function(){div.addBorder();},1000);xui.asyRun(function(){div.removeBorder();},2000);xui.asyRun(function(){div.remove();},3000);"
                ],
                $memo:"Required: xui.UI.Border"
            },
            addResizer:{
                $desc:"To add a resizer to the first element",
                $rtn:"xui.UI.Resizer",
                $paras:[
                    "properties [Optional] : key/value pairs, the properties of border",
                    "onUpdate [Optional] : Function, the callback function",
                    "onChange[Optional] : Function, the callback function"
                ],
                $snippet:[
                    "//You can resize the following div: \n" +
                    "var div=xui.create('<div style=\\\'background:#fff;position:absolute;border:solid 1px;width:100px;height:100px;left:100px;top:100px;\\\'>Use mouse to resize me!</div>');xui('body').append(div);div.topZindex(true).addResizer();xui.asyRun(function(){div.remove();},10000);",
                    "var div=xui.create('<div style=\\\'background:#fff;position:absolute;border:solid 1px;width:100px;height:100px;left:100px;top:100px;\\\'>Use mouse to resize me!</div>');xui('body').append(div);div.topZindex(true).addResizer({forceVisible:true,forceMovable:true,singleDir:true,vertical:false,minWidth:50,maxWidth:200,handlerSize:10});xui.asyRun(function(){div.remove();},10000);"
                ],
                $memo:"Required: xui.UI.Resizer"
            },
            removeResizer:{
                $desc:"To remove an existing resizer from the first element",
                $rtn:"[self]",
                $snippet:[
                    "var div=xui.create('<div style=\\\'background:#fff;position:absolute;border:solid 1px;width:100px;height:100px;left:100px;top:100px;z-index:20000;\\\'></div>');xui('body').append(div);xui.asyRun(function(){div.addResizer({forceVisible:true})},1000);xui.asyRun(function(){div.removeResizer();},2000);xui.asyRun(function(){div.remove();},3000);"
                ],
                $memo:"Required: xui.UI.Resizer"
            },
            addClass:{
                $desc:"To add a specified class name to each of the current elements",
                $rtn:"[self]",
                $paras:[
                    "name [Required] : String, class name"
                ],
                $snippet:[
                    "var n=xui('btnLang');alert(n.attr('className'));n.addClass('cls');alert(n.attr('className'));n.removeClass('cls');alert(n.attr('className'));"
                ]
            },
            removeClass:{
                $desc:"To remove a specified class name from each of the current elements",
                $rtn:"[self]",
                $paras:[
                    "name [Required] : String, class name"
                ],
                $snippet:[
                    "var n=xui('btnLang');alert(n.attr('className'));n.addClass('cls');alert(n.attr('className'));n.removeClass('cls');alert(n.attr('className'));"
                ]
            },
            hasClass:{
                $desc:"Returns true if the specified class name is present on the first element",
                $rtn:"Boolean",
                $paras:[
                    "name [Required] : String, class name"
                ],
                $snippet:[
                    "var n=xui('btnLang');alert(n.attr('className'));alert(n.hasClass('xui-div'));alert(n.hasClass('cls'));"
                ]
            },
            replaceClass:{
                $desc:"To replace the className attribute for each of the current elements",
                $rtn:"[self]",
                $paras:[
                    "regexp [Required] : Regexp Object",
                    "replace [Required] : String"
                ],
                $snippet:[
                    "var n=xui('btnLang');alert(n.attr('className'));n.replaceClass(/ui/,'cls');alert(n.attr('className'));n.replaceClass(/cls/,'ui');"
                ]
            },
            tagClass:{
                $desc:"Copies each of the class names(from 'className' property) on the each of elements, adds a tag string to each of those copies, and sets all the [original names + copies] back(set back to 'className' property). Or, clears(reverses) those copied css calss names on the each of elements according to a given tag name",
                $rtn:"[self]",
                $paras:[
                    "tag [Required] : String, tag name",
                    "isAdd [Optional] : Boolean, adds or removes. Default is [true]"
                ],
                $snippet:[
                    "var n=xui('btnLang');n.tagClass('-checked').tagClass('-hover');alert(n.attr('className')); n.tagClass('-checked',false).tagClass('-hover',false);alert(n.attr('className'));"
                ]
            },
            append:{
                $desc:"Appends a xui.Dom Object(including a set of DOM elements or xui.UIProile objects) to the inside of the first element",
                $rtn:"[self]",
                $paras:[
                    "target [Required] : a xui.Dom Object(including a set of DOM elements or xui.UIProile objects)",
                    "reversed [Optional] : Boolean, if it's [true], that means 'append to' Default is [false]",
                    "force [Optional] : Boolean, [true]: force to call DOM's 'appendChild' to append 'target' to the last one, even 'target' is in the DOM already, Default is [false]"
                ],
                $snippet:[
                "var id='xui.temp.1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "xui(id).append(xui.create('input'));"+
                "xui(id).append(new xui.UI.Button({position:'relative'}));"+
                "xui(id).append(xui.create('<button>btn</button>'));"+
                "}"
                ]
            },
            prepend:{
                $desc:"Prepends a xui.Dom Object(including a set of DOM elements or xui.UIProile objects) to the inside of the first element",
                $rtn:"[self]",
                $paras:[
                    "target [Required] : a xui.Dom Object(including a set of DOM elements or xui.UIProile objects)",
                    "reversed [Optional] : Boolean, if it's [true], that means 'prepend to' Default is [false]"
                ],
                $snippet:[
                "var id='xui.temp.2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "xui(id).prepend(xui.create('input'));"+
                "xui(id).prepend(new xui.UI.Button({position:'relative'}));"+
                "xui(id).prepend(xui.create('<button>btn</button>'));"+
                "}"
                ]
            },
            addPrev:{
                $desc:"Adds a xui.Dom Object(including a set of DOM elements or xui.UIProile objects) to the previous position of the first element",
                $rtn:"[self]",
                $paras:[
                    "target [Required] : a xui.Dom Object(including a set of DOM elements or xui.UIProile objects)",
                    "reversed [Optional] : Boolean, if it's [true], that means 'addPrev to' Default is [false]"
                ],
                $snippet:[
                "var id='xui.temp.3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "var node = xui(id).last();"+
                "node.addPrev(xui.create('input'));"+
                "node.addPrev(new xui.UI.Button({position:'relative'}));"+
                "node.addPrev(xui.create('<button>btn</button>'));"+
                "}"
                ]
            },
            addNext:{
                $desc:"Adds a xui.Dom Object(including a set of DOM elements or xui.UIProile objects) to the following position of the first element",
                $rtn:"[self]",
                $paras:[
                    "target [Required] : a xui.Dom Object(including a set of DOM elements or xui.UIProile objects)",
                    "reversed [Optional] : Boolean, if it's [true], that means 'addNext to' Default is [false]"
                ],
                $snippet:[
                "var id='xui.temp.4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "var node = xui(id).last();"+
                "node.addNext(xui.create('input'));"+
                "node.addNext(new xui.UI.Button({position:'relative'}));"+
                "node.addNext(xui.create('<button>btn</button>'));"+
                "}"
                ]
            },
            offset:{
                $desc:"Gets(the first element)/Sets(all elements) the offset relative to the boundary",
                $rtn:"Object/[self]",
                $paras:[
                    "pos [Optional] : {left:value,top:value}, the target abs position",
                    "boundary [Optional] : the boundary (DOM element or document.body). Default is document.body"
                ],
                $snippet:[
                    "alert(xui.serialize(xui(this).offset()));alert(xui.serialize(xui(this).offset()));",
                    "var n=xui(this),pos=n.offset(); pos.top+=20; n.css('position','relative').offset(pos); xui.asyRun(function(){n.css({top:'',position:''})},1000)"
                ]
            },
            cssPos:{
                $desc:"Gets(the first element)/Sets(all elements) the css offset",
                $rtn:"Object/[self]",
                $paras:[
                    "pos [Optional] : {left:value,top:value}, the target abs position",
                    "flag [Optional] : Boolean, to trigger element onMove event. Default is false"
                ],
                $snippet:[
                    "var n=xui(this),pos=n.cssPos(); pos.top+=20;pos.left+=20; n.css('position','relative').cssPos(pos); n.onMove(function(){xui.message('Fired onMove event')});pos.top+=20;pos.left+=20; n.cssPos(pos,true); xui.asyRun(function(){n.css({top:'',position:''}).onMove(null)},1000)"
                ]
            },
            animate:{
                $desc:"Wraps a 'Special Effects' animation into a xui.Thread Object(shell thread)",
                $rtn:"xui.Thread",
                $paras:[
                    "params [Required] : Object[Key/value([from value, to value]) pairs] ",
                    "onStart [Optional]: Function(threadid:String). this function will be called before the shell thread triggered the first task",
                    "onEnd [Optional]: Function(threadid:String). this function will be called after the shell thread finishes the last task",
                    "duration [Optional]: Number(ms), the duration of this animation. Default is 200",
                    "step [Optional]: Number, the step number of this animation. Default is 0. [Deprecated]",
                    "type [Optional]: String, the type'linear','expoIn','expoOut','expoInOut','sineIn','sineOut','sineInOut','backIn','backOut','backInOut' or 'bounceOut'. Default is 'expoIn'",
                    "threadid [Optional]: String, Assigns an unique id to the shell thread Object"
                ],
                $snippet:[
                    "var node=xui.create('div').css({opacity:0,zIndex:xui.Dom.TOP_ZINDEX, backgroundColor:'#0000ff', position:'absolute',left:'100px', top:'100px',width:'100px',height:'100px'});"+
                    "xui('body').append(node);"+
                    "var fx1 = node.animate({opacity:[0,1]},null,null,1000,0,'sineIn');"+
                    "var fx2 = node.animate({left:[100,300],top:[100,300]},null,null,500,0,'sineOut');"+
                    "var fx3 = node.animate({left:[300,100],top:[300,100]});"+
                    "var fx4 = node.animate({opacity:[1,0]},null,function(){node.remove();});"+
                    "fx1.links(fx2.links(fx3.links(fx4))).start();"
                ]
            },
            attr:{
                $desc:"Gets a property on the first element, or sets a property(or key/value Object as properties) to all elements, or removes a property from all elements",
                $rtn:"String/[self]",
                $paras:[
                    "name [Required] : property name or a key/value Object as properties",
                    "value [Optional] : property value, [null] for 'remove'"
                ],
                $snippet:[
                    "var n=xui('btnLang'); alert(n.attr('style')); alert(n.attr('tagName')); alert(n.attr('className'));",
                    "var n=xui('btnLang'); n.attr('abc','abc'); alert(n.attr('abc')); n.attr('abc',null);  n.attr('tagName',null); alert(n.attr('abc'));",
                    "var n=xui('btnLang'); n.attr('onclick',function(){alert('hi')}); xui.asyRun(function(){n.attr('onclick',null)},5000); ",
                    "var n=xui('btnLang'); n.attr({a:'a',b:'b'}); alert(n.attr('a')); n.attr({a:null,b:null}); alert(n.attr('a'));"
                ]
            },
            caret:{
                $desc:"Gets or sets Caret position in the first element ( must be an Input or Textarea element)",
                $rtn:"Array/[self]",
                $paras:[
                    "begin [Optional] : Number, the Caret begin position",
                    "end [Optional] : Number, the Caret end position"
                ],
                $snippet:[
                    "var id='xui.temp.caret'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<input id='+id+'1 value=0123456789/><'+'textarea id='+id+'2></'+'textarea><br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id+'2').attr('value','1111\\n2222\\n3333\\n4444');xui.asyRun(function(){xui(id+'1').caret(2,6);alert(xui(id+'1').caret());xui(id+'2').caret(2,16);alert(xui(id+'2').caret());},1000)"+
                    "}"
                ]
            },
            children:{
                $desc:"Gets a set of elements containing all of the immediate children of all elements",
                $rtn:"xui.Dom",
                $snippet:[
                    "var id='xui.temp.children'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<input/><input/><div style=\"padding:5px;\"><input/><input/></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).children().css('border','solid 4px')"+
                    "}"
                ]
            },
            width:{
                $desc:"Gets(the first element) or sets(all elements) the css width value",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.w1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div style=\"background:#888;position:relative;width:80px;height:80px;\"><div id='+id+' style=\"overflow:auto;position:absolute;margin:10px;border:solid 10px #ccc;padding:10px;\"> 1111111111111111111 2222222222222222 333333333333</div></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.width(20).height(20); alert(n.width()+':'+n.innerWidth()+':'+n.offsetWidth()+':'+n.outerWidth()+':'+n.scrollWidth());"+
                    "}"
                ]
            },
            serialize:{
                $desc:"Serializes a DOM profile to a JSON string or JSON object",
                $rtn:"String",
                $snippet:[
                    "alert(xui('btnLang').serialize());"
                ]
            },
            scrollWidth:{
                $desc:"Gets(the first element) the scroll width",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.w2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div style=\"background:#888;position:relative;width:80px;height:80px;\"><div id='+id+' style=\"overflow:auto;position:absolute;margin:10px;border:solid 10px #ccc;padding:10px;\"> 1111111111111111111 2222222222222222 333333333333</div></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.width(20).height(20); alert(n.width()+':'+n.innerWidth()+':'+n.offsetWidth()+':'+n.outerWidth()+':'+n.scrollWidth());"+
                    "}"
                ]
            },
            innerWidth:{
                $desc:"Gets(the first element) or sets(all elements) the inner width(includes the padding)",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.w3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div style=\"background:#888;position:relative;width:80px;height:80px;\"><div id='+id+' style=\"overflow:auto;position:absolute;margin:10px;border:solid 10px #ccc;padding:10px;\"> 1111111111111111111 2222222222222222 333333333333</div></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.innerWidth(40).innerHeight(40); alert(n.width()+':'+n.innerWidth()+':'+n.offsetWidth()+':'+n.outerWidth()+':'+n.scrollWidth());"+
                    "}"
                ]
            },
            offsetWidth:{
                $desc:"Gets(the first element) or sets(all elements) the offset width(includes the padding and border)",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.w4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div style=\"background:#888;position:relative;width:80px;height:80px;\"><div id='+id+' style=\"overflow:auto;position:absolute;margin:10px;border:solid 10px #ccc;padding:10px;\"> 1111111111111111111 2222222222222222 333333333333</div></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.offsetWidth(60).offsetHeight(60); alert(n.width()+':'+n.innerWidth()+':'+n.offsetWidth()+':'+n.outerWidth()+':'+n.scrollWidth());"+
                    "}"
                ]
            },
            outerWidth:{
                $desc:"Gets(the first element) or sets(all elements) the outer width(includes the padding, border and margin)",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.w5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div style=\"background:#888;position:relative;width:80px;height:80px;\"><div id='+id+' style=\"overflow:auto;position:absolute;margin:10px;border:solid 10px #ccc;padding:10px;\"> 1111111111111111111 2222222222222222 333333333333</div></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.outerWidth(80).outerHeight(80); alert(n.width()+':'+n.innerWidth()+':'+n.offsetWidth()+':'+n.outerWidth()+':'+n.scrollWidth());"+
                    "}"
                ]
            },

            height:{
                $desc:"Gets(the first element) or sets(all elements) the css height value",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.w6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div style=\"background:#888;position:relative;width:80px;height:80px;\"><div id='+id+' style=\"overflow:auto;position:absolute;margin:10px;border:solid 10px #ccc;padding:10px;\"> 1111111111111111111 2222222222222222 333333333333</div></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.width(20).height(20); alert(n.height()+':'+n.innerHeight()+':'+n.offsetHeight()+':'+n.outerHeight()+':'+n.scrollHeight());"+
                    "}"
                ]
            },
            scrollHeight:{
                $desc:"Gets(the first element) the scroll height",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.w7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div style=\"background:#888;position:relative;width:80px;height:80px;\"><div id='+id+' style=\"overflow:auto;position:absolute;margin:10px;border:solid 10px #ccc;padding:10px;\"> 1111111111111111111 2222222222222222 333333333333</div></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.width(20).height(20); alert(n.height()+':'+n.innerHeight()+':'+n.offsetHeight()+':'+n.outerHeight()+':'+n.scrollHeight());"+
                    "}"
                ]
            },
            innerHeight:{
                $desc:"Gets(the first element) or sets(all elements) the inner height(includes the padding)",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.w8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div style=\"background:#888;position:relative;width:80px;height:80px;\"><div id='+id+' style=\"overflow:auto;position:absolute;margin:10px;border:solid 10px #ccc;padding:10px;\"> 1111111111111111111 2222222222222222 333333333333</div></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.innerWidth(40).innerHeight(40); alert(n.height()+':'+n.innerHeight()+':'+n.offsetHeight()+':'+n.outerHeight()+':'+n.scrollHeight());"+
                    "}"
                ]
            },
            offsetHeight:{
                $desc:"Gets(the first element) or sets(all elements) the offset height(includes the padding and border)",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.w9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div style=\"background:#888;position:relative;width:80px;height:80px;\"><div id='+id+' style=\"overflow:auto;position:absolute;margin:10px;border:solid 10px #ccc;padding:10px;\"> 1111111111111111111 2222222222222222 333333333333</div></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.offsetWidth(60).offsetHeight(60); alert(n.height()+':'+n.innerHeight()+':'+n.offsetHeight()+':'+n.outerHeight()+':'+n.scrollHeight());"+
                    "}"
                ]
            },
            outerHeight:{
                $desc:"Gets(the first element) or sets(all elements) the outer height(includes the padding, border and margin)",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.w11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div style=\"background:#888;position:relative;width:80px;height:80px;\"><div id='+id+' style=\"overflow:auto;position:absolute;margin:10px;border:solid 10px #ccc;padding:10px;\"> 1111111111111111111 2222222222222222 333333333333</div></div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.outerWidth(80).outerHeight(80); alert(n.height()+':'+n.innerHeight()+':'+n.offsetHeight()+':'+n.outerHeight()+':'+n.scrollHeight());"+
                    "}"
                ]
            },
            clone:{
                $desc:"Creates copies of the set of elements",
                $rtn:"xui.Dom",
                $paras:[
                    "deep [Optional] : Boolean, This parameter indicates if the cloned node should include all child elementes of the original element. Default is [false]"
                ],
                $snippet:[
                    "var id='xui.temp.w11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">' + '<div id='+id+' style=\"background:#ccc;border:solid 1px;padding:10px;\"><div style=\"background:#fff;border:solid 1px;padding:10px;\">inner<input /></div>outer</div> <br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.parent().append(n.clone()).append(n.clone(true))"+
                    "}"
                ]
            },
            nativeEvent : {
                $desc:"To trigger DOM Element's native Event",
                $rtn:"xui.Dom",
                $paras:[
                    "name [required] : String, Event name"
                ]
            },
            scrollIntoView:{
                $desc:"Scrolls control into view",
                $rtn:"[self]"
            },
            isScrollBarShowed:{
                $desc:"To determine whether the scroll bar is showed or not",
                $rtn:"Boolean",
                $paras:[
                    "type [required] : x or y"
                ]
            },
            css:{
                $desc:"Gets a css property on the first element, or sets a css property(or key/value Object as css properties) to all elements",
                $rtn:"String/[self]",
                $paras:[
                    "name [Required] : css property name or a key/value Object as css properties",
                    "value [Optional] : css property value"
                ],
                $snippet:[
                    "var n=xui('btnLang'); alert(n.css('background')); alert(n.css('overflow')); alert(n.css('top'));",
                    "var n=xui('btnLang'); n.css('right','30px'); xui.asyRun(function(){n.css('right','0')},1000)",
                    "var n=xui('btnLang'); n.css({top:'30px',right:'30px'}); xui.asyRun(function(){n.css({top:0,right:0})},1000)"
                ]
            },
            cssPos:{
                $desc:"Gets or sets css left and top properties on the first element",
                $rtn:"Object/[self]",
                $paras:[
                    "pos [Optional] : {left:Number or String,top:Number or String}",
                    "triggerEvent [Optional] : Boolean, indicates if the 'set' action trigger related event or not"

                ],
                $snippet:[
                    "var n=xui('btnLang'); n.cssPos({left:100,top:100}); alert(xui.serialize(n.cssPos())); n.cssPos({left:'auto',top:'auto'})"
                ]
            },
            cssSize:{
                $desc:"Gets or sets css width and height properties on the first element",
                $rtn:"Object/[self]",
                $paras:[
                    "value [Optional] : {width:Number or String,height:Number or String}",
                    "triggerEvent [Optional] : Boolean, indicates if the 'set' action trigger related event or not"
                ],
                $snippet:[
                    "var n=xui('btnLang'), bak=n.cssSize(); n.cssSize({width:50,height:50}); alert(xui.serialize(n.cssSize())); n.cssSize(bak)"
                ]
            },
            cssRegion:{
                $desc:"Gets or sets css region properties on the first element",
                $rtn:"Object/[self]",
                $paras:[
                    "value [Optional] : {left:Number or String,top:Number or String,right:Number or String,bottom:Number or String,width:Number or String,height:Number or String}",
                    "triggerEvent [Optional] : Boolean, indicates if the 'set' action trigger related event or not"
                ],
                $snippet:[
                    "var n=xui('btnLang'),bak=n.cssRegion(); n.cssRegion({left:100,top:100,width:50,height:50}); alert(xui.serialize(n.cssRegion())); bak.left=bak.top='auto'; n.cssRegion(bak);"
                ]
            },
            query:{
                $desc:"Searches for all elements that match the specified parameters",
                $rtn:"xui.Dom",
                $paras:[
                    "tagName [Optional] : DOM element tagName",
                    "property [Optional] : DOM element property name or function",
                    "expr [Optional] : DOM element property value or an regexp"
                ],
                $snippet:[
                    "var id='xui.temp.query'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<div id=id1 style=\"border:solid 1px;padding:5px;\"><div style=\"border:solid 1px;padding:5px;\"> <input /><input /></div></div>  <button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); alert(n.outerHTML());alert(n.query().get().length); alert(n.query('div').get().length); alert(n.query('div','id').get().length); alert(n.query('div','id',id).get().length); alert(n.query('*','id',/^id/).get().length); alert(n.query('*',function(o){return o.tagName=='INPUT'}).get().length);"+
                    "}"
                ]
            },
            startDrag:{
                $desc:"Starts to drag the first element",
                $rtn:"[self]",
                $paras:[
                    "e [Required] : DOM [event] Object",
                    "profile [Optional] : key/value Object. Go <strong>xui.DragDrop.startDrag</strong> for the profile struct detail",
                    "dragKey [Optional] : String, dragKey for drag data",
                    "dragData [Optional] : Object, the dragged [data]"
                ],
                $snippet:[
                    "var id='xui.temp.dd0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"><button id='+id+'>drag me</button>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).onMousedown(function(p,e,s){xui(s).startDrag(e)})"+
                    "}"
                ],
                $memo:"Required: xui.DragDrop"
            },
            draggable:{
                $desc:"Enables/Disables the draggable functionality on the set of elements",
                $rtn:"[self]",
                $paras:[
                    "flag [Required] : Boolean, [true]: enables draggable functionality; [false]: disables draggable functionality. Default is [true]",
                    "profile [Optional] : key/value Object. Go <strong>xui.DragDrop.startDrag</strong> for the profile struct detail",
                    "key [Optional] : String, the [key] for drag data",
                    "data [Optional] : Object, the dragged [data]",
                    "target [Optional] : xui.Dom, drag target"
                ],
                $snippet:[
                    "var id='xui.temp.dd_a'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:80px;\">' + '<div id='+id+'a style=\"background:#ccc;position:absolute;border:solid 1px;padding:15px;left:10px;top:30px;\">1</div>' + '<div id='+id+'b style=\"background:#ccc;position:absolute;border:solid 1px;padding:15px;left:50px;top:30px;\">2</div>'+ '<div id='+id+'c style=\"background:#ccc;position:absolute;border:solid 1px;padding:15px;left:100px;top:30px;\">3</div>'+ '<div id='+id+'d style=\"background:#ccc;position:absolute;border:solid 1px;padding:15px;left:150px;top:30px;\">4</div>'+ '<div id='+id+'e style=\"background:#ccc;position:absolute;border:solid 1px;padding:15px;left:200px;top:30px;\">5</div>'+ '<div id='+id+'f style=\"background:#ccc;position:absolute;border:solid 1px;padding:15px;left:250px;top:30px;\">6</div>'+ '<div id='+id+'g style=\"background:#ccc;position:absolute;border:solid 1px;padding:15px;left:300px;top:30px;\">7</div>'+ '<div id='+id+'h style=\"background:#ccc;position:absolute;border:solid 1px;padding:15px;left:350px;top:30px;\">8</div>'+ '<div id='+id+'i style=\"background:#ccc;position:absolute;border:solid 1px;padding:15px;left:400px;top:30px;\">9</div>'+ ' <button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));" +
                    "var a=[0,200,400,600,800,1000,1200,1400];"+
                    "xui(id+'a').draggable(true,{dragType:'move'});" +
                    "xui(id+'b').draggable(true,{dragType:'copy',targetReposition:false});"+
                    "xui(id+'c').draggable(true,{dragType:'icon',shadowFrom:id+'c'});"+
                    "xui(id+'d').draggable(true,{dragType:'shape',targetReposition:false});"+
                    "xui(id+'e').draggable(true,{dragDefer:20,targetReposition:false});"+
                    "xui(id+'f').draggable(true,{xMagneticLines:a,yMagneticLines:a,magneticDistance:50,targetReposition:false});"+
                    "xui(id+'g').draggable(true,{widthIncrement:50,heightIncrement:50,targetReposition:false});"+
                    "xui(id+'h').draggable(true,{verticalOnly:true,targetReposition:false});"+
                    "xui(id+'i').draggable(true,{maxLeftOffset:50,maxTopOffset:50,maxRightOffset:50,maxBottomOffset:50,targetReposition:false});"+
                    "}"
                ],
                $memo:"Required: xui.DragDrop"
            },
            droppable:{
                $desc:"Enables/Disables the droppable functionality on the set of elements",
                $rtn:"[self]",
                $paras:[
                    "flag [Required] : Boolean, [true]: enables droppable functionality; [false]: disables droppable functionality. Default is [true]",
                    "key [Required] : String, the [key] for droppable data. Default is 'default'"
                ],
                $snippet:[
                    "var id='xui.temp.dd2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:150px;\">' + '<div style=\"position:absolute;border:solid 1px;padding:20px;left:10px;top:30px;\">draggable</div>' +'<div style=\"position:absolute;border:solid 1px;left:160px;top:30px;width:100px;height:100px;\">droppable</div>' + ' <button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var n=xui(id); n.first().draggable(true,{dragType:'icon'},'key1','data1').next().droppable(true,'key1').onDrop(function(){alert(xui.DragDrop.getProfile().dragData);})"+
                    "}"
                ],
                $memo:"Required: xui.DragDrop"
            },
            empty:{
                $desc:"Removes all child nodes from the set of elements",
                $rtn:"[self]",
                $paras:[
                    "triggerGC [Optional] : Boolean, indicates if trigger GC function"
                ],
                $snippet:[
                    "var id='xui.temp.empty'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:20px;position:relative;height:150px;\">' + '<div id='+id+' style=\"position:absolute;border:solid 1px;padding:20px;left:10px;top:30px;\">content in div<br /><button onclick=\"xui(\\\''+id+'\\\').empty()\">Empty me</button></div>'+ '<button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "}"
                ]
            },
            remove:{
                $desc:"Removes the set of elements from DOM",
                $rtn:"[self]",
                $paras:[
                    "triggerGC [Optional] : Boolean, indicates if trigger GC function"
                ],
                $snippet:[
                    "var id='xui.temp.empty'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\">content in div'+ '<button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "}"
                ]
            },
            replace:{
                $desc:"Replaces the first element with a set of elements",
                $rtn:"xui.Dom",
                $paras:[
                    "target [Required] : xui.Dom Object including the target elements",
                    "triggerGC [Optional] : Boolean, indicates if trigger GC function"
                ],
                $snippet:[
                    "var id='xui.temp.replace'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"><div id='+id+' style=\"border:solid 1px;padding:5px;\"></div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){ xui(id).replace(xui.create('a<input value=b />c<input value=d />e')) },1000)"+
                    "}"
                ]
            },
            swap:{
                $desc:"Swaps the first element with the target element",
                $rtn:"[self]",
                $paras:[
                    "target [Required] : xui.Dom Object including the target element"
                ],
                $snippet:[
                    "var id='xui.temp.replace'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div  style=\"border:solid 1px;padding:10px;\"><div id='+id+'1  style=\"border:solid 1px;padding:5px;\">1</div><div id='+id+'2 style=\"border:solid 1px;padding:5px;\">2</div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){ xui(id+'1').swap( xui(id+'2') ) },1000);xui.asyRun(function(){ xui(id+'1').swap( xui(id+'2') ) },2000);"+
                    "}"
                ]
            },
            setInlineBlock:{
                $desc:"For cross-browser setting the set of elements css display property to 'inline' mode",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.sib'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div  style=\"border:solid 1px;padding:10px;\"><div id='+id+'  style=\"border:solid 1px;padding:5px;\">1</div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){ xui(id).setInlineBlock()  },1000);xui.asyRun(function(){ xui(id).css('display','') },2000);"+
                    "}"
                ]
            },
            setSelectable:{
                $desc:"Enables or disables selectable functionality on the set of elements",
                $rtn:"[self]",
                $paras:[
                    "value [Optional] : Boolean, Default is [false]"
                ],
                $snippet:[
                    "var id='xui.temp.ssable'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div  style=\"border:solid 1px;padding:10px;\"><div id='+id+'1  style=\"border:solid 1px;padding:5px;\">selectable</div><div id='+id+'2 style=\"border:solid 1px;padding:5px;\">not selectable</div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id+'1').setSelectable(true);xui(id+'2').setSelectable(false);"+
                    "}"
                ]
            },
            first:{
                $desc:"Get a set of elements containing the first child of each of the given set of elements",
                $rtn:"xui.Dom",
                $paras:[
                    "index [Optional] : Number, iterator index"
                ],
                $snippet:[
                    "var id='xui.temp.first'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\"><div style=\"border:solid 1px;padding:5px;\">1<div style=\"border:solid 1px;padding:5px;\">2<div style=\"border:solid 1px;padding:5px;\">3<div style=\"border:solid 1px;padding:5px;\">4</div></div></div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).first().css('background','#eee');xui(id).first(2).css('background','#ccc');xui(id).first(3).css('background','#888');xui(id).first(4).css('background','#444');"+
                    "}"
                ]
            },
            parent:{
                $desc:"Get a set of elements containing the parent node of each of the given set of elements",
                $rtn:"xui.Dom",
                $paras:[
                    "index [Optional] : Number, iterator index"
                ],
                $snippet:[
                    "var id='xui.temp.parent'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"><div style=\"border:solid 1px;padding:5px;\">1<div style=\"border:solid 1px;padding:5px;\">2<div style=\"border:solid 1px;padding:5px;\">3<div style=\"border:solid 1px;padding:5px;\" id='+id+' >4</div></div></div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).parent(4).css('background','#eee');xui(id).parent(3).css('background','#ccc');xui(id).parent(2).css('background','#888');xui(id).parent().css('background','#444');"+
                    "}"
                ]
            },
            last:{
                $desc:"Get a set of elements containing the last child of each of the given set of elements",
                $rtn:"xui.Dom",
                $paras:[
                    "index [Optional] : Number, iterator index"
                ],
                $snippet:[
                    "var id='xui.temp.last'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\"><button onclick=\"xui(this).parent().remove()\">remove this example</button><div style=\"border:solid 1px;padding:5px;\">1<input /><div style=\"border:solid 1px;padding:5px;\">2<input /><div style=\"border:solid 1px;padding:5px;\">3<input /><div style=\"border:solid 1px;padding:5px;\">4</div></div></div></div></div>'));"+
                    "xui(id).last().css('background','#eee');xui(id).last(2).css('background','#ccc');xui(id).last(3).css('background','#888');xui(id).last(4).css('background','#444');"+
                    "}"
                ]
            },
            prev:{
                $desc:"Get a set of elements containing the previous siblings of each of the given set of elements",
                $rtn:"xui.Dom",
                $paras:[
                    "index [Optional] : Number, iterator index"
                ],
                $snippet:[
                    "var id='xui.temp.prev'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\"><div style=\"border:solid 1px;padding:5px;\">1</div><div style=\"border:solid 1px;padding:5px;\">2</div><div style=\"border:solid 1px;padding:5px;\">3</div><div style=\"border:solid 1px;padding:5px;\">4</div><button onclick=\"xui(this).parent().remove()\">remove this example</button></div>'));"+
                    "xui(id).last().prev().css('background','#eee');xui(id).last().prev(2).css('background','#ccc');xui(id).last().prev(3).css('background','#888');xui(id).last().prev(4).css('background','#444');"+
                    "}"
                ]
            },
            next:{
                $desc:"Get a set of elements containing the next siblings of each of the given set of elements",
                $rtn:"xui.Dom",
                $paras:[
                    "index [Optional] : Number, iterator index"
                ],
                $snippet:[
                    "var id='xui.temp.next'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\"><button onclick=\"xui(this).parent().remove()\">remove this example</button><div style=\"border:solid 1px;padding:5px;\">1</div><div style=\"border:solid 1px;padding:5px;\">2</div><div style=\"border:solid 1px;padding:5px;\">3</div><div style=\"border:solid 1px;padding:5px;\">4</div></div>'));"+
                    "xui(id).first().next().css('background','#eee');xui(id).first().next(2).css('background','#ccc');xui(id).first().next(3).css('background','#888');xui(id).first().next(4).css('background','#444');"+
                    "}"
                ]
            },
            focus:{
                $desc:"Sets focus to the first element, if it's can be focused",
                $rtn:"[self]",
                $paras:[
                    "force [Optional] : Boolean, force to set focus"
                ],
                $snippet:[
                    "var id='xui.temp.1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).last().focus()"+
                    "}"
                ]
            },
            leftBy:{
                $desc:"Changes the css left property by a specified offset value",
                $rtn:"[self]",
                $paras:[
                    "offset [Required] : Number, the offset value",
                    "triggerEvent [Optional] : Boolean, indicates if the 'set' action trigger related event or not"
                ],
                $snippet:[
                    "var id='xui.temp.leftBy'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"position:relative;height:50px;border:solid 1px;padding:10px;\"><input style=\"position:absolute;left:0;top:0;\" id='+id+' />' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){xui(id).leftBy(10)},500);xui.asyRun(function(){xui(id).leftBy(10)},1000); xui.asyRun(function(){xui(id).leftBy(10)},1500);xui.asyRun(function(){xui(id).leftBy(10)},2000);"+
                    "}"
                ]
            },
            topBy:{
                $desc:"Changes the css top property by a specified offset value",
                $rtn:"[self]",
                $paras:[
                    "offset [Required] : Number, the offset value",
                    "triggerEvent [Optional] : Boolean, indicates if the 'set' action trigger related event or not"
                ],
                $snippet:[
                    "var id='xui.temp.topBy'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"position:relative;height:50px;border:solid 1px;padding:10px;\"><input style=\"position:absolute;left:0;top:0;\" id='+id+' />' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){xui(id).topBy(10)},500);xui.asyRun(function(){xui(id).topBy(10)},1000); xui.asyRun(function(){xui(id).topBy(10)},1500);xui.asyRun(function(){xui(id).topBy(10)},2000);"+
                    "}"
                ]
            },
            widthBy:{
                $desc:"Changes the css width property by a specified offset value",
                $rtn:"[self]",
                $paras:[
                    "offset [Required] : Number, the offset value",
                    "triggerEvent [Optional] : Boolean, indicates if the 'set' action trigger related event or not"
                ],
                $snippet:[
                    "var id='xui.temp.widthBy'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"position:relative;height:50px;border:solid 1px;padding:10px;\"><input style=\"position:absolute;left:0;top:0;\" id='+id+' />' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){xui(id).widthBy(10)},500);xui.asyRun(function(){xui(id).widthBy(10)},1000); xui.asyRun(function(){xui(id).widthBy(10)},1500);xui.asyRun(function(){xui(id).widthBy(10)},2000);"+
                    "}"
                ]
            },
            heightBy:{
                $desc:"Changes the css height property by a specified offset value",
                $rtn:"[self]",
                $paras:[
                    "offset [Required] : Number, the offset value",
                    "triggerEvent [Optional] : Boolean, indicates if the 'set' action trigger related event or not"
                ],
                $snippet:[
                    "var id='xui.temp.heightBy'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"position:relative;height:50px;border:solid 1px;padding:10px;\"><input style=\"position:absolute;left:0;top:0;\" id='+id+' />' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){xui(id).heightBy(10)},500);xui.asyRun(function(){xui(id).heightBy(10)},1000); xui.asyRun(function(){xui(id).heightBy(10)},1500);xui.asyRun(function(){xui(id).heightBy(10)},2000);"+
                    "}"
                ]
            },
            hide:{
                $desc:"To hide the set of elements",
                $rtn:"[self]",
                $snippet:[
                    "xui('btnLang').hide(); xui.asyRun(function(){xui('btnLang').show();},1000);"
                ]
            },
            show:{
                $desc:"To show the set of elements",
                $rtn:"[self]",
                $paras:[
                    "left [Optional] : Number, the css left value",
                    "top [Optional] : Number, the css top value"
                ],
                $snippet:[
                    "xui('btnLang').hide(); xui.asyRun(function(){xui('btnLang').show();},1000);"
                ]
            },
            text:{
                $desc:"Gets the text contents of the first element, or sets the text contents to the set of elements",
                $rtn:"String/[self]",
                $paras:[
                    "content [Optional] : String, text content"
                ],
                $snippet:[
                    "var id='xui.temp.text'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"><div style=\"padding:5px;border:solid 1px;\" id='+id+' ></div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).text('<input />'); alert(xui(id).text());"+
                    "}"
                ]
            },
            html:{
                $desc:"Gets/sets the html contents (innerHTML) of the first element",
                $rtn:"String/[self]",
                $paras:[
                    "content [Optional] : String, innerHTML content",
                    "triggerGC [Optional] : Boolean, indicates if trigger GC function. Default is true",
                    "loadScripts [Optional] : Boolean, indicates if execute inner script. Default is false"
                ],
                $snippet:[
                    "var id='xui.temp.html1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"><div style=\"padding:5px;border:solid 1px;\" id='+id+' ></div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).html('<input />'); alert(xui(id).html());"+
                    "}"
                ]
            },
            loadHtml:{
                $desc:"To load a html file in same domain",
                $rtn:"[self]",
                $paras:[
                    "options [Required] : String/Object",
                    "onStart [Optional] : Function",
                    "onEnd [Optional] : Function"
                ]
            },
            loadIframe:{
                $desc:"To load a html file throught iframe",
                $rtn:"[self]",
                $paras:[
                    "options [Required] : String/Object",
                    "domId [Optional] : String, IFrame's DOM ID"
                ]
            },
            outerHTML:{
                $desc:"Gets/sets the html contents (outerHTML) of the first element",
                $rtn:"String/[self]",
                $paras:[
                    "content [Optional] : String, outerHTML content",
                    "triggerGC [Optional] : Boolean, indicates if trigger GC function"
                ],
                $snippet:[
                    "var id='xui.temp.html1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"><div style=\"padding:5px;border:solid 1px;\" id='+id+' ></div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).outerHTML('<div style=\"padding:5px;border:dashed 2px;\" id='+id+' ><input /></div>'); alert(xui(id).outerHTML());"+
                    "}"
                ]
            },
            id:{
                $desc:"Gets(the first element) or sets(the set of elements) DOM id",
                $rtn:"String/[self]",
                $paras:[
                    "value [Optional] : String, DOM id value",
                    "ignoreCache [Optional] : Boolean, indicates if ignore to reset cache. Default is [false]"
                ],
                $snippet:[
                    "var n=xui('btnLang'); n.id('logo2'); alert(n.id()); n.id('btnLang');"
                ]
            },
            fixPng:{
                $desc: "To fix the png problem in IE 6",
                $rtn:"[self]",
                $memo:"Only for IE6"
            },
            ieRemedy:{
                $desc: "To trigger DOM element inner redraw function in IE"+
                    " For some old IE versions, that did not trigger layout when one dimension is changed (e.g. to change css height only with overflow='visible'",
                $rtn:"[self]",
                $memo:"Only for IE"
            },
            scrollLeft:{
                $desc:"Gets(the first element) or sets(all elements) the scrollLeft value",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.scrollLeft'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"position:relative; border:solid 1px;padding:10px;\"><div style=\"overflow:auto; width:50px;height:50px;\" id='+id+' />aaaaaaaaaaaaa bbbbbbbbbbb cccccccccc dddddddd</div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).scrollLeft(xui(id).scrollWidth()); alert(xui(id).scrollLeft())"+
                    "}"
                ]
            },
            rotate:{
                $desc:"Gets CSS transform's rotate property on the first element, or sets it to all elements",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ]
            },
            scaleX:{
                $desc:"Gets CSS transform's scaleX property on the first element, or sets it to all elements",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ]
            },
            scaleY:{
                $desc:"Gets CSS transform's scaleY property on the first element, or sets it to all elements",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ]
            },
            translateX:{
                $desc:"Gets CSS transform's translateX property on the first element, or sets it to all elements",
                $rtn:"String/[self]",
                $paras:[
                    "value [Optional] : String"
                ]
            },
            translateY:{
                $desc:"Gets CSS transform's translateY property on the first element, or sets it to all elements",
                $rtn:"String/[self]",
                $paras:[
                    "value [Optional] : String"
                ]
            },
            skewX:{
                $desc:"Gets CSS transform's skewX property on the first element, or sets it to all elements",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ]
            },
            skewY:{
                $desc:"Gets CSS transform's skewY property on the first element, or sets it to all elements",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ]
            },
            scrollTop:{
                $desc:"Gets(the first element) or sets(all elements) the scrollTop value",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.scrollTop'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"position:relative; border:solid 1px;padding:10px;\"><div style=\"overflow:auto; width:50px;height:50px;\" id='+id+' />aaaaaaaaaaaaa bbbbbbbbbbb cccccccccc dddddddd</div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).scrollTop(xui(id).scrollHeight()); alert(xui(id).scrollTop())"+
                    "}"
                ]
            },
            left:{
                $desc:"Gets(the first element) or sets(all elements) the css left value",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.left'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"position:relative;height:50px;border:solid 1px;padding:10px;\"><input style=\"position:absolute;left:0;top:0;\" id='+id+' />' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){xui(id).left(10)},1000);xui.asyRun(function(){xui(id).left(20)},2000); xui.asyRun(function(){xui(id).left(30)},3000);"+
                    "}"
                ]
            },
            top:{
                $desc:"Gets(the first element) or sets(all elements) the css top value",
                $rtn:"Number/[self]",
                $paras:[
                    "value [Optional] : Number"
                ],
                $snippet:[
                    "var id='xui.temp.top'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"position:relative;height:50px;border:solid 1px;padding:10px;\"><input style=\"position:absolute;left:0;top:0;\" id='+id+' />' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){xui(id).top(10)},1000);xui.asyRun(function(){xui(id).top(20)},2000); xui.asyRun(function(){xui(id).top(30)},3000);"+
                    "}"
                ]
            },
            nextFocus:{
                $desc:"To get or set the next 'should be' focus(element)",
                $rtn:"xui.Dom",
                $paras:[
                    "downwards [Optional] : Boolean, to indicate the 'next' is downwards([true]) or upwards([false]). Default is [true]",
                    "includeChild [Optional] : Boolean, to indicate if the function to search the children elements. Default is [true]",
                    "setFocus [Optional] : Boolean, to indicate if the function to set the focus to the result element. Default is [true]"
                ],
                $snippet:[
                    "var id='xui.temp.nextFocus'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"position:relative;height:50px;border:solid 1px;padding:10px;\"><input value=upwards /><input id='+id+' /><button>downwards</button>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){xui(id).nextFocus();},1000);xui.asyRun(function(){xui(id).nextFocus(false)},2000);"+
                    "}"
                ]
            },
            offsetLeft:{
                $desc:"Gets the offsetLeft property of the first element",
                $rtn:"Number",
                $snippet:[
                    "alert(this.offsetLeft())"
                ]
            },
            offsetTop:{
                $desc:"Gets the offsetTop property of the first element",
                $rtn:"Number",
                $snippet:[
                "alert(this.offsetTop())"
                ]
            },
            hoverPop:{
                $desc:"Sets pop window triggered by mouse hover",
                 $rtn:"[self]",
                $paras:[
                    "node [Reqired]  : Object/xui.Dom/Element. The pop window",
                    "type [Optional] : String, refer to popToTop, [null] will clear the setting",
                    "beforePop[Optional] : Function(prf, node, e, src),  triggered before the window pop",
                    "beforeHide[Optional] : Function(prf, node, e, src, trigger), triggered before the window hide",
                    "parent [Optional] : xui.Dom Object. the parent element to hold the pop element. Default is [document.body]",
                    "groupid[Optional] : String. the group id",
                    "showEffects[Optional] : Object, show effects config object",
                    "hideEffects[Optional] : Object, hide effects config object"
                ]
            },
            // xui.Dom.prototype
            popUp:{
                $desc:"Pops it onto the top, and sets a trigger function to allow user click out of the first element's region to hide it",
                $rtn:"String, the blur trigger id",
                $paras:[
                    "pos [Reqired] : {left:Number,top:Number} Object(The css left and top value) or xui.Dom Object(for getting position)",
                    "type [Optional] : String. one of 'outer','inner','outerleft-outertop','left-outertop','center-outertop','right-outertop','outerright-outertop','outerleft-top','left-top','center-top','right-top','outerright-top','outerleft-middle','left-middle','center-middle','right-middle','outerright-middle','outerleft-bottom','left-bottom','center-bottom','right-bottom','outerright-bottom','outerleft-outerbottom','left-outerbottom','center-outerbottom','right-outerbottom','outerright-outerbottom','1','2','3','4','12','21'.Default is 'outer'",
                    "parent [Optional] : xui.Dom Object. the parent element to hold the pop element. Default is [document.body]",
                    "trigger [Required] : Function or [null] : the hidden trigger function",
                    "group [Optional] : xui.Dom Object. this trigger's group Object"
                ]
            },
            popToTop:{
                $desc:"Pops the first element to the top zIndex into the specified parent element",
                $rtn:"[self]",
                $paras:[
                    "pos [Reqired] : {left:Number,top:Number} Object(The css left and top value) or xui.Dom Object(for getting position)",
                    "type [Optional] : String. one of 'outer','inner','outerleft-outertop','left-outertop','center-outertop','right-outertop','outerright-outertop','outerleft-top','left-top','center-top','right-top','outerright-top','outerleft-middle','left-middle','center-middle','right-middle','outerright-middle','outerleft-bottom','left-bottom','center-bottom','right-bottom','outerright-bottom','outerleft-outerbottom','left-outerbottom','center-outerbottom','right-outerbottom','outerright-outerbottom','1','2','3','4','12','21'.Default is 'outer'",
                    "parent [Optional] : xui.Dom Object. the parent element to hold the pop element. Default is [document.body]"
                ],
                $snippet:[
                    "var id='xui.temp.p2p'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"position:relative; border:solid 1px;padding:10px;\"><button id='+id+' style=\"height:100px;width:100px;\">downwards</button>' + '<br /><br /><br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.asyRun(function(){if(xui.Dom.byId(id))xui(xui.create('<div style=\"border:solid 1px;background:#ccc;width:50px;height:50px;\">type 1</div>')).popToTop(xui(id),1,xui(id).parent());},500);"+
                    "xui.asyRun(function(){if(xui.Dom.byId(id))xui(xui.create('<div style=\"border:solid 1px;background:#aaa;width:50px;height:50px;\">type 2</div>')).popToTop(xui(id),2,xui(id).parent());},1000);"+
                    "xui.asyRun(function(){if(xui.Dom.byId(id))xui(xui.create('<div style=\"border:solid 1px;background:#888;width:50px;height:50px;\">type 3</div>')).popToTop(xui(id),3,xui(id).parent());},1500);"+
                    "xui.asyRun(function(){if(xui.Dom.byId(id))xui(xui.create('<div style=\"border:solid 1px;background:#666;width:50px;height:50px;\">type 4</div>')).popToTop(xui(id),4,xui(id).parent());},2000);"+
                    "}"
                ]
            },
            setBlurTrigger:{
                $desc:"Sets or unsets a outside click trigger function that will be triggered once when [click event] is fired out of the first element's region",
                $rtn:"[self]",
                $paras:[
                    "id [Required] : String, this trigger's id value",
                    "trigger [Required] : Function or [null] : the hidden trigger function",
                    "group [Optional] : xui.Dom Object. this trigger's group Object"
                ],
                $snippet:[
                "var id='xui.temp.sbt'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"> <div id='+id+' style=\"border:solid 1px;padding:5px;width:50px;height:50px;\"> </div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "xui(id).setBlurTrigger('ttt',function(){alert('out of my region');})"+
                "}",
                "var id='xui.temp.sbt'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"> <div id='+id+'1 style=\"border:solid 1px;padding:5px;width:50px;height:50px;\"> </div><div id='+id+'2 style=\"border:solid 1px;padding:5px;width:50px;height:50px;\"> </div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "xui(id+'1').setBlurTrigger('ttt',function(){alert('out of my region')},xui([id+'1',id+'2']))"+
                "}"
                ]
            },
            topZindex:{
                $desc:"Gets the minimum available zIndex value that can make the first element to be set to the most top layer; or set the first element to the most top layer directly",
                $rtn:"Number/[self]",
                $paras:[
                    "flag [Optional] : Boolean, indicates whether or not it sets the first element to the most top layer directly. Default is [false]"
                ],
                $snippet:[
                    "var id='xui.temp.tzi'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:130px;\">' + '<div id='+id+'1 style=\"z-index:1;background:#ccc;position:absolute;border:solid 1px;padding:50px;left:10px;top:30px;\">1</div>' + '<div id='+id+'2 style=\"z-index:2;background:#aaa;position:absolute;border:solid 1px;padding:50px;left:50px;top:30px;\">2</div>'+ '<div id='+id+'3 style=\"z-index:3;background:#888;position:absolute;border:solid 1px;padding:50px;left:100px;top:30px;\">3</div>'+ '<div id='+id+'4 style=\"z-index:4;background:#444;position:absolute;border:solid 1px;padding:50px;left:150px;top:30px;\">4</div>'+ ' <button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));" +
                    "var n=xui(id+'1');alert(n.css('zIndex')+':'+n.topZindex()); n.topZindex(true); alert(n.css('zIndex')+':'+n.topZindex());"+
                    "}"
                ]
            },

            afterBlur:$eo,
            afterChange:$eo,
            afterClick:{
                $rtn:"[self]",
                $paras:[
                    "fun [Optional]: Function, [this] pointer is the current element, arguments are [xui.DomProfile Object, DOM event Object, the current element's xid]",
                    "label [Optional]: String, the event label",
                    "flag  [Optional]: Boolean, for remove event only. to indicate if remove all related event"
                ],
                $snippet:[
                "var id='xui.temp.event'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"></p><button style=\"height:50px;\" id='+id+'>BUTTON element for testing.</button></p>' + '<br /><br /><button onclick=\"xui(\\\''+id+'\\\').onClick();\">fire event:[onclick] group functions</button> - <button onclick=\"xui(\\\''+id+'\\\').onClick(true);\">fire event: all functions</button> - <button onclick=\"xui(\\\''+id+'\\\').onClick(null,\\\'1#\\\');\">remove [onclick] 1#</button> - <button onclick=\"xui(\\\''+id+'\\\').beforeClick(null);\">remove all [beforeclick] functions</button> - <button onclick=\"xui(\\\''+id+'\\\').onClick(null,null,true);\">remove all functions</button><br /><br /><br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "xui(id).beforeClick(function(){alert('beforeclick 1#')},'1#').beforeClick(function(){alert('beforeclick 2#')},'2#').onClick(function(){alert('onclick 1#')},'1#').onClick(function(){alert('onclick 2#')},'2#').afterClick(function(){alert('afterclick 1#, this function return [false], the remaining functions will be ignored!'); return false;},'1#').afterClick(function(){alert('afterclick 2#')},'2#');"+
                "}"
                ]
            },
            afterContextmenu:$eo,
            afterDblclick:$eo,
            afterDrag:$eo,
            afterDragbegin:$eo,
            afterDragenter:$eo,
            afterDragleave:$eo,
            afterDragover:$eo,
            afterDragstop:$eo,
            afterDrop:$eo,
            afterError:$eo,
            afterFocus:$eo,
            afterKeydown:$eo,
            afterKeypress:$eo,
            afterKeyup:$eo,
            afterLoad:$eo,
            afterMove:$eo,
            afterMousedown:$eo,
            afterMousemove:$eo,
            afterMouseout:$eo,
            afterMouseover:$eo,
            afterMouseup:$eo,
            afterMousewheel:$eo,
            afterScroll:$eo,
            afterSelect:$eo,
            afterSize:$eo,
            afterSubmit:$eo,
            afterUnload:$eo,
            beforeBlur:$eo,
            beforeChange:$eo,
            beforeClick:$eo,
            beforeContextmenu:$eo,
            beforeDblclick:$eo,
            beforeDrag:$eo,
            beforeDragbegin:$eo,
            beforeDragenter:$eo,
            beforeDragleave:$eo,
            beforeDragover:$eo,
            beforeDragstop:$eo,
            beforeDrop:$eo,
            beforeError:$eo,
            beforeFocus:$eo,
            beforeKeydown:$eo,
            beforeKeypress:$eo,
            beforeKeyup:$eo,
            beforeLoad:$eo,
            beforeMove:$eo,
            beforeMousedown:$eo,
            beforeMousemove:$eo,
            beforeMouseout:$eo,
            beforeMouseover:$eo,
            beforeMouseup:$eo,
            beforeMousewheel:$eo,
            beforeScroll:$eo,
            beforeSelect:$eo,
            beforeSize:$eo,
            beforeSubmit:$eo,
            beforeUnload:$eo,
            onBlur:$eo,
            onChange:$eo,
            onClick:$eo,
            onContextmenu:$eo,
            onDblclick:$eo,
            onDrag:$eo,
            onDragbegin:$eo,
            onDragenter:$eo,
            onDragleave:$eo,
            onDragover:$eo,
            onDragstop:$eo,
            onDrop:$eo,
            onError:$eo,
            onFocus:$eo,
            onKeydown:$eo,
            onKeypress:$eo,
            onKeyup:$eo,
            onLoad:$eo,
            onMove:$eo,
            onMousedown:$eo,
            onMousemove:$eo,
            onMouseout:$eo,
            onMouseover:$eo,
            onMouseup:$eo,
            onMousewheel:$eo,
            onScroll:$eo,
            onSelect:$eo,
            onSize:$eo,
            onSubmit:$eo,
            onUnload:$eo
        }
    });

    xui.set(xui.Locale,["en","doc","xui","DragDrop"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.DragDrop Class(static)",
        abort:{
            $desc:"to abort the current drag process if xui.DragDrop is working",
            $snippet:[
                "var id='xui.temp.ddo1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:150px;\">' + '<div style=\"position:absolute;border:solid 1px;padding:20px;left:10px;top:30px;\">draggable</div>' +'<div style=\"position:absolute;border:solid 1px;left:160px;top:30px;width:100px;height:100px;\">droppable</div>' + ' <button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "var n=xui(id); n.first().draggable(true,{dragType:'icon'},'key1','data1').next().droppable(true,'key1').onDragenter(function(){xui.DragDrop.abort();xui.message('the current dd is aborted!')})"+
                "}"
            ]
        },
        getProfile:{
            $desc:"Gets the current drag process profile, that includes all the useful information",
            $rtn:"Object",
            $snippet:[
                "var id='xui.temp.ddo2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:150px;\">' + '<div style=\"position:absolute;border:solid 1px;padding:20px;left:10px;top:30px;\">draggable</div>' +'<div style=\"position:absolute;border:solid 1px;left:160px;top:30px;width:100px;height:100px;\">droppable</div>' + ' <button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "var n=xui(id); n.first().draggable(true,{dragType:'icon'},'key1','data1').next().droppable(true,'key1').onDrop(function(){alert(xui.Coder.formatText(xui.serialize(xui.DragDrop.getProfile())))})"+
                "}"
            ]
        },
        setDragIcon:{
            $desc:"To change the dragIcon while dragging",
            $rtn:"xui.DragDrop",
            $paras:[
                "key [Optional] : String, the drag icon key. Default is 'move'"
            ],
            $snippet:[
                "var id='xui.temp.ddo3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"><button id='+id+'>drag me</button>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "var numb; xui(id).onMousedown(function(p,e,s){numb=0;xui(s).startDrag(e,{dragType:'icon'})}).onDrag(function(){numb++; if(numb<=200){if(numb==50)xui.DragDrop.setDragIcon('move');else if(numb==100)xui.DragDrop.setDragIcon('link');else if(numb==150)xui.DragDrop.setDragIcon('copy');else if(numb==200)xui.DragDrop.setDragIcon('none');}});"+
                "}"
            ],
            $memo:"Uses this function when the [dragType] is 'move' only"
        },
        setDropElement:{
            $desc:"To set the drop target DOM element",
            $rtn:"xui.DragDrop",
            $snippet:[
                "src [Required] : String, the drop target's xid"
            ],
            $snippet:[
                "var id='xui.temp.ddo4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:150px;\">' + '<div style=\"position:absolute;border:solid 1px;padding:20px;left:10px;top:30px;\">draggable</div>' +'<div style=\"position:absolute;border:solid 1px;left:160px;top:30px;width:100px;height:100px;\">droppable</div>' + ' <button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "var n=xui(id); n.first().draggable(true,{dragType:'icon'},'key1','data1');"+
                "n=n.first().next();"+
                "n.onDrop(function(){this.style.background='#fff';alert(xui.Coder.formatText(xui.serialize(xui.DragDrop.getProfile())))});"+
                "\n//Must use 'before' here \n n.beforeMouseover(function(){xui.DragDrop.setDropElement(this);this.style.background='#ccc';}).beforeMouseout(function(){xui.DragDrop.setDropElement(null);this.style.background='#fff';});"+
                "}"
            ]
        },
        setDropFace:{
            $desc:"Set droppable appearance on the drop tareget",
            $rtn:"xui.DragDrop",
            $paras:[
                "target [Required] : Element/String/xui.Dom",
                "dragIcon [Optional] : String, the drag icon key. Default is 'move'"
            ],
            $snippet:[
                "var id='xui.temp.ddo4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:150px;\">' +'<div style=\"position:absolute;border:solid 1px;left:160px;top:30px;width:100px;height:100px;\">setDropFace</div>' + ' <button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "var n=xui(id).first().onMouseover(function(){xui.DragDrop.setDropFace(this,'copy')}).onMouseout(function(){xui.DragDrop.setDropFace();})"+
                "}"
            ]
        },
        startDrag:{
            $desc:"<p>Starts to drag the first element",
            $paras:[
                "e [Required] : DOM [event] Object",
                "targetNode [Required] : Any input can be packed to xui.Dom Object",
                "profile [Optional] : key/value Object, for xui.DragDrop profile. Profile struct:" +
                "<div>{<ul>" +
                "<li><strong>dragType</strong>: 'move','copy','deep_copy','shape','icon', 'blank' or 'none', Default is 'shape';</li>"+
                "<li><strong>shadowFrom</strong>: DOM element or xui.Dom Object. It's valid when dragType=='icon';</li>"+
                "<li><strong>targetReposition</strong>: Boolean, does dd reset the target position, Default is [true];</li>"+

                "<li><strong>dragIcon</strong>: String, the drag icon image path, Default is [xui.ini.path+'ondrag.gif'].</li>"+
                "<li><strong>magneticDistance</strong>: Number, the magnetic distance, Default is 0;</li>"+
                "<li><strong>xMagneticLines</strong>: Array of Number, the magnetic line values in horizontal dir, Default is [];</li>"+
                "<li><strong>yMagneticLines</strong>: Array of Number, the magnetic line values in vertical dir, Default is [];</li>"+
                "<li><strong>widthIncrement</strong>: Number, the width increment in horizontal dir, Default is 0;</li>"+
                "<li><strong>heightIncrement</strong>: Number, the height increment in vertical dir, Default is 0;</li>"+
                "<li><strong>dragDefer</strong>: Number, when [xui.DragDrop.startDrag] is called, the real drag action will be triggered after [document.onmousemove] runs [dragDefer] times, Default is 0;</li>"+

                "<li><strong>horizontalOnly</strong>:Boolean, drag horizontal dir only, Default is [false];</li>"+
                "<li><strong>verticalOnly</strong>: Boolean, drag vertical dir only, Default is [false];</li>"+
                "<li><strong>maxBottomOffset</strong>:Number, the offset between [the restricted bottom] and [the current mouse Y], for mouse restricted region, Default is [null];</li>"+
                "<li><strong>maxLeftOffset</strong>:Number, the offset between [the restricted left] and [the current mouse X], for mouse restricted region, Default is [null];</li>"+
                "<li><strong>maxRightOffset</strong>:Number, the offset between [the restricted right] and [the current mouse X], for mouse restricted region, Default is [null];</li>"+
                "<li><strong>maxTopOffset</strong>: Number, the offset between [the restricted top] and [the current mouse Y], for mouse restricted region, Default is [null];</li>"+

                "<li><strong>targetNode</strong>: DOM element or xui.Dom Object, the drag target node;</li>"+
                "<li><strong>targetCSS</strong>: Number, the drag target node's css key/value Object, Default is [null];</li>"+
                "<li><strong>dragKey</strong>: String, the drag key, Default is [null];</li>"+
                "<li><strong>dragData</strong>: Object, the drag data, Default is [null];</li>"+
                "<li><strong>targetLeft</strong>: Number, the drag target node's css left, Default is [null];</li>"+
                "<li><strong>targetTop</strong>: Number, the drag target node's css top, Default is [null];</li>"+
                "<li><strong>targetWidth</strong>: Number, the drag target node's css width, Default is [null];</li>"+
                "<li><strong>targetHeight</strong>: Number, the drag target node's css height, Default is [null];</li>"+
                "<li><strong>targetOffsetParent</strong>: xui.Dom Object, the drag target node offsetParent node, Default is [null];</li>"+

                "<li><strong>dragCursor</strong>:  'none', 'move', 'link', or 'add', the drag cursor key; <strong>[readonly]</strong></li>"+
                "<li><strong>x</strong>: Number, current X value of mouse; <strong>[readonly]</strong></li>"+
                "<li><strong>y</strong>: Number, current Y value of mouse; <strong>[readonly]</strong></li>"+
                "<li><strong>ox</strong>: Number, original X value of mouse; <strong>[readonly]</strong></li>"+
                "<li><strong>oy</strong>: Number, original Y value of mouse; <strong>[readonly]</strong></li>"+
                "<li><strong>curPos</strong>: {left:Number,top:Number}, current css pos of the dragging node <strong>[readonly]</strong></li>"+
                "<li><strong>offset</strong>: {x:Number,y:Number}, offset from now to origin <strong>[readonly]</strong></li>"+
                "<li><strong>isWorking</strong>: Boolean, is dd working or not? <strong>[readonly]</strong></li>"+
                "<li><strong>restrictedLeft</strong>: Number, the calculated restricted left value; <strong>[readonly]</strong></li>"+
                "<li><strong>restrictedRight</strong>: Number, the calculated restricted right value; <strong>[readonly]</strong></li>"+
                "<li><strong>restrictedTop</strong>: Number, the calculated restricted top value; <strong>[readonly]</strong></li>"+
                "<li><strong>restrictedBottom</strong>: Number, the calculated restricted bottom value; <strong>[readonly]</strong></li>"+
                "<li><strong>proxyNode</strong>: xui.Dom Object, the proxy Object; <strong>[readonly]</strong></li>"+
                "<li><strong>dropElement</strong>: String, the target drop element DOM id. <strong>[readonly]</strong></li>"+
                "</ul>}</div>",
                "dragKey [Optional] : String, dragKey for drag data",
                "dragData [Optional] : Object, the dragged [data]"
            ],
            $snippet:[
                "var id='xui.temp.ddo9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div style=\"border:solid 1px;padding:10px;\"><button id='+id+'>drag me</button>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "xui(id).onMousedown(function(p,e,s){xui.DragDrop.startDrag(e,this,{dragType:'copy'})})"+
                "}"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","CSS"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.CSS Class(static)",
        resetCSS:{
            $desc:"Add reset CSS to the current page"
        },
        adjustFont:{
            $desc:"调整当前窗口的基础字体",
            $paras:[
                "fontSize [Optional] : String, font size",
                "fontFamily [Optional] : String, font family",
                "fontWeight [Optional] : String, font weight",
                "fontStyle [Optional] : String, font style"
            ]
        },
        addStyleSheet:{
            $desc:"Adds a &lt;style> element to DOM &lt;head>",
            $rtn:"Element",
            $paras:[
                "txt [Required] : String, css text",
                "id [Optional] : String, element id. If a style element with this id exists in &lt;head> already, the function will be ignored",
                "backOf [Optional] : Boolean, adds this style element at the back of &lt;head> or not. Default is false"
            ],
            $snippet:[
                "var id='xui.temp.add'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' class=testadded style=\"border:solid 1px;padding:10px;\">' + '<button onclick=\"xui.CSS.addStyleSheet(\\\'.testadded{background:#ccc;}\\\',\\\'testadded\\\')\">addStyleSheet</button> - '+ '<button onclick=\"alert(xui.CSS.get(\\\'id\\\',\\\'testadded\\\'))\">get</button> - '+  '<button onclick=\"xui.CSS.remove(\\\'id\\\',\\\'testadded\\\')\">remove</button>'+ '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "}"
            ]
        },
        remove:{
            $desc:"Removes a specified &lt;style> or &lt;link>  element from DOM &lt;head>",
            $paras:[
                "property [Required] : String, property name of style element",
                "value [Required] : String, property value of style element"
            ],
            $snippet:[
                "var id='xui.temp.rm'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' class=testadded style=\"border:solid 1px;padding:10px;\">' + '<button onclick=\"xui.CSS.addStyleSheet(\\\'.testadded{background:#ccc;}\\\',\\\'testadded\\\')\">addStyleSheet</button> - '+ '<button onclick=\"alert(xui.CSS.get(\\\'id\\\',\\\'testadded\\\'))\">get</button> - '+  '<button onclick=\"xui.CSS.remove(\\\'id\\\',\\\'testadded\\\')\">remove</button>'+ '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "}"
            ]
        },
        get:{
            $desc:"Gets a specified &lt;style> or &lt;link>  element from DOM &lt;head>",
            $rtn:"Element",
            $paras:[
                "property [Required] : String, property name of style element",
                "value [Required] : String, property value of style element"
            ],
            $snippet:[
                "var id='xui.temp.get'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' class=testadded style=\"border:solid 1px;padding:10px;\">' + '<button onclick=\"xui.CSS.addStyleSheet(\\\'.testadded{background:#ccc;}\\\',\\\'testadded\\\')\">addStyleSheet</button> - '+ '<button onclick=\"alert(xui.CSS.get(\\\'id\\\',\\\'testadded\\\'))\">get</button> - '+  '<button onclick=\"xui.CSS.remove(\\\'id\\\',\\\'testadded\\\')\">remove</button>'+ '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "}"
            ]
        },
        setStyleRules:{
            $desc:"Sets a specified style rules",
            $rtn:"xui.CSS",
            $paras:[
                "selector [Required] : String, css expression without ',' in it",
                "value [Optional] : key/value pairs. if it isn't specified, the function will remove the style selector",
                "force [Optional] : if this parameter is true, it'll force to add the [selector] and [value] to a special styleSheet, even if that [selector] already exists in the previous styleSheet"
            ],
            $snippet:[
                "var id='xui.temp.ar'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' class=testadded style=\"border:solid 1px;padding:10px;\">' + '<button onclick=\"xui.CSS.setStyleRules(\\\'.testadded\\\',{background:\\\'#888\\\'})\">add rules</button> - '+'<button onclick=\"xui.CSS.setStyleRules(\\\'.testadded\\\',{background:\\\'#ccc\\\'})\">update rules</button> - '+'<button onclick=\"xui.CSS.setStyleRules(\\\'.testadded\\\')\">remove rules</button>'+ '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "}"
            ]
        },
        replaceLink:{
            $desc:"Replaces the specified &lt;style> or &lt;link> element(the one that has the [property] with [oValue]) with a new &lt;link> (sets href to [href]), and sets the specified [property] to [nValue]",
            $paras:[
                "href [Required] : String, the styleSheet file path",
                "property [Required] : String, the specified property name",
                "oValue [Required] : String, the original links's property value",
                "nValue [Required] : String, the new links's property value"
            ],
            $snippet:[
                "//xui.CSS.replaceLink('http://xxx.com/a.css', 'id', 'oldid', 'newid');"
            ]
        },
        includeLink:{
            $desc:"Includes a specified [href] as a &lt;link> element into DOM &lt;head>",
            $rtn:"Element",
            $paras:[
                "href [Required] : String, the styleSheet file path",
                "id [Optional] : String, the elment id value",
                "front [Optional] : Boolean, adds this &lt;link> element in the front of &lt;head> nor not. Default is false",
                "attr [Optional] : key/value Object, the &lt;link> element's attributes"
            ],
            $snippet:[
                "//xui.CSS.includeLink('http://xxx.com/a.css', 'id', flase, {title:'title'});"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","History"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.History Class(static)",
        setCallback:{
            $desc:"Sets callback function thant will be triggered when the Fragement Identifier changed",
            $rtn:"xui.History",
            $paras:[
                "callback [Required] : Function, callback function"
            ],
            $snippet:[
                "//xui.History.setCallback(function(str){alert('Fragement Identifier is: '+str)})"
            ]
        },
        getFI:{
            $desc:"Gets the current Fragement Identifier string",
            $rtn:"String",
            $snippet:[
                "//xui.History.setCallback(function(str){alert('Fragement Identifier is: '+str)})\n"+
                "//alert(xui.History.getFI());\n"+
                "//xui.History.setCallback(null)"
            ]
        },
        setFI:{
            $desc:"Sets the Fragement Identifier string",
            $paras:[
                "fi [Required] : String, the Fragement Identifier string",
                "triggerCallback [Optional] : Boolean, trigger callback function or not. Default is [true]",
                "mergeParams [Optional] : Boolean, to determine merge the existing parameters or not Default is [false]"
            ],
            $snippet:[
                "//xui.History.setCallback(function(str){alert('Fragement Identifier is: '+str)});\n"+
                "//xui.History.setFI('#test');\n"+
                "//xui.History.setCallback(null)"
            ]
        },
        getRouter:{
            $desc:"Gets router path in current Fragement Identifier string",
            $rtn:"String/Array",
            $paras:[
                "returnArr [Optional] : Boolean, to determine whether return path array or path string. Default is [false]"
            ]
        },
        getRouterArray:{
            $desc:"Gets router path array in current Fragement Identifier string",
            $rtn:"Array"
        },
        getParams:{
            $desc:"Gets the parameters in current Fragement Identifier string",
            $rtn:"String/Object",
            $paras:[
                "key [Optional] : String, key for the specific parameter"
            ]
        },
        setRouter:{
            $desc:"Sets router path to current Fragement Identifier string",
            $paras:[
                "path [Required] : String/Array, like '/a/b' or ['a','b']",
                "force[Optional] : Boolean, to determine whether force to set path or not. Default is [false], which means it will be ignored when the target path is in the current path already.",
                "replace [Optional] : Boolean,  to determine replace the current location with a new one or not. Default is [false]",
                "triggerCallback [Optional] : Boolean, trigger callback function or not. Default is [true]",
                "mergeParams [Optional] : Boolean, to determine merge the existing parameters or not. Default is [false]"
            ]
        },
        setParams:{
            $desc:"Sets the parameters to current Fragement Identifier string",
            $paras:[
                "key [Required] : Object/String, A set of prop or key",
                "value [Optional] : Object, a property value",
                "triggerCallback [Optional] : Boolean, trigger callback function or not. Default is [true]",
                "mergeParams [Optional] : Boolean, to determine merge the existing parameters or not. Default is [true]"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","Cookies"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Cookies Class(static)",
        get:{
            $desc:"Gets all cookies or a cookie with the given name",
            $rtn:"String",
            $paras:[
                "name [Required] : String, the name of cookie"
            ],
            $snippet:[
                "var o=xui.Cookies; o.set('a','b',1); alert(o.get('a')); o.remove('a'); alert(o.get('a')); "
            ]
        },
        set:{
            $desc:"Creates a cookie with the given name, value, and other options",
            $rtn:"xui.Cookies",
            $paras:[
                "name [Required] : String, the name of cookie",
                "value [Required] : String, the value of cookie",
                "days [Optional] : Number, the expiry days after which the cookie is no longer valid. Default is 0",
                "path [Optional] : String, the directory where the cookie is active. Default is the path of the current URL",
                "domain [Optional] : String, the domain name of your site. Default is the domain of the current URL",
                "isSecure [Optional] : Boolean, to indicate if the cookie may only be retrieved with a secure server. Default is [false]"
            ],
            $snippet:[
                "var o=xui.Cookies; o.set('a','b',1); alert(o.get('a')); o.remove('a'); alert(o.get('a')); "
            ]
        },
        remove:{
            $desc:"Removes a cookie with the given name",
            $rtn:"xui.Cookies",
            $paras:[
                "name [Required] : String, the name of cookie"
            ],
            $snippet:[
                "var o=xui.Cookies; o.set('a','b',1); alert(o.get('a')); o.remove('a'); alert(o.get('a')); "
            ]
        },
        clear:{
            $desc:"Removes all cookie"
        }
    });
    xui.set(xui.Locale,["en","doc","xui","Debugger"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Debugger Class(static)",
        'log':{
            $desc:"Shows log information to a new window(Monitor Window)",
            $snippet:[
                "//You can input multi parameters:\n"+
                "xui.Debugger.log(9,'a',[1,2],{a:1,b:2})"
            ]
        },
        trace:{
            $desc:"Shows an Object's key/value pairs ,and the current function's trace information to the Monitor Window",
            $paras:[
                "obj [Optional] : Object"
            ],
            $snippet:[
                "xui.Debugger.trace({a:1,b:2})"
            ]
        },
        err:{
            $desc:"Shows an Error info to the Monitor Window. The most common usage : 'window.onerror=xui.Debugger.err;'",
            $snippet:[
                "var old=window.onerror; \n window.onerror=xui.Debugger.err; \n throw new Error('a error!'); window.onerror=old;"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","Date"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Date Class(static)",
        add:{
            $desc:"Returns a new datetime value based on adding an interval to the specified date",
            $rtn:"Object, the result Date Object",
            $paras:[
                "date [Required] : Date Object, the specified date used to increment datepart",
                "datepart [Required] : String, the parameter that specifies on which part of the date to calculate'ms','s','n','h','d','ww','m','q','y','de' or 'c'",
                "count [Required] : Number, the value used to increment datepart"
            ],
            $snippet:[
                "var date=xui.Date,d=date.parse('1/1/2000'),arr=[];"+
                "arr.push(xui.serialize(date.add(d, 'ms', 600)));"+
                "arr.push(xui.serialize(date.add(d, 's', 1)));"+
                "arr.push(xui.serialize(date.add(d, 'n', 1)));"+
                "arr.push(xui.serialize(date.add(d, 'h', 1)));"+
                "arr.push(xui.serialize(date.add(d, 'd', 1)));"+
                "arr.push(xui.serialize(date.add(d, 'ww', 1)));"+
                "arr.push(xui.serialize(date.add(d, 'm', 1)));"+
                "arr.push(xui.serialize(date.add(d, 'q', 1)));"+
                "arr.push(xui.serialize(date.add(d, 'y', 1)));"+
                "arr.push(xui.serialize(date.add(d, 'de', 1)));"+
                "arr.push(xui.serialize(date.add(d, 'c', 1)));"+
                "alert(arr.join('\\n'))"
            ]
        },
        diff:{
            $desc:"Returns the number of date and time boundaries crossed between two specified dates",
            $rtn:"Number",
            $paras:[
                "startdate [Required] : Date, the beginning date for the calculation",
                "enddate [Required] : Date, the the ending date for the calculation",
                "datepart [Required] : String, the parameter that specifies on which part of the date to calculate.  'ms','s','n','h','d','ww','m','q','y','de' or 'c'",
                "firstDayOfWeek [Optional] : Number the first day of week. Default is 0"
            ],
            $snippet:[
                "var date=xui.Date,sd=date.parse('1/1/2000'),ed=new Date,arr=[];"+
                "arr.push(xui.serialize(date.diff(sd, ed, 'ms')));"+
                "arr.push(xui.serialize(date.diff(sd, ed, 's')));"+
                "arr.push(xui.serialize(date.diff(sd, ed, 'n')));"+
                "arr.push(xui.serialize(date.diff(sd, ed, 'h')));"+
                "arr.push(xui.serialize(date.diff(sd, ed, 'd')));"+
                "arr.push(xui.serialize(date.diff(sd, ed, 'ww')));"+
                "arr.push(xui.serialize(date.diff(sd, ed, 'm')));"+
                "arr.push(xui.serialize(date.diff(sd, ed, 'q')));"+
                "arr.push(xui.serialize(date.diff(sd, ed, 'y')));"+
                "arr.push(xui.serialize(date.diff(sd, ed, 'de')));"+
                "arr.push(xui.serialize(date.diff(sd, ed, 'c')));"+
                "alert(arr.join('\\n'))"
            ]
        },
        get:{
            $desc:"Returns an integer representing the specified datepart of the specified date",
            $rtn:"Number",
            $paras:[
                "date [Required] : Date Object, the specified date",
                "datepart [Required] : String, the parameter that specifies on which part of the date to calculate'ms','s','n','h','d','ww','m','q','y','de' or 'c'",
                "firstDayOfWeek [Optional] : Number the first day of week. Default is 0"
            ],
            $snippet:[
                "var date=xui.Date,d=new Date();"+
                "alert('The millisecond of \"'+d+'\" is: '+date.get(d, 'ms'));"+
                "alert('The second of \"'+d+'\" is: '+date.get(d, 's'));"+
                "alert('The minute of \"'+d+'\" is: '+date.get(d, 'n'));"+
                "alert('The hour of \"'+d+'\" is: '+date.get(d, 'h'));"+
                "alert('The day of \"'+d+'\" is: '+date.get(d, 'd'));"+
                "alert('The week of \"'+d+'\" is: '+date.get(d, 'ww'));"+
                "alert('The week (first day of week is 1)  of \"'+d+'\" is: '+date.get(d, 'ww',1));"+
                "alert('The month of \"'+d+'\" is: '+date.get(d, 'm'));"+
                "alert('The quarter of \"'+d+'\" is: '+date.get(d, 'q'));"+
                "alert('The year of \"'+d+'\" is: '+date.get(d, 'y'));"+
                "alert('The decade of \"'+d+'\" is: '+date.get(d, 'de'));"+
                "alert('The century of \"'+d+'\" is: '+date.get(d, 'c'));"
            ]
        },
        getTimSpanStart:{
            $desc:"Gets the 'from' time of the given time span(e.g. 3 hours, 2 day, 1 week...)",
            $rtn:"Object, Date Object",
            $paras:[
                "date [Required] : Date Object, a date to caculate the time span",
                "datepart [Required] : String, the time span's datepart: 'ms','s','n','h','d','ww','m','q','y','de' or 'c'",
                "count [Optional] : Number, how many [datepart]s in the time span. Default is 1",
                "firstDayOfWeek [Optional] : Number the first day of week. Default is 0"
            ],
            $snippet:[
                "var date=xui.Date,d=new Date,arr=[];"+
                "arr.push(xui.serialize(d));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 'ms')));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 's')));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 'n')));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 'h')));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 'd')));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 'ww')));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 'm')));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 'q')));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 'y')));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 'de')));"+
                "arr.push(xui.serialize(date.getTimSpanStart(d, 'c')));"+
                "alert(arr.join('\\n'))"
            ]
        },
        getTimSpanEnd:{
            $desc:"Gets the 'to' time of the given time span(e.g. 3 hours, 2 day, 1 week...)",
            $rtn:"Object, Date Object",
            $paras:[
                "date [Required] : Date Object, a date to caculate the time span",
                "datepart [Required] : String, time span's datepart: 'ms','s','n','h','d','ww','m','q','y','de' or 'c'",
                "count [Optional] : Number, how many [datepart]s in the time span. Default is 1",
                "firstDayOfWeek [Optional] : Number the first day of week. Default is 0"
            ],
            $snippet:[
                "var date=xui.Date,d=new Date,arr=[];"+
                "arr.push(xui.serialize(d));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 'ms')));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 's')));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 'n')));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 'h')));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 'd')));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 'ww')));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 'm')));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 'q')));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 'y')));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 'de')));"+
                "arr.push(xui.serialize(date.getTimSpanEnd(d, 'c')));"+
                "alert(arr.join('\\n'))"
            ]
        },
        format:{
            $desc:"Formats Date object",
            $rtn:"String",
            $paras:[
                "date [Required] : Date Object, the specified date",
                "format [Required] : String, the result string's format. The format unit is in (utciso|iso|yyyy|mm|ww|dd|hh|nn|ss|ms|de|c|y|q|m|w|d|h|n|s)",
                "firstDayOfWeek [Optional] : Number the first day of week. Default is 0"
            ],
            $snippet:[
                "var arr=[],date=xui.Date,d=new Date;"+
                "arr.push(date.format(d,'utciso'));"+
                "arr.push(date.format(d,'iso'));"+
                "arr.push(date.format(d,'ms'));"+
                "arr.push(date.format(d,'s'));"+
                "arr.push(date.format(d,'ss'));"+
                "arr.push(date.format(d,'n'));"+
                "arr.push(date.format(d,'nn'));"+
                "arr.push(date.format(d,'h'));"+
                "arr.push(date.format(d,'hh'));"+
                "arr.push(date.format(d,'d'));"+
                "arr.push(date.format(d,'dd'));"+
                "arr.push(date.format(d,'w' ));"+
                "arr.push(date.format(d,'ww'));"+
                "arr.push(date.format(d,'m'));"+
                "arr.push(date.format(d,'mm'));"+
                "arr.push(date.format(d,'q' ));"+
                "arr.push(date.format(d,'qa' ));"+
                "arr.push(date.format(d,'y'));"+
                "arr.push(date.format(d,'yyyy'));"+
                "arr.push(date.format(d,'de'));"+
                "arr.push(date.format(d,'c'));"+
                "arr.push(date.format(d,'yyyy-mm-dd hh:nn:ss ms'));"+
                "alert(arr.join('\\n'))"
            ]


        },
        getText:{
            $desc:"Converts the specified date to a string representation",
            $rtn:"String",
            $paras:[
                "date [Required] : Date Object, the specified date",
                "datepart [Required] : String, the result string's format",
                "firstDayOfWeek [Optional] : Number the first day of week. Default is 0"
            ],
            $snippet:[
                "var arr=[],date=xui.Date,d=new Date;"+
                "arr.push(date.getText(d,'utciso'));"+
                "arr.push(date.getText(d,'iso'));"+
                "arr.push(date.getText(d,'ms'));"+
                "arr.push(date.getText(d,'s'));"+
                "arr.push(date.getText(d,'n'));"+
                "arr.push(date.getText(d,'h'));"+
                "arr.push(date.getText(d,'d'));"+
                "arr.push(date.getText(d,'w' ));"+
                "arr.push(date.getText(d,'ww'));"+
                "arr.push(date.getText(d,'m'));"+
                "arr.push(date.getText(d,'q' ));"+
                "arr.push(date.getText(d,'y'));"+
                "arr.push(date.getText(d,'de'));"+
                "arr.push(date.getText(d,'c'));"+
                "arr.push(date.getText(d,'hn'));"+
                "arr.push(date.getText(d,'dhn'));"+
                "arr.push(date.getText(d,'mdhn'));"+
                "arr.push(date.getText(d,'hns'));"+
                "arr.push(date.getText(d,'hnsms'));"+
                "arr.push(date.getText(d,'yq'));"+
                "arr.push(date.getText(d,'ym'));"+
                "arr.push(date.getText(d,'md'));"+
                "arr.push(date.getText(d,'ymd'));"+
                "arr.push(date.getText(d,'ymdh'));"+
                "arr.push(date.getText(d,'ymdhn'));"+
                "arr.push(date.getText(d,'ymdhns'));"+
                "arr.push(date.getText(d,'all'));"+
                "alert(arr.join('\\n'))"
            ]
        },
        getWeek:{
            $desc:"Gets the week of the year according to the given date",
            $rtn:"Number",
            $paras:[
                "date [Required] : Date Object, the given date",
                "firstDayOfWeek [Optional] : Number the first day of week. Default is 0"
            ],
            $snippet:[
                "alert(xui.Date.getWeek(new Date))"
            ]
        },
        parse:{
            $desc:"Converts the specified string representation of a date and time to its [Date] Object equivalent",
            $rtn:"Object, Date Object",
            $paras:[
                "str [Required] : String, the given string",
                "foramt [Optional] : String, Date time format(e.g. yyyy-mm-dd; dd/mm/yyyy hh:nn:ss ms)"
            ],
            $snippet:[
                "alert(xui.Date.parse('1/1/1998'))",
                "alert(xui.Date.parse('Fri Sep 05 2008 11:46:11 GMT+0800'))",
                "alert(xui.Date.parse('2008-09-05T03:46:34.343Z'))",
                "alert(xui.Date.parse('2008-09-05T03:46:34.343+80:00'))"
            ]
        },
        offsetTimeZone:{
            $desc:"Offset date time to a given time zone, or offset back",
            $rtn:"Object, Date Object",
            $paras:[
                "date [Required] : Date Object, the target date",
                "timeZone [Required] : integer Number, the given time zone value",
                "back [Optional] : Boolean, indicates whether or not is offsets back. Default is [false]"
            ],
            $snippet:[
                "var localDate = new Date, timezone9Date=xui.Date.offsetTimeZone(localDate, 9);"+
                "alert(localDate.toString() == xui.Date.offsetTimeZone(timezone9Date, 9, true))"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","absObj"], {
        getAll:{
            $desc:"Gets all instances of the current Class",
            $rtn:"xui.absObj, the current Class Object",
            $snippet:[
                "alert(xui.UI.getAll().get().length)"
            ]
        },
        pickAlias:{
            $desc:"Picks an avialiable alias for the current Class",
            $rtn:'String',
            $snippet:[
                "alert(xui.UI.Button.pickAlias())"
            ]
        },
        setDataModel:{
            $desc:"Sets a set of Model Object to the current Class",
            $rtn:"xui.absObject",
            $paras:[
                "hash [Required] : key/value pairs"
            ],
            $snippet:[
                "var o=(new xui.UI.Button).render(); \n//no 'test' data[getTest function, setTest functon] yet\n alert(o.getTest); \n//Add 'test' data model to the Class\n xui.UI.Button.setDataModel({test:'default value'}); \n//Creates a new instance\n o=(new xui.UI.Button).render(); \n//call getTest here\n alert(o.getTest()); \n//Removes that 'test' data model from the Class\n xui.UI.Button.setDataModel({test:null})"
            ]
        },
        setEventHandlers:{
            $desc:"Sets a set of event Handlers Object to the current Class",
            $rtn:"xui.absObject",
            $paras:[
                "hash [Required] : key/value pairs"
            ],
            $snippet:[
                "var o=new xui.UI.Button; \n//No 'onA' event handler yet\n alert(o.onA); \n//Sets 'onA' event handler to Class \n xui.UI.Button.setEventHandlers({onA:function(){}}); \n//Adds an 'onA' event function to the instance\n o.onA(function(){alert('a')}); \n//Fires the 'onA' event function\n o.onA(); \n//Removes the 'onA' event handler from Class\n xui.UI.Button.setEventHandlers({onA:null});"
            ]
        },
        unserialize:{
            $desc:"To unserialize a string representation or a set of profile representations to a xui.absObj Object",
            $rtn:"xui.UI",
            $paras:[
                "target [Required] : String/Array",
                "keepSerialId [Optional] : Boolean, to keep serila id or not. Default is [false]"
            ],
            $snippet:[
                "var s=xui.UIProfile.getFromDom('btnLang').boxing().serialize(false); alert(xui.serialize(s)); alert(xui.UI.unserialize(s))"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            host:{
                $desc:"@Deprecated.(to setHost/getHost)"
            },
            alias:{
                $desc:"@Deprecated.(to setAlias/getAlias)"
            },
            getHost:{
                $desc:"Gets the host Object of the first profile",
                $rtn:"Object",
                $snippet:[
                    "var o=xui.UIProfile.getFromDom('btnLang'); alert(o.host===SPA);",
                    "var host={},o=new xui.UI.Button; o.setHost(host, 'aBtn'); alert(host.aBtn.KEY);"
                ]
            },
            setHost:{
                $desc:"Sets the host Object and alias to the first profile",
                $rtn:'[self]',
                $paras:[
                    "host [Optional : Object, the host Object",
                    "alias [Optional : String, the alias value"
                ],
                $snippet:[
                    "var o=xui.UIProfile.getFromDom('btnLang'); alert(o.host===SPA);",
                    "var host={},o=new xui.UI.Button; o.setHost(host, 'aBtn'); alert(host.aBtn.KEY);"
                ]
            },
            getProperties:{
                $desc:"Gets all Properties or a specified Properties from the first Profile",
                $rtn:"Object",
                $paras:[
                    "key [Optional] : String"
                ]
            },
            setProperties:{
                $desc:"Sets a set of Properties(or a specified Property with a key) to all inner Profiles",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : Object/String, A set of prop or key",
                    "value [Optional] : Object, a property value"
                ]
            },
            getEvents:{
                $desc:"Collects all the event(or a specified event) functions from the first Profile, and returns it",
                $rtn:"Object",
                $snippet:[
                    "var p=xui.UIProfile.getFromDom('btnLang'); p.setEvents({onA:xui.fun(), onShowTips:function(){return false}}); alert(xui.serialize(p.getEvents()))"
                ]
            },
            setEvents:{
                $desc:"Sets a set of event functions(or a specified event fucntion with a key ) to all inner Profiles",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : Object/String, A set of Properties or key",
                    "value [Optional] : Object, a property value"
                ],
                $snippet:[
                    "var p=xui.UIProfile.getFromDom('btnLang'); p.setEvents({onA:xui.fun(), onShowTips:function(){return false}}); alert(xui.serialize(p.getEvents()))"
                ]
            },
            getAlias:{
                $desc:"Gets an alias to the first profile",
                $rtn:'String',
                $snippet:[
                    "var o=xui.UIProfile.getFromDom('btnLang'); alert(o.alias); alert(o.host[o.alias].get(0)===o)",
                    "var host={},o=new xui.UI.Button; o.setHost(host, 'aBtn'); alert(host.aBtn.KEY); o.setAlias('bBtn'); alert(host.aBtn);  alert(host.bBtn.KEY); "
                ]
            },
            setAlias:{
                $desc:"Sets an alias to the first profile",
                $rtn:'[self]',
                $paras:[
                    "str [Optional] : String, the alias value"
                ],
                $snippet:[
                    "var o=xui.UIProfile.getFromDom('btnLang'); alert(o.alias); alert(o.host[o.alias].get(0)===o)",
                    "var host={},o=new xui.UI.Button; o.setHost(host, 'aBtn'); alert(host.aBtn.KEY); o.setAlias('bBtn'); alert(host.aBtn);  alert(host.bBtn.KEY); "
                ]
            },
            getDesc:{
                $desc:"Gets the desc message on the first Profile",
                $rtn:"String"
            },
            setDesc:{
                $desc:"Sets the desc message to the each Profile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getName:{
                $desc:"Gets value control's name",
                $rtn:"String"
            },
            setName:{
                $desc:"Sets value control's name",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getTag:{
                $desc:"Gets the tag value on the first Profile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.ui40'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTag('tag'); alert(btn.getTag())},1000)"+
                    "}"
                ]
            },
            setTag:{
                $desc:"Sets the tag value to the each Profile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui41'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTag('tag'); alert(btn.getTag())},1000)"+
                    "}"
                ]
            },
            getPropBinder:{
                $desc:"Gets the properties binder setting on the first Profile",
                $rtn:"Object"
            },
            setPropBinder:{
                $desc:"Sets the properties binder setting to the each Profile",
                 $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ]
            },
            reBindProp:{
                $desc:"To rebind prop with specified data map",
                 $rtn:"[self]",
                $paras:[
                    "dataMap [Optional] : Object.  the rebinder map"
                ]
            },
            getTagVar:{
                $desc:"Gets the tagVar property value on the first Profile",
                $rtn:"Object",
                $snippet:[
                    "var id='xui.temp.ui42'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTagVar([1,2]); alert(btn.getTagVar())},1000)"+
                    "}"
                ]
            },
            setTagVar:{
                $desc:"Sets the tagVar property value to the each Profile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui43'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTagVar([1,2]); alert(btn.getTagVar())},1000)"+
                    "}"
                ]
            },
            serialize:{
                $desc:"To serialize the current Object to a string representation",
                $rtn:"String",
                $paras:[
                    "rtnString [Optional] : Boolean, to indicate whether or not it returns String or Object. Default is true",
                    "keepHost [Optional] : Boolean, to keep host Object link or not. Default is false"
                ],
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').boxing().serialize());" +
                    "alert(xui.UIProfile.getFromDom('btnLang').boxing().serialize(false))"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","absProfile"], {
        prototype:{
            getId:{
                $desc:"Gets the unique id",
                $rtn:"String",
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').getId())"
                ]
            },
            link:{
                $desc:"To link the [target] parameter to an Object or Array with a given [id]. This action can be reversed by calling 'unLink' function with the same [id]",
                $rtn:"[self]",
                $paras:[
                    "obj [Required] : Object or Array",
                    "id [Required] : String, link id",
                    "target [Optional] : Object, Default is [self]"
                ],
                $snippet:[
                    "var profile=new xui.Profile(), a1=[],a2=[],a3=[]; profile.link(a1,'a').link(a2,'b').link(a3,'c'); alert(a1+':'+a2+':'+a3); profile.unLink('a'); alert(a1+':'+a2+':'+a3); profile.unLinkAll(); alert(a1+':'+a2+':'+a3); "
                ],
                $memo:"Usually, we do not need to  call this function manually"

            },
            unLink:{
                $desc:"To unlink the linked Object or Array according to a given [id]",
                $rtn:"[self]",
                $paras:[
                    "id [Required] : String, given id value"
                ],
                $snippet:[
                    "var profile=new xui.Profile(), a1=[],a2=[],a3=[]; profile.link(a1,'a').link(a2,'b').link(a3,'c'); alert(a1+':'+a2+':'+a3); profile.unLink('a'); alert(a1+':'+a2+':'+a3); profile.unLinkAll(); alert(a1+':'+a2+':'+a3); "
                ],
                $memo:"Usually, we do not need to call this function manually"
            },
            unLinkAll:{
                $desc:"To unlink all the linked Objects or Arrays",
                $rtn:"[self]",
                $snippet:[
                    "var profile=new xui.Profile(), a1=[],a2=[],a3=[]; profile.link(a1,'a').link(a2,'b').link(a3,'c'); alert(a1+':'+a2+':'+a3); profile.unLink('a'); alert(a1+':'+a2+':'+a3); profile.unLinkAll(); alert(a1+':'+a2+':'+a3); "
                ],
                $memo:"Usually, we do not need to call this function manually"
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","Profile"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Profile Class",
        constructor:{
            $desc:"Creates a profile Object",
            $memo:"Usually, we do not need to create this Class manually"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            serialize:{
                $desc:"To serialize the current profile to a string representation",
                $rtn:"String",
                $paras:[
                    "rtnString [Optional] : Boolean, to indicate whether it returns String or Object. Default is true",
                    "keepHost [Optional] : Boolean, to keep host Object link or not. Default is false"
                ],
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').serialize());" +
                    "alert(xui.UIProfile.getFromDom('btnLang').serialize(false))"
                ]
            },
            getProperties:{
                $desc:"Gets all Properties or a specified Properties",
                $rtn:"Object",
                $paras:[
                    "key [Optional] : String"
                ]
            },
            setProperties:{
                $desc:"Sets a set of Properties(or a specified Property with a key)",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : Object/String, A set of event or key",
                    "value [Optional] : Object, a property value"
                ]
            },
            getEvents:{
                $desc:"Collects all the event(or a specified event) functions in the current profile, and returns it",
                $rtn:"Object"
            },
            setEvents:{
                $desc:"Sets a set of event functions(or a specified event fucntion with a key ) to the current profile",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : Object/String, A set of Properties or key",
                    "value [Optional] : Object, a property value"
                ]
            },
            boxing:{
                $desc:"Packs the current profile to a xui.absBox Object, and returns it",
                $rtn:'xui.absBox',
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').boxing().KEY)"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UIProfile"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UIProfile Class",
        constructor:{
            $desc:"Creates an UI profile Object",
            $memo:"Usually, we do not need to create this Class manually"
        },
        getFromDom:{
            $desc:"Gets an UI profile according to a given DOM element or id",
            $rtn:"xui.UIProfile",
            $paras:[
                "id [Required] : String, a DOM element or id"
            ],
            $snippet:[
                "alert(xui.UIProfile.getFromDom('btnLang').serialize());",
                "alert(xui.UIProfile.getFromDom('xui.UI.TreeBar-CMD:a:l').serialize());"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            renderId:{
                $desc:"String, Indicates whether the UIProfile is rendered or not"
            },
            getContainer:{
                $desc:"Gets container Object(xui.Dom) or root node",
                $rtn:"xui.Dom",
                $paras:[
                    "subId [Optional] : container's sub id"
                ]
            },
            getRoot:{
                $desc:"Gets the root xui.Dom Object",
                $rtn:"xui.Dom",
                $snippet:[
                "alert(xui.UIProfile.getFromDom('btnLang').getRoot());"
                ]
            },
            getRootNode:{
                $desc:"Gets the root DOM element",
                $rtn:"Element",
                $snippet:[
                "alert(xui.UIProfile.getFromDom('btnLang').getRootNode());"
                ]
            },
            serialize:{
                $desc:"to serialize the current profile to a string representation",
                $rtn:"String",
                $paras:[
                    "rtnString [Optional] : Boolean, to indicate whether it return String or Object. Default is true",
                    "keepHost [Optional] : Boolean, to keep host Object link or not. Default is false"
                ],
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').serialize());" +
                    "alert(xui.UIProfile.getFromDom('btnLang').serialize(false))"
                ]
            },
            toHtml:{
                $desc:"To build HTML string from the current UIProfile, and returns it",
                $rtn:"String",
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').toHtml())"
                ]
            },
            getClass:{
                $desc:"Gets class name according to a given [key] string and a [tag] string",
                $rtn:"String",
                $paras:[
                    "key [Required] : String, key string",
                    "tag [Optional] : String, tag string"
                ],
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('xui.UI.Panel:a:').getClass('HANDLE','-hover'))"
                ]
            },
            getDomId:{
                $desc:"Gets the profile's dom id string",
                $rtn:"String",
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').getDomId())"
                ]
            },
            setDomId:{
                $desc:"Sets a specified dom id to the profile",
                $rtn:"[self]",
                $paras:[
                    "id [Required] : String, id string"
                ],
                $snippet:[
                    "var profile=xui.UIProfile.getFromDom('btnLang'); alert(profile.getDomId()); profile.setDomId('logo1'); alert(profile.getDomId());profile.setDomId('btnLang'); alert(profile.getDomId());"
                ]
            },
            queryItems:{
                 $desc:"Query for the matched items in a deep Array",
                 $rtn:"Array",
                 $paras:[
                    "items [Required] : A deep array",
                    "fun [Required] : Function, query filter function",
                    "deep [Optional] : Boolean, indicates whether or not it queries the sub items. Default is [false]",
                    "single [Optional] : Boolean, indicates whether or not it returns a single result. Default is [false]",
                    "flag [Optional] : Boolean, indicates whether or not it returns mixed items. Default is [false]"
                ],
                $snippet:[
                    "var profile=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:'), items=[{id:'a'},{id:'.b',sub:[{id:'aa'},{id:'.bb'}]}], filter=function(o,i){return o.id.indexOf(\".\")!=-1},results= profile.queryItems(items,filter);alert(results.length);results= profile.queryItems(items,filter,true);alert(results.length);results= profile.queryItems(items,filter,true,true);alert(results.length);results= profile.queryItems(items,filter,false,true);alert(results.length);",
                    "var profile=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:'), items=profile.properties.items, filter=function(o,i){return o.id.indexOf(\".\")!=-1},results= profile.queryItems(items,filter);alert(results.length);results= profile.queryItems(items,filter,true);alert(results.length);results= profile.queryItems(items,filter,true,true);alert(results.length);results= profile.queryItems(items,filter,false,true);alert(results.length);"

                ]
            },
            getItemByDom:{
                $desc:"Gets a item Object according to a specified DOM element or an id string",
                $rtn:"Object, key/value pairs",
                $paras:[
                    "src [Required] : DOM element or id string"
                ],
                $snippet:[
                    "var pro=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:');alert(xui.serialize( pro.getItemByDom('xui.UI.TreeBar-ITEM:a:a') ))"
                ],
                $memo:"For those [xui.absList] profiles only. Usually, we use this function in event callback function"
            },
            getItemIdByDom:{
                $desc:"Gets a item id according to a specified DOM element or an id string",
                $rtn:"String",
                $paras:[
                    "src [Required] : DOM element or id string"
                ],
                $snippet:[
                    "var pro=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:');alert(xui.serialize( pro.getItemIdByDom('xui.UI.TreeBar-ITEM:a:a') ))"
                ],
                $memo:"For those [xui.absList] profiles only. Usually, we use this function in event callback function"
            },
            getItemByItemId:{
                $desc:"Gets a item Object according to a specified item id",
                $rtn:"Object, key/value pairs",
                $paras:[
                    "itemId [Required] :String, item id"
                ],
                $snippet:[
                    "var pro=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:');alert(xui.serialize( pro.getItemByItemId('Class') ))"
                ],
                $memo:"For those [xui.absList] profiles in only"
            },
            getSubIdByItemId:{
                $desc:"Gets the sub id (from DOM element id) according to a specified item id",
                $rtn:"String",
                $paras:[
                    "itemId [Required] :String, item id"
                ],
                $snippet:[
                    "var pro=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:');alert(pro.getSubIdByItemId('Class') )"
                ],
                $memo:"For those [xui.absList] profiles only"
            },
            getSubNode:{
                $desc:"Gets one or a set of specified inner DOM elements (in the root DOM element) according to the given [key] and [subId]",
                $rtn:"xui.Dom",
                $paras:[
                    "key [Required] : String, key string",
                    "subId [Optional] : String or [true]. [true] for getting all the sub nodes with the specified [key]"
                ],
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').getSubNode('KEY').id());"+
                    "alert(xui.UIProfile.getFromDom('xui.UI.TreeBar:a:').getSubNode('ITEM','a').id());"+
                    "alert(xui.UIProfile.getFromDom('xui.UI.TreeBar:a:').getSubNode('ITEM',true).get().length);"
                ],
                $memo:"The [subId] parameter is for those [xui.absList] profiles only"
            },
            getSubNodes:{
                $desc:"Gets a set of specified inner DOM elements(in the root DOM element) according to the given [arr] and [subId]",
                $rtn:"xui.Dom",
                $paras:[
                    "arr [Required] : String/Array, a set of key string",
                    "subId [Optional] : String/Array/Boolean. [true] for getting all the sub nodes with the specified [key]. Default is [true]"
                ],
                $snippet:[
                    "var profile=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:'); alert(profile.getSubNodes(['KEY','BORDER']).get().length);"+
                    "alert(profile.getSubNodes(['ITEM','BAR'],'a').get().length);"+
                    "alert(profile.getSubNodes(['ITEM','BAR'],true).get().length);"
                ],

                $memo:"The [subId] parameter is for those [xui.absList] profiles only"
            },
            getSubNodeByItemId:{
                $desc:"Gets a specified inner DOM element(in the root DOM element) according to the given [key] and [itemId]",
                $rtn:"xui.Dom",
                $paras:[
                    "key [Required] : String, key string",
                    "itemId [Optional] : String, the item id"
                ],
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('xui.UI.TreeBar:a:').getSubNodeByItemId('ITEM','Class').id())"
                ],
                $memo:"For those [xui.absList] profiles only"
            },
            getKey:{
                $desc:"Gets the profile's main key from a given DOM id",
                $rtn:"String",
                $paras:[
                    "id [Required] :String, DOM id"
                ],
                $snippet:[
                    "var pro=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:');alert(pro.getKey('xui.UI.TreeBar:a:') )"
                ]
            },
            getSubId:{
                $desc:"Gets the profile sub id string from a given DOM id",
                $rtn:"String",
                $paras:[
                    "id [Required] :String, item id"
                ],
                $snippet:[
                    "var pro=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:');alert(pro.getSubId('xui.UI.TreeBar:a:ab') )"
                ]
            },
            clearCache:{
                $desc:"Clears the profile cache Object",
                $rtn:"[self]",
                $memo:"Usually, we do not need to call this function manually"
            },
            pickSubId:{
                $desc:"Picks a sub id string from the inner visual pool, according to a specified key",
                $rtn:"String",
                $paras:[
                    "key [Required] : String, key string"
                ],
                $snippet:[
                    "var profile=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:'), id1=profile.pickSubId('items'), id2=profile.pickSubId('items');profile.reclaimSubId(id1,'items');var id3=profile.pickSubId('items');alert(id1+':'+id2+':'+id3);"
                ],
                $memo:"Usually, we do not need to call this function manually"
            },
            reclaimSubId:{
                $desc:"Reclaim a specified id string to the inner visual pool",
                $paras:[
                    "id [Required] : String, id string",
                    "key [Required] : String, key string"
                ],
                $snippet:[
                    "var profile=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:'), id1=profile.pickSubId('items'), id2=profile.pickSubId('items');profile.reclaimSubId(id1,'items');var id3=profile.pickSubId('items');alert(id1+':'+id2+':'+id3);"
                ],
                $memo:"Usually, we do not need to call this function manually"
            },
            linkParent:{
                $desc:"Links to an UIProfile as parent UIProfile",
                $rtn:"[self]",
                $paras:[
                    "parentProfile [Required] : UIProfile, the parent UIProfile",
                    "linkId [Optional] : String, the link id"
                ],
                $memo:"Usually, we do not need to call this function manually"
            },
            unlinkParent:{
                $desc:"To unlink the parent UIProfile",
                $rtn:"[self]",
                $memo:"Usually, we do not need to call this function manually"
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","Template"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Template Class",
        getFromDom:{
            $desc:"Gets a template Object according to a given DOM element or id",
            $rtn:"xui.Template",
            $paras:[
                "id [Required] : String, a DOM element or id"
            ],
            $snippet:[
                "var id='xui.temp.2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var t=new xui.Template({'':'<div>{caption}</div>'},{id:'1',caption:'cap'}); t.setDomId('abc'); xui(id).append(t); alert(xui.Template.getFromDom('abc').serialize());"+
                "}"
            ]
        },
        constructor:{
            $desc:"A template for creating interactive HTML",
            $paras:[
                "template [Optional] : key/value pairs, a set of templates",
                "properties [Optional] : key/value pairs, a set of properties",
                "events [Optional] : key/value pairs, a set of events",
                "domId [Optional] : String, target dom id"
            ],
            $snippet:[
                "var id='xui.temp.t1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
            "\n//Create a xui.Template, and append to dom directly.\n"+
            "var t=new xui.Template({'':'<div  onclick=[$e]>{pre} {items} {next}</div>',items:'<p onclick=[$e] onmouseover=[$e]>{id} : {caption}</p>'},{pre:'{{{',next:'}}}',items:[{id:1,caption:'a1'},{id:2,caption:'a2'}]},{onClick:function(p){alert(p.domId)},items:{onClick:function(p,e,s){alert(p.domId);}}}, 't_t');"+
                "xui(id).append(t);"+
                "}"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            renderId:{
                $desc:"String, Indicates whether the template is rendered or not"
            },
            show:{
                $desc:"To show the template",
                $rtn:"[self]",
                $paras:[
                     "parent [Optional] : String/Element/xui.Dom the parent DOM node"
                ]
            },
            refresh:{
                $desc:"To refresh the current tempalte",
                $rtn:"[self]",
                $snippet:[
                "var id='xui.temp.0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var t=new xui.Template({'':'<div>{caption}</div>'},{id:'1',caption:'cap'}); t.setDomId('t_2'); xui(id).append(t); "+
                    "xui.asyRun(function(){t.setProperties({id:'2',caption:'cap2'});t.refresh();},1000);"+
                "}"
                ]
            },
            getRootNode:{
                $desc:"Gets DOM element from the current template, if it's in DOM already",
                $rtn:"Element",
                $snippet:[
                "var id='xui.temp.2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var t=new xui.Template({'':'<div>{caption}</div>'},{id:'1',caption:'cap'}); t.setDomId('t_2'); xui(id).append(t); alert(t.getRootNode());"+
                "}"
                ]
            },
            getItem:{
                $desc:"To get item data from a dom element",
                $rtn:"Object",
                $paras:[
                    "src [Required] : Element"
                ],
                $snippet:[
                "var id='xui.temp.0.1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "var t=new xui.Template({'':'<div>{items}</div>','items':'<span onclick=[$e]>{con}</span>'},{items:[{id:'a',con:'a'},{id:'b',con:'b'}]},{items:{onClick:function(p,e,src){alert(xui.serialize(p.getItem(src)))}}}); t.setDomId('t_3'); xui(id).append(t);"+
                "}"
                ]
            },
            toHtml:{
                $desc:"To build HTML string from the current template, and returns it",
                $rtn:"String",
                $paras:[
                    "properties [Optional] : key/value(any) pairs"
                ],
                $snippet:[
                    "var t=new xui.Template({'':'<div>{caption}</div>'},{id:'1',caption:'cap'}); alert(t.toHtml())"
                ]
            },
            serialize:{
                $desc:"To serialize the current Object to a string representation",
                $rtn:"String",
                $snippet:[
                    "var t=new xui.Template({'':'<div>{caption}</div>'},{id:'1',caption:'cap'}); alert(t.serialize())"
                ]
            },
            destroy:{
                $desc:"To destroy the current template"
            },
            getDomId:{
                $desc:"Gets DOM id from the current template",
                $rtn:"String",
                $snippet:[
                    "var t=new xui.Template({'':'<div>{caption}</div>'},{id:'1',caption:'cap'}); t.setDomId('t_1'); alert(t.getDomId())"
                ]
            },
            render:{
                $desc:"To render the current template to DOM element",
                $rtn:"[self]",
                $snippet:[
                "var id='xui.temp.3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var t=new xui.Template({'':'<div>{caption}</div>'},{id:'1',caption:'cap'}); t.setDomId('t_3'); xui(id).append(t);"+
                "}"
                ]
            },
            renderOnto:{
                $desc:"To render the current template to DOM, and replace an existing DOM element",
                $paras:[
                    "node [Required] : DOM element or DOM id, the parent node"
                ],
                $snippet:[
                "var id='xui.temp.4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><div id=\"renderOnto\"></div><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var t=new xui.Template({'':'<div>{caption}</div>'},{id:'1',caption:'cap'}); t.setDomId('t_4'); t.renderOnto('renderOnto');"+
                "}"
                ]
            },
            setDomId:{
                $desc:"Set DOM id to the current template",
                $rtn:'[self]',
                $paras:[
                    "id [Required] : String, DOM id"
                ],
                $snippet:[
                "var id='xui.temp.5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var t=new xui.Template({'':'<div>{caption}</div>'},{id:'1',caption:'cap'}); t.setDomId('t_5'); xui(id).append(t);"+
                "}"
                ]
            },
            setEvents:{
                $desc:"Sets events to the current template",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : String or Object",
                    "value [Optional] : Function, the event function"
                ],
                $snippet:[
                "var id='xui.temp.tt1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
            "\n// \n"+
        "var t=new xui.Template(); t.setTemplate({'':'<div  onclick=[$e]>{pre} {items} {next}</div>',items:'<p onclick=[$e] onmouseover=[$e]>{id} : {caption}</p>'}).setProperties({pre:'{{{',next:'}}}',items:[{id:1,caption:'a1'},{id:2,caption:'a2'}]}).setEvents('onClick',function(p){alert(p.domId)}).setEvents('items',{onClick:function(p,e,s){alert(p.domId);}}); xui(id).append(t);"+
                "}"
                ]
            },
            setProperties:{
                $desc:"Sets properties to the current template",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : String or Object",
                    "value [Optional] : Object"
                ],
                $snippet:[
                "var id='xui.temp.tt2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
            "\n// \n"+
        "var t=new xui.Template(); t.setTemplate({'':'<div  onclick=[$e]>{pre} {items} {next}</div>',items:'<p onclick=[$e] onmouseover=[$e]>{id} : {caption}</p>'}).setProperties({pre:'{{{',next:'}}}'}).setProperties('items',[{id:1,caption:'a1'},{id:2,caption:'a2'}]).setEvents({onClick:function(p){alert(p.domId)},items:{onClick:function(p,e,s){alert(p.domId);}}}); xui(id).append(t);"+
                "}"
                ]
            },
            setTemplate:{
                $desc:"Sets template to the current template",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : String or Object",
                    "value [Optional] : String, the template string"
                ],
                $snippet:[
                "var id='xui.temp.tt3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
            "\n// \n"+
        "var t=new xui.Template(); t.setTemplate('<div  onclick=[$e]>{pre} {items} {next}</div>').setTemplate('items','<p onclick=[$e] onmouseover=[$e]>{id} : {caption}</p>').setProperties({pre:'{{{',next:'}}}',items:[{id:1,caption:'a1'},{id:2,caption:'a2'}]}).setEvents({onClick:function(p){alert(p.domId)},items:{onClick:function(p,e,s){alert(p.domId);}}}); xui(id).append(t);"+
                "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","Module"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Module Class",
        constructor:{
            $desc:"xui.Module constructor",
            $paras:[
                "properties [Optional] : key/value(any) pairs. the Module properties Object. Default is {}",
                "events [Optional] : key/value(Function) pairs. the Module event Object. Default is {}",
                "host [Optional] : Object. the Module's host Object. Default is itself"
            ],
            $snippet:[
                "var order=[], module = new xui.Module({"+
                "    $1:1"+
                "  },"+
                "  {"+
                "    beforeCreated:function(){order.push('beforeCreated'); xui.log('beforeCreated');},"+
                "    onCreated:function(){order.push('onCreated'); xui.log('onCreated');},"+
                "    onIniResource:function(){order.push('onIniResource'); xui.log('onIniResource');},"+
                "    beforeIniComponents:function(){order.push('beforeIniComponents'); xui.log('beforeIniComponents');},"+
                "    afterIniComponents:function(){order.push('afterIniComponents'); xui.log('afterIniComponents');},"+
                "    onLoadRequiredClass:function(c,t,uri,key,layer){order.push('onLoadRequiredClass: '+key); xui.log('onLoadRequiredClass: '+key);},"+
                "    onReady:function(){order.push('onReady'); xui.log('onReady');},"+
                "    onRender:function(module){order.push('onRender'); xui.log('onRender'); module.dialog1.setHtml(order.join('<br />'));}"+
                "  });"+
                "module.Required=['xui.UI','xui.Date','xui.UI.Dialog','xui.UI.Button'];"+
                "module.iniComponents=function(){order.push('iniComponents'); return (new xui.UI.Dialog()).setHost(this, 'dialog2').setWidth(150).setHeight(150).get() };"+
                "module.iniResource=function(){order.push('iniResource'); };"+
                "module.iniExModules=function(){order.push('iniExModules'); };"+

                "var abox=module.getComponents();"+
                "abox.merge((new xui.UI.Dialog()).setHost(module, 'dialog1'));"+
                "module.setComponents(abox);"+

                "module.show(function(err,module){"+
                "   order.push('onEnd'); "+
                "});",

                "xui.Class('App1','xui.Module',{" +
                "    Instance:{" +
                "        Required : ['xui.UI', 'xui.Date','xui.UI.Dialog', 'xui.UI.Button']," +
                "        events:{" +
                "            beforeCreated : function(module){" +
                "                module._info=[];" +
                "                module._info.push('beforeCreated');" +
                "                xui.log('beforeCreated');" +
                "            }," +
                "            onCreated : function(module){" +
                "                module._info.push('onCreated');" +
                "                xui.log('onCreated');" +
                "            }," +
                "            onIniResource : function(module){" +
                "                module._info.push('onIniResource');" +
                "                xui.log('onIniResource');" +
                "            }," +
                "            beforeIniComponents : function(module){" +
                "                module._info.push('beforeIniComponents');" +
                "                xui.log('beforeIniComponents');" +
                "            }," +
                "            afterIniComponents : function(module){" +
                "                module._info.push('afterIniComponents');" +
                "                xui.log('afterIniComponents');" +
                "            }," +
                "            onLoadRequiredClass : function(module, t, uri, key, layer){" +
                "                module._info.push('onLoadRequiredClass: ' + key);" +
                "                xui.log('onLoadRequiredClass: ' + key);" +
                "            }," +
                "            onReady : function(module){" +
                "                module._info.push('onReady');" +
                "                xui.log('onReady');" +
                "            }," +
                "            onRender : function(module){" +
                "                module._info.push('onRender');" +
                "                xui.log('onRender');" +
                "                module.dialog1.setHtml(module._info.join('<br />'));" +
                "            }" +
                "        }," +
                "        customAppend:function(parent){" +
                "            this.dialog1.show(parent);" +
                "        }," +
                "        iniComponents : function(){" +
                "            this._info.push('iniComponents');\n" +
                "            // [[Code created by CrossUI RAD Tools\n" +
                "            var host=this, children=[], append=function(child){children.push(child.get(0))};" +
                "            append((new xui.UI.Dialog)" +
                "                .setHost(host,'dialog1')" +
                "                .setWidth(450)" +
                "                .setHeight(450)" +
                "            );" +
                "            return children;\n" +
                "            // ]]Code created by CrossUI RAD Tools\n" +
                "        }," +
                "        iniResource : function(){" +
                "            this._info.push('iniResource');" +
                "        }," +
                "        iniExModules : function(){" +
                "            this._info.push('iniExModules');" +
                "        }" +
                "    }" +
                "});" +
                "var module = new App1;" +
                "module.show();",

                "xui.Class('App2','xui.Module',{" +
                "    Instance:{" +
                "        Required : ['xui.UI','xui.UI.Dialog']," +
                "        events:{" +
                "            beforeCreated : '_trace'," +
                "            onCreated : '_trace'," +
                "            onIniResource : '_trace'," +
                "            beforeIniComponents : '_trace'," +
                "            afterIniComponents : '_trace'," +
                "            onLoadRequiredClass : '_trace'," +
                "            onReady : '_trace'," +
                "            onRender : '_trace'," +
                "        }," +
                "        customAppend:function(parent){" +
                "            this.dialog1.show(parent);" +
                "        }," +
                "        iniComponents : function(){" +
                "            this._info.push('iniComponents');\n" +
                "            // [[Code created by CrossUI RAD Tools\n" +
                "            var host=this, children=[], append=function(child){children.push(child.get(0))};" +
                "            append((new xui.UI.Dialog)" +
                "                .setHost(host,'dialog1')" +
                "                .setWidth(350)" +
                "                .setHeight(450)" +
                "            );" +
                "            return children;\n" +
                "            // ]]Code created by CrossUI RAD Tools\n" +
                "        }," +
                "        iniResource : function(){" +
                "            this._info.push('iniResource');" +
                "        }," +
                "        iniExModules : function(){" +
                "            this._info.push('iniExModules');" +
                "        }, " +
                "        _trace : function(module, threadid){" +
                "            module._info.push(module.$lastEvent);" +
                "        }" +
                "    }" +
                "});" +
                "var module = new App2;" +
                "module._info=[];"+
                "module.show(function(err,module){module.dialog1.setHtml(module._info.join('<br />'));});"
            ]
        },
        'load':{
            $desc:"Loads a xui.Module Object code from remote file first, creates it, and returns it",
            $paras:[
                "cls [Required] : String, the full class path name(e.g'xui.App')",
                "onEnd [Optional]: Function(err:Error/String, module: xui.Module). This function will be called after the process is end",
                "lang [Optional] : String, language name.(e.g'en')",
                "theme [Optional] : String, theme name..(e.g'vista')",
                "showUI [Optional] : Boolean, indicates whether or not it shows the Module UI. Default is true;"
            ],
            $snippet:[
                "////Uses the beblow line to load a specified application, and append its UI to 'document.body' if its UI exits. \n"+
                "//xui.Module.load('RootClassName',function(){alert('ok')},'en')\n",
                "xui.Module.load('App.Test1',function(){alert('ok')});",
                "xui.Module.load('App.Test1',function(err,module){module.show(function(){alert('ok')},SPA.mainLayout,'main')},null,false)"
            ]
        },
        getFromDom:{
            $desc:"Gets xui.Module instance from a DOM node or xid",
            $paras:[
                "id [Required] : String, DOM node or id"
            ]
        },
        getClsFromDom:{
            $desc:"Gets xui.Module class name from a DOM node or xid",
            $paras:[
                "id [Required] : String, DOM node or id"
            ]
        },
        getAllInstance:{
            $desc:"Get all instance"
        },
        destroyAll:{
            $desc:"Get all instance"
        },
        postMessage:{
            $desc:"Post message to a Module",
            $paras:[
                "cls [Required] : String, the Module's class name",
                "msg1 [Required]: Object, message 1",
                "msg2 [Optional]: Object, message 2",
                "msg3 [Optional]: Object, message 3",
                "msg4 [Optional]: Object, message 4",
                "msg5 [Optional]: Object, message 5",
                "msg6 [Optional]: Object, message 6",
                "msg7 [Optional]: Object, message 7",
                "msg8 [Optional]: Object, message 8",
                "msg9 [Optional]: Object, message 9",
                "sender [Optional] : Object, the message sender"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            postMessage:{
                $desc:"Post message to a Module",
                $paras:[
                    "msg1 [Required]: Object, message 1",
                    "msg2 [Optional]: Object, message 2",
                    "msg3 [Optional]: Object, message 3",
                    "msg4 [Optional]: Object, message 4",
                    "msg5 [Optional]: Object, message 5",
                    "msg6 [Optional]: Object, message 6",
                    "msg7 [Optional]: Object, message 7",
                    "msg8 [Optional]: Object, message 8",
                    "msg9 [Optional]: Object, message 9",
                    "sender [Optional] : Object, the message sender"
                ]
            },
            autoDestroy:{
                $desc:"To determine whether the first inner UI control's detory will trigger module's destroy or not",
                $rtn:"Boolean"
            },
            isDestroyed:{
                $desc:"To determine whether the current object is destroyed or not"
            },
            fireEvent:{
                $desc:"Fires event",
                $rtn:"Object",
                $paras:[
                    "event [Required] : String, event's name",
                    "args [Optional]: Array, event funtion's arumgnets",
                    "host [Optional]: Object, event funtion's scope object"
                ],
                $snippet:[
                 "xui.Class('Temp.Demo', 'xui.Module',{Instance:{trigger:function(){this.fireEvent('onCall',['a','b','c'])}}});"+
                 "xui.ModuleFactory.getModule('Temp.Demo',function(){this.setEvents('onCall',function(){alert(xui.toArr(arguments))});this.trigger();});"
                ]
            },
            render:{
                $desc:'To render the inner UI Components',
                $rtn:"[self]",
                $demo:"You have to call this function after the module was created. And xui.Module.show will trigger this function automatically"
            },
            getAlias:{
                $desc:"Gets alias",
                $rtn:'String'
            },
            setAlias:{
                $desc:"Sets alias",
                $rtn:'[self]',
                $paras:[
                    "str [Optional] : String, the alias value"
                ]
            },
            AddComponents:{
                $desc:"Adds components to the current Module",
                $rtn:"[self]",
                $paras:[
                    "obj [Reqired] : xui.absObj Object"
                ]
            },
            setComponents:{
                $desc:"Sets the current Module's Components",
                $rtn:"[self]",
                $paras:[
                    "obj [Reqired] : xui.absObj Object"
                ],
                $snippet:[
                    "xui.SC('App.Test1',function(){var module=new this; module.create(function(module){module.setComponents((new xui.UI.Button()).setHost(window,'btn') ); alert(module.getComponents().get(0).alias); });},false);"
                ]
            },
            getComponents:{
                $desc:"Gets all first layer Components in a specified xui.Module Object",
                $rtn:"xui.absObj",
                $snippet:[
                    "xui.Class('App1','xui.Module',{" +
                    "   Instance:{"+
                    "        iniComponents : function(){" +
                    "            var host=this, children=[], append=function(child){children.push(child.get(0))};" +
                    "            append((new xui.DataBinder)" +
                    "                .setHost(host,'db1')" +
                    "                .setName('db1')" +
                    "            );" +
                    "            append((new xui.UI.Dialog)" +
                    "                .setHost(host,'dialog1')" +
                    "                .setWidth(350)" +
                    "                .setHeight(450)" +
                    "            );" +
                    "            return children;\n" +
                    "        }" +
                    "   }" +
                    "});"+
                    "var module=new App1;"+
                    "module.create(function(module){alert(module.getComponents().get(0).alias);});"
                ]
            },
            getDataBinders:{
                $desc:"Gets all DataBinder objects in a specified xui.Module",
                $rtn:"Array"
            },
            getUIComponents:{
                $desc:"Gets all first layer UI Components in a specified xui.Module",
                $rtn:"xui.UI",
                $snippet:[
                    "xui.Class('App1','xui.Module',{" +
                    "   Instance:{"+
                    "        iniComponents : function(){" +
                    "            var host=this, children=[], append=function(child){children.push(child.get(0))};" +
                    "            append((new xui.DataBinder)" +
                    "                .setHost(host,'db1')" +
                    "                .setName('db1')" +
                    "            );" +
                    "            append((new xui.UI.Dialog)" +
                    "                .setHost(host,'dialog1')" +
                    "                .setWidth(350)" +
                    "                .setHeight(450)" +
                    "            );" +
                    "            return children;\n" +
                    "        }" +
                    "   }" +
                    "});"+
                    "var module=new App1;"+
                    "module.create(function(module){alert(module.getUIComponents().get(0).alias);});"
                ]
            },
            getAllComponents:{
                $desc:"Gets all Components in a specified xui.Module Object",
                $rtn:"xui.absObj"
            },
            getProfile:{
                $desc:"Collects and gets the profile structure map of all UI components",
                $rtn:"Object, key/value pairs "
            },
            setProfile:{
                $desc:"Sets profile structure map of all UI components",
                $rtn:"[self]",
                 $paras:[
                    "profiles [Required] : Object, key/value pairs "
                ]
            },
            getData:{
                $desc:"Collects and gets the data struct map of all UI components",
                $rtn:"Object, key/value pairs "
            },
            setData:{
                $desc:"Sets data struct map of all UI components",
                $rtn:"[self]",
                 $paras:[
                    "data [Required] : Object, key/value pairs "
                ]
            },
            getValue:{
                $desc:"Collects and gets value map of all UI components",
                $rtn:"Object, key/value pairs "
            },
           setValue:{
                $desc:"Sets value map of all UI components",
                $rtn:"[self]",
                 $paras:[
                    "values [Required] : Object, key/value pairs "
                ]
            },
            getUIValue:{
                $desc:"Collects and gets UI value map of all UI components",
                $rtn:"Object, key/value pairs "
            },
            setUIValue:{
                $desc:"Sets UI value map of all UI components",
                $rtn:"[self] ",
                 $paras:[
                    "values [Required] : Object, key/value pairs "
                ]
            },
            reBindProp:{
                $desc:"To rebind each control's prop with specified data map",
                 $rtn:"[self]",
                $paras:[
                    "dataMap [Optional] : Object.  the rebinder map"
                ]
            },
            getEvents:{
                $desc:"Gets all events or a specified event from a Module Object",
                $rtn:"Object, String or Function",
                $paras:[
                    "key [Optional] : String"
                ],
                $snippet:[
                    "xui.SC('App.Test1',function(){var module=new this; module.create(function(module){alert(xui.serialize(module.getEvents()))});},false);",
                    "xui.SC('App.Test1',function(){var module=new this; module.create(function(module){alert(xui.serialize(module.getEvents('onReady')))});},false);"
                ]
            },
            setEvents:{
                $desc:"Sets a set of event functions(or a specified event function with a key) to the Module Object",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : Object/String, A set of event functions or key",
                    "value [Optional] : Function, event function"
                ],
                $snippet:[
                    "xui.SC('App.Test1',function(){var module=new this; module.create(function(module){module.setEvents('onA',function(){}); alert(module.getEvents('onA'))});},false);"
                ]
            },
           getHooks:{
                $desc:"Gets hooks",
                $rtn:"Object, Hash or Function",
                $paras:[
                    "key [Optional] : String"
                ]
            },
            setHooks:{
                $desc:"Sets hooks",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : String/Object",
                    "value [Optional] : Function, event function"
                ]
            },
            notifyHooks : {
                $desc:"To notify the hooks (trigger the hook callback function)",
                $rtn:"Object",
                $paras:[
                    "key [Required] : String",
                    "msg1 [Optional]: Object,  argument 1 for callback function",
                    "msg2 [Optional]: Object,  argument 2 for callback function",
                    "msg3 [Optional]: Object,  argument 3 for callback function",
                    "msg4 [Optional]: Object,  argument 4 for callback function",
                    "msg5 [Optional]: Object,  argument 5 for callback function",
                    "msg6 [Optional]: Object,  argument 6 for callback function",
                    "msg7 [Optional]: Object,  argument 7 for callback function",
                    "msg8 [Optional]: Object,  argument 8 for callback function",
                    "msg9 [Optional]: Object,  argument 9 for callback function"
                ]
            },
            applyExcelFormula:{
                $desc:"To apply formula to a specific simulated Excel cell",
                $rtn:"[self]",
                $paras:[
                    "profileTo [Optional] : xui.UIProfile. The specific simulated Excel cell's profile"
                ]
            },
            triggerExcelFormulas:{
                $desc:"To trigger simulated Excel cells' formula",
                $rtn:"[self]",
                $paras:[
                    "profileFrom [Optional] : xui.UIProfile. Only trigger those cells that can be affected by the specific cell"
                ]
            },
            create:{
                $desc:"Creates the Module Object in async mode",
                $paras:[
                    "onEnd [Optiona] : Function, the callback function, it will be executed once when the Module is created successfully",
                    "threadid [Optional] : String, the inner thread id. If is 'false', system will create the Module in sync mode"
                ],
                $snippet:[
                    "xui.SC('App.Test1',function(){var module=new this; module.create(function(module){alert('created!')});},false);"
                ]
            },
            customAppend:{
                $desc:"Appends UI to DOM. If returns false, all the UI components will be appended to DOM by 'show'",
                $paras:[
                    "parent [Required] : xui.UI, xui.UI ojbect, Element or xui.Dom Object",
                    "subId [Optional] : String, the sub id that determines the set of UIProfiles will be added to",
                    "left [Optional] : Number, the css left value",
                    "top [Optional] : Number, the css top value",
                    "threadid [Optional] : String, thread Id"
                ]
            },
            iniExModules:{
                $desc:"Give a chance to load other module",
                $paras:[
                    "module [Required] : xui.Module, module object",
                    "threadid [Optional] : String, thread Id"
                ]
            },
            iniResource:{
                $desc:"Give a chance to load other resource",
                $paras:[
                    "module [Required] : xui.Module, module object",
                    "threadid [Optional] : String, thread Id"
                ]
            },
            show:{
                $desc:"Shows the module Object",
                $paras:[
                    "onEnd [Optiona] : Function, the callback function, it will be executed once when the module is created successfully",
                    "parent [Optional] : String/Element/xui.Dom, the parent DOM node or xui.UI Object",
                    "subId [Optional] : String, this parameter valid when parent is xui.UI only. The sub id that determines the [target] will be added to which sub DOM node. This parameter can be [false] too, that means the [target] will be appended to DOM only, no link created between the [target] UIProfiles and the parent UIProfile",
                    "threadid [Optional] : String, the inner thread id. If is 'false', system will show the module in sync mode"
                ],
                $snippet:[
                    "xui.SC('App.Test1',function(){var module=new this; module.show(function(){});},false);"
                ]
            },
            destroy:{
                $desc:"Destroys the current Object",
                $memo:"Usually, we do not need to call this function manually"
            },
            iniComponents:{
                $desc:"Creates the inner Components and return the set of Components(xui.absObj Object)",
                $rtn:"Array, a set of xui.absObj objects",
                $snippet:[
                    "xui.Class('App1','xui.Module',{" +
                    "   Instance:{"+
                    "        iniComponents : function(){" +
                    "            var host=this, children=[], append=function(child){children.push(child.get(0))};" +
                    "            append((new xui.DataBinder)" +
                    "                .setHost(host,'db1')" +
                    "                .setName('db1')" +
                    "            );" +
                    "            append((new xui.UI.Dialog)" +
                    "                .setHost(host,'dialog1')" +
                    "                .setWidth(350)" +
                    "                .setHeight(450)" +
                    "            );" +
                    "            return children;\n" +
                    "        }" +
                    "   }" +
                    "});"+
                    "var module=new App1;"+
                    "module.create(function(module){alert(module.getUIComponents().get(0).alias);});"
                ]
            },
            getProperties:{
                $desc:"Gets all Properties or a specified Properties from a module Object",
                $rtn:"Object",
                $paras:[
                    "key [Optional] : String"
                ],
                $snippet:[
                    "xui.SC('App.Test1',function(){var module=new this; module.create(function(module){alert(xui.serialize(module.getProperties()))});},false);",
                    "xui.SC('App.Test1',function(){var module=new this; module.create(function(module){alert(module.getProperties('p1'))});},false);"
                ]
            },
            setProperties:{
                $desc:"Sets a set of Properties(or an specified Property with a key) to the current module Object",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : Object/String, A set of Properties or key",
                    "value [Optional] : Object, a property value"
                ],
                $snippet:[
                    "xui.SC('App.Test1',function(){var module=new this; module.create(function(module){module.setProperties('p3','p3 value'); alert(module.getProperties('p3'))});},false);"
                ]
            },
            setHost:{
                $desc:"Sets the host Object to the module Object",
                $rtn:"[self]",
                $paras:[
                    "host [Requied] : Object, the host Object",
                    "alias [Optional] : String, the alias name"
                ],
                $snippet:[
                    "xui.SC('App.Test1',function(){var module=new this; module.create(function(module){module.setHost(window,'module_alias'); alert(module.getHost()===window); alert(window.module_alias)});},false);"
                ]
            },
            getHost:{
                $desc:"Gets the host Object",
                $rtn:"Object",
                $snippet:[
                    "xui.SC('App.Test1',function(){var module=new this; module.create(function(module){module.setHost(window,'module_alias'); alert(module.getHost()===window); alert(window.module_alias)});},false);"
                ]
            },

            beforeCreated:{
                $desc:'Fired before module is created',
                $paras:[
                    'module : xui.Module',
                    'threadid : String, thread id'
                ],
                $memo:'See constructor'
            },
            onCreated:{
                $desc:'Fired when module is created',
                $paras:[
                    'module : xui.Module',
                    'threadid : String, thread id'
                ],
                $memo:'See constructor'
            },
            beforeShow:{
                $desc:'Fired before module is showed',
                $paras:[
                    'module : xui.Module'
                ]
            },
            afterShow:{
                $desc:'Fired after module is showed',
                $paras:[
                    'module : xui.Module'
                ]
            },
            onHookKey:{
                $desc:'Fired when the hook key down/up',
                $paras:[
                    'module : xui.Module',
                    'key : Object, key object',
                    'keyDown: Boolen, down or up',
                    "e : Event, event object"
                ]
            },
            onFragmentChanged:{
                $desc:'Fired when the URL  Fragement Identifier changed',
                $paras:[
                    'module : xui.Module',
                    'fragment : String, URL fragment',
                    'init : Boolen, initialized',
                    'newAdd: Function, the extra callback'
                ]
            },
            onMessage:{
                $desc:'Fired when receive a message',
                $paras:[
                    'module : xui.Module',
                    "msg1: Object, message object 1",
                    "msg2: Object, message object 2",
                    "msg3: Object, message object 3",
                    "msg4: Object, message object 4",
                    "msg5: Object, message object 5",
                    "msg6: Object, message object 6",
                    "msg7: Object, message object 7",
                    "msg8: Object, message object 8",
                    "msg9: Object, message object 9",
                    'source: Object, the message source'
                ]
            },
            onGlobalMessage:{
                $desc:'Fired when receive a global message',
                $paras:[
                    'id : String, message id',
                    "msg1: Object, message object 1",
                    "msg2: Object, message object 2",
                    "msg3: Object, message object 3",
                    "msg4: Object, message object 4",
                    "msg5: Object, message object 5",
                    "msg6: Object, message object 6",
                    "msg7: Object, message object 7",
                    "msg8: Object, message object 8",
                    "msg9: Object, message object 9"
                ]
            },
            onIniResource:{
                $desc:'Fired when module loads resources',
                $paras:[
                    'module : xui.Module',
                    'threadid : String, thread id',
                    'key: String, base class name'
                ],
                $memo:'See constructor'
            },
            beforeIniComponents:{
                $desc:'Fired beofre module Object initializes inner components',
                $paras:[
                    'module : xui.Module',
                    'threadid : String, thread id'
                ],
                $memo:'See constructor'
            },
            afterIniComponents:{
                $desc:'Fired after module Object initializes inner components',
                $paras:[
                    'module : xui.Module',
                    'threadid : String, thread id'
                ],
                $memo:'See constructor'
            },
            onLoadRequiredClass:{
                $desc:'Fired when module loads requried Classes',
                $paras:[
                    'module : xui.Module',
                    'threadid : String, thread id',
                    "url: String, class url",
                    'key: String, class name',
                    'layer: String, class load deep'
                ],
                $memo:'See constructor'
            },
            onLoadRequiredClassErr:{
                $desc:'Fired when module failed to load requried Classes',
                $paras:[
                    'module : xui.Module',
                    'threadid : String, thread id',
                    'err: Object, error',
                    'layer: String, class load deep'
                ]
            },
            onReady:{
                $desc:'Fired when module is ready',
                $paras:[
                    'module : xui.Module',
                    'threadid : String, thread id'
                ],
                $memo:'See constructor'
            },
            onModulePropChange:{
                $desc:'Fired when module properties were chagned',
                $paras:[
                    'module : xui.Module'
                ]
            },
            onRender:{
                $desc:'Fired when module is added to DOM',
                $paras:[
                    'module : xui.Module',
                    'threadid : String, thread id'
                ],
                $memo:'See constructor'
            }
        }
    });


    xui.set(xui.Locale,["en","doc","xui","ModuleFactory"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.ModuleFactory Class(static)",
        setProfile:{
            $desc:"Sets Modulefactory profile",
            $rtn:'xui.ModuleFactory',
            $paras:[
                "key [Required] : String or key/value pairs Object",
                "value [Optional] : String or key/value pairs Object"
            ],
            $snippet:[
                "xui.ModuleFactory.setProfile({test1:'App.Test1',test2:'App.Test2'});"+
                "xui.ModuleFactory.setProfile('test1','App.Test1');"+
                "xui.ModuleFactory.setProfile({test1:{cls:'App.Test1'},test2:{cls:'App.Test2'}});"+
                "xui.ModuleFactory.setProfile('test1',{cls:'App.Test1',properties:{dlgCaption:'dialog caption'}});"+
                "alert(xui.serialize(xui.ModuleFactory.getProfile()));"+
                "alert(xui.ModuleFactory.getProfile('test1'));"
            ]
        },
        getProfile:{
            $desc:"Gets Modulefactory profile",
            $rtn:'String/Object',
            $paras:[
                "key [Optional] : String"
            ],
            $snippet:[
                "xui.ModuleFactory.setProfile({test1:'App.Test1',test2:'App.Test2'});"+
                "alert(xui.ModuleFactory.getProfile());"+
                "alert(xui.ModuleFactory.getProfile('test1'));"
            ]
        },
        destroyAll:{
            $desc:"Destroys all the Modules in ModuleFactory",
            $snippet:[
                "xui.SC('App.Test1',function(){xui.ModuleFactory.setModule('test1',(new this));},false);"+
                "xui.SC('App.Test2',function(){xui.ModuleFactory.setModule('test2',(new this));},false);"+
                "xui.ModuleFactory.destroyAll();"+
                "alert(xui.ModuleFactory.getModuleFromCache('test'));"
            ]
        },
        getModuleFromCache:{
            $desc:"Gets a Module Object from cache directly if it exists",
            $rtn:"xui.Module",
            $paras:[
                "id [Required] : String, the Module id"
            ],
            $snippet:[
                "xui.SC('App.Test1',function(){xui.ModuleFactory.setModule('test1',(new this));},false);"+
                "xui.SC('App.Test2',function(){xui.ModuleFactory.setModule('test2',(new this));},false);"+
                "alert(xui.ModuleFactory.getModuleFromCache('test1').KEY);"
            ]
        },
        getModule :{
            $desc:"Gets a Module Object from cache directly if it exists, or loads the Module code first, creates the Module and returns it",
            $rtn:"xui.Module",
            $paras:[
                "cls [Required] : String, the Module class",
                "onEnd [Optional] : Function(err:Error/String, Module: xui.Module, threadid:String), the callback function, it will be executed once when the Module is created successfully",
                "threadid [Optional] : String, the inner threadid",
                "cached [Optional] : Boolean, Default is true. If cached is false, that indicates ModuleFactory won't get it from the Module cache, and won't cache the result",
                "properties [Optional] : Object, key/value pairs, module's properties",
                "events [Optional] : Object, key/value pairs, module's events"
            ],
            $snippet:[
                "xui.ModuleFactory.getModule('App.Test1',function(){alert('The Module loaded successfully')});",

                "xui.ModuleFactory.destroyAll();"+
                "xui.ModuleFactory.setProfile({test1:{cls:'App.Test1',properties:{key1:1},events:{ev1:function(){alert(2)}}},test2:'App.Test2'});"+
                "xui.ModuleFactory.getModule('test1',function(){alert('The Module loaded successfully');alert(this.properties.key1); this.events.ev1();});"
            ]
        },
        setModule:{
            $desc:"Sets the Module Object to the cache with a specified id string",
            $rtn:"xui.ModuleFactory",
            $paras:[
                "id [Required] : String, the Module id",
                "obj [Required] : Object, the Module Object"
            ],
            $snippet:[
                "xui.SC('App.Test1',function(){xui.ModuleFactory.setModule('test1',(new this));},false);"+
                "xui.SC('App.Test2',function(){xui.ModuleFactory.setModule('test2',(new this));},false);"+
                "alert(xui.ModuleFactory.getModuleFromCache('test1').KEY);"
            ]
        },
        newModule :{
            $desc:"Creates a new Module Class if the Class exists, or loads the Module Class code first, creates it, and returns it",
            $paras:[
                "cls [Required] : String, the Module Class path name",
                "onEnd [Optional] : Function(err:Error/String, module: xui.Module, threadid:String), the callback function, it will be executed once when the Module is created successfully",
                "threadid [Optional] : String, the inner threadid",
                "properties [Optional] : Object, key/value pairs, module's properties",
                "events [Optional] : Object, key/value pairs, module's events"
            ],
            $snippet:[
                "xui.ModuleFactory.destroyAll();"+
                "xui.ModuleFactory.newModule('App.Test1',function(){alert('The module loaded successfully')});"
            ]
        },
        prepareModules:{
            $desc:"Loads and creates a set of Modules in the background, those Modules needs to be defined in the profile first",
            $rtn:"xui.ModuleFactory",
            $snippet:[
                "//xui.ModuleFactory.setProfile({test1:'App.Test1',test2:'App.Test2'});\n"+
                "//xui.ModuleFactory.prepareWidgets(['test1','test2']);"
            ]
        },
        storeModule:{
            $desc:"Stores a specified Module UI. (Detaches it from its parent Node, and saves it to a hidden div.)",
            $paras:[
                "id [Required] : the Module id in xui.ModuleFactory profile"
            ],
            $snippet:[
                "xui.ModuleFactory.destroyAll();"+
                "xui.ModuleFactory.setProfile('test1',{cls:'App.Test1',properties:{dlgCaption:'dialog caption'}});"+
                "xui.ModuleFactory.getModule('test1',function(){ this.showDlg(); xui.asyRun(function(){xui.ModuleFactory.storeModule('test1')},1000); });"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","DomProfile"], {
        KEY:{$desc:"Class Name"}
    });

    xui.set(xui.Locale,["en","doc","xui","Timer"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Timer Class",
        constructor:{
            $desc:"Creates a timer Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            destroy:{
                $desc:"To destroy the current Object",
                $memo:"Usually, we do not need to call this function manually"
            },
            getAutoStart:{
                $desc:"To determine whether the timer is auto-start or not",
                $rtn:"Boolean"
            },
            setAutoStart:{
                $desc:"To specify  whether the timer is auto-start or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getInteval:{
                $desc:"Gets the timer's inteval",
                $rtn:"Number"
            },
            setInteval:{
                $desc:"Sets the timer's inteval",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            onTime:{
                $desc:"When the timer is triggered regularly. If returns [false], the timer will end",
                $paras:[
                    "profile : xui.Profile",
                    "threadId : String"
                ]
            },
            onStart:{
                $desc:"When the timer start to run",
                $paras:[
                    "profile : xui.Profile",
                    "threadId : String"
                ]
            },
            onSuspend:{
                $desc:"When the timer was suspended",
                $paras:[
                    "profile : xui.Profile",
                    "threadId : String"
                ]
            },
            onEnd:{
                $desc:"When the timer ends",
                $paras:[
                    "profile : xui.Profile",
                    "threadId : String"
                ]
            }
        }
    });

     xui.set(xui.Locale,["cn","doc","xui","AnimBinder"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.AnimBinder Class",
        constructor:{
            $desc:"Creates a AnimBinder Object"
        },
        destroyAll:{
            $desc:"To destroy all xui.AnimBinder objects"
        },
        getFromName:{
            $desc:"To get a xui.AnimBinder Object from it's name",
            $rtn:'xui.AnimBinder',
            $paras:[
                "name [Required] : String, the AnimBinder name"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            setHost:{
                $desc:"Sets the host Object and alias",
                $rtn:'[self]',
                $paras:[
                    "host [Optional : Object, the host Object",
                    "alias [Optional : String, the alias value"
                ]
            },
            destroy:{
                $desc:"To destroy the current Object",
                $memo:"Usually, we do not need to call this function manually"
            },
            getFrames:{
                $desc:"Gets the animation's setting",
                $rtn:"Hash"
            },
            setFrames:{
                $desc:"Sets the animation's setting",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Hash",
                    $force
                ]
            },
            setName:{
                $desc:"Sets name property",
                $rtn:'[self]',
                $paras:[
                    "value [Required] : String, name string"
                ]
            },
            getName:{
                $desc:"Returns name property",
                $rtn:'String'
            },
            apply:{
                $desc:"Apply animation to a Dom element",
                $rtn:'[self]',
                $paras:[
                    "node [Required] : the target DOM element",
                    "onEnd [Optional]:  Function(threadid:String).  onEnd function"
                ]
            },
            onEnd:{
                $desc:"Fired when the animation ends",
                $paras:[
                    "profile : xui.Profile"
                ]
            },
            beforeFrame:{
                $desc:"Fired when the animation play on a specific frame. If returns [false],  the animation will stop",
                $paras:[
                    "profile : xui.Profile",
                    "frame : Object, the current  frame"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","APICaller"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.APICaller Class",
        WDSLCache:{
            $desc:"SOAP's WDSL cache"
        },
        constructor:{
            $desc:"Creates a APICaller Object"
        },
        destroyAll:{
            $desc:"To destroy all xui.AnimBinder objects",
            $snippet:[
                "//xui.AnimBinder.destroyAll()"
            ]
        },
        getFromName:{
            $desc:"To get a xui.AnimBinder Object from it's name",
            $rtn:'xui.AnimBinder',
            $paras:[
                "name [Required] : String, the AnimBinder name"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            setHost:{
                $desc:"Sets the host Object and alias",
                $rtn:'[self]',
                $paras:[
                    "host [Optional : Object, the host Object",
                    "alias [Optional : String, the alias value"
                ]
            },
            destroy:{
                $desc:"To destroy the current Object",
                $memo:"Usually, we do not need to call this function manually"
            },
            setName:{
                $desc:"Sets name property",
                $rtn:'[self]',
                $paras:[
                    "value [Required] : String, name string"
                ],
                $memo:"To see the 'getValue' snippets"
            },
            getName:{
                $desc:"Returns name property",
                $rtn:'String',
                $memo:"To see the 'getValue' snippets"
            },
            getAvoidCache:{
                $desc:"To determine whether will add a random parameter or not",
                $rtn:'[self]'
            },
            setAvoidCache:{
                $desc:"Specifies whether adding a random parameter or not",
                $rtn:'[self]',
                $paras:[
                    "value [Required] : Boolean"
                ]
            },
            getQueryURL:{
                $desc:"Gets the Web API URL",
                $rtn:"String"
            },
            setQueryURL:{
                $desc:"Sets the Web API URL",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getQueryUserName:{
                $desc:"Gets the Web API query user name",
                $rtn:"String"
            },
            setQueryUserName:{
                $desc:"Sets the Web API query user name",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getQueryPassword:{
                $desc:"Gets the Web API query password",
                $rtn:"String"
            },
            setQueryPassword:{
                $desc:"Sets the Web API query password",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getQueryMethod:{
                $desc:"Gets the query method for the Web API",
                $rtn:"String"
            },
            setQueryMethod:{
                $desc:"Sets the query method for the Web API",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String'auto','GET' or 'POST', default value is 'auto",
                    $force
                ]
            },
            getQueryAsync:{
                $desc:"To determine whether the  query action for the Web API is asynchronous or not",
                $rtn:"Boolean"
            },
            setQueryAsync:{
                $desc:"Specifys whether the query action for the Web API is asynchronous or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getFakeCookies:{
                $desc:"Gets the fake Cookies",
                $rtn:"Object"
            },
            setFakeCookies:{
                $desc:"Sets the fake Cookies",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getQueryHeader:{
                $desc:"Gets the request Header for this query",
                $rtn:"Object"
            },
            setQueryHeader:{
                $desc:"Sets the request Header for this query",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getRequestDataSource:{
                $desc:"Gets the datasource for request data",
                $rtn:"Array"
            },
            setRequestDataSource:{
                $desc:"Sets the datasource for request data",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array. [{type:'databinder', name:'xxx',path:'xx'},{type:'form', name:'xxx',path:'xx'}]",
                    $force
                ]
            },
            getResponseDataTarget:{
                $desc:"Gets the target to show the response data",
                $rtn:"Array"
            },
            setResponseDataTarget:{
                $desc:"Sets the target to show the response data",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array.  [{type:'alert',path:'xx'},{type:'log',path:'xx'},{type:'databinder', name:'xxx',path:'xx'},{type:'form', name:'xxx',path:'xx'}]",
                    $force
                ]
            },
            getResponseCallback:{
                $desc:"Gets the callback config for the response data",
                $rtn:"Array"
            },
            setResponseCallback:{
                $desc:"Sets the callback config for the response data",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array. [{type:'global',id:'xx'},{type:'host',id:'yy'}]",
                    $force
                ]
            },
            getQueryArgs:{
                $desc:"Gets the arguments for the Web API",
                $rtn:"Object"
            },
            setQueryArgs:{
                $desc:"Sets the arguments for the Web API",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ]
            },
            setQueryData:{
                $desc:"Sets the query data for the Web API",
                $rtn:"[self]",
                $paras:[
                    "data [Required] : Object, xxx",
                    "path [Optional] : String, the target path [a.b] => {a:{b:xxx}}"
                ]
            },
            getOAuth2Token:{
                $desc:"Gets the OAuth2Token for the Web API",
                $rtn:"String"
            },
            setOAuth2Token:{
                $desc:"Sets the OAuth2Token for the Web API",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getQueryOptions:{
                $desc:"Gets options[a set of key/value pairs that configure the request] for the Web API",
                $rtn:"Object"
            },
            setQueryOptions:{
                $desc:"Sets options[a set of key/value pairs that configure the request] for the Web API",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ]
            },
            getProxyType:{
                $desc:"Gets the proxy type for the Web API",
                $rtn:"String"
            },
            setProxyType:{
                $desc:"Sets the proxy type for the Web API",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. auto/Ajax/JSONP/IAjax\u00D6\u00AE\u00D2\u00BB,\u00C4\u00AC\u00C9\u008F\u00CE\u00AAauto",
                    $force
                ]
            },
            getRequestId:{
                $desc:"Gets the the Web API's request id",
                $rtn:"String"
            },
            setRequestId:{
                $desc:"Sets the the Web API's request id",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. A custom request Id",
                    $force
                ]
            },
            getRequestType:{
                $desc:"Gets the request data type for the Web API",
                $rtn:"String"
            },
            setRequestType:{
                $desc:"Sets the request data type for the Web API",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. HTTP,JSON,XML,SOAP \u00D6\u00AE\u00D2\u00BB",
                    $force
                ]
            },
            getResponseType:{
                $desc:"Gets the response data type for the Web API",
                $rtn:"String"
            },
            setResponseType:{
                $desc:"Sets the response data type for the Web API",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. JSON,XML,SOAP \u00D6\u00AE\u00D2\u00BB",
                    $force
                ]
            },
            invoke:{
                $desc:"To invoke the remoting call",
                $rtn:"[xui.absIO]",
                $paras:[
                    "onSuccess [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request is done successfully",
                    "onFail [Optional]: Function(response:Object, responsetype:String, threadid:String). A function to be executed whenever a request fails",
                    "onStart [Optional]: Function(threadid:String).  onStart function for the call",
                    "onEnd [Optional]:  Function(threadid:String).  onEnd function for the call",
                    "mode [Optional] : String, the function's mode ,in 'normal'(calls ajax only)/busy(calls and shows busy UI)/return(doesn't call, returns ajax object), the default value is 'normal'",
                    "threadid [Optional]: String, a thread id to be bound to the current request. [suspend the thread -> execute request -> resume thread]",
                    "options [Optional]: Object, a set of key/value pairs that configure the request"
                ]
            },
            beforeInvoke:{
                $desc:"Fired before invoke function is called. If returns false, invoke function will be ignored",
                $rtn:"Object",
                $paras:[
                    "profile : xui.Profile",
                    "requestId : String"
                ]
            },
            beforeData:{
                $desc:"Fired before data returns. If returns false, the further actions will be ignored",
                $paras:[
                    "profile : xui.Profile",
                    "rspData : Object, the data from remoting call",
                    "requestId : String"
                ]
            },
            onData:{
                $desc:"Fired when data returns",
                $paras:[
                    "profile : xui.Profile",
                    "rspData : Object, the data from remoting call",
                    "requestId : String"
                ]
            },
            onError:{
                $desc:"Fired when error raises",
                $paras:[
                    "profile : xui.Profile",
                    "rspData : Object, the data from remoting call",
                    "requestId : String"
                ]
            },
            afterInvoke:{
                $desc:"Fired after invoke function is called",
                $paras:[
                    "profile : xui.Profile",
                    "rspData : Object, the data from remoting call",
                    "requestId : String"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","DataBinder"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.DataBinder Class",
        constructor:{
            $desc:"Creates a databinder Object"
        },
        destroyAll:{
            $desc:"To destroy all xui.DataBinder objects",
            $snippet:[
                "//xui.DataBinder.destroyAll()"
            ]
        },
        getFromName:{
            $desc:"To get a xui.DataBinder Object from it's name",
            $rtn:'xui.DataBinder',
            $paras:[
                "name [Required] : String, the DataBinder name"
            ],
            $snippet:[
                "var db=new xui.DataBinder();db.setName('abc');"+
                "alert(db=xui.DataBinder.getFromName('abc'));"+
                "db.destroy();"+
                "alert(xui.DataBinder.getFromName('abc'));"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            setHost:{
                $desc:"Sets the host Object and alias",
                $rtn:'[self]',
                $paras:[
                    "host [Optional : Object, the host Object",
                    "alias [Optional : String, the alias value"
                ]
            },
            getUIValue:{
                $desc:"To get all bound controls' UI values",
                $rtn:"Object, key/value pairs",
                $paras:[
                    "withCaption [Optional] : Boolean, to determine whether include caption(if has this property), Default is [false]",
                    "dirtied [Optional] : Boolean, to determine whether return dirtied controls only"
                ]
            },
            isDirtied:{
                $desc:"To check whether or not bound UI controls are modified",
                $rtn:"Boolean"
            },
            getDirtied:{
                $desc:"To get all dirtied bound controls' UI values",
                $rtn:"Object, key/value pairs",
                $paras:[
                    "withCaption [Optional] : Boolean, to determine whether include caption(if has this property), Default is [false]"
                ]
            },
            resetValue:{
                $desc:"Resets the  inner UI controls' value to the original ones",
                $rtn:"[self]"
            },
            clearValue:{
                $desc:"Clears the  inner UI controls' value",
                $rtn:"[self]"
            },
            updateValue:{
                $desc:"Copies the  inner UI controls' value",
                $rtn:"[self]"
            },
            checkValid:{
                $desc:"To checks if all the bound xui.absValue profiles are valid. For example: if user input some chars into a 'number only' xui.UI.Input(it is bound to the current databinder), this function will return [false]",
                $rtn:"xui.absValue"
            },
            destroy:{
                $desc:"To destroy the current Object",
                $memo:"Usually, we do not need to call this function manually"
            },
            setName:{
                $desc:"Sets name property value to a the first databinder profile",
                $rtn:'[self]',
                $paras:[
                    "value [Required] : String, name string"
                ],
                $memo:"To see the 'getValue' snippets"
            },
            getUI:{
                $desc:"Gets the bound UI Object",
                $rtn:'xui.UI',
                $memo:"To see the 'getValue' snippets",
                $snippet:[
                    "var id='xui.temp.ui'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).append(new xui.UI.Input({position:'relative',dataBinder:'abc'}));"+
                    "alert(xui.DataBinder.getFromName('abc').getUI().serialize());"+
                    "}"
                ]
            },
            getName:{
                $desc:"Returns the name property of the first databinder profile",
                $rtn:'String',
                $memo:"To see the 'getValue' snippets"
            },

            getData:{
                $desc:"Gets the inner data",
                $rtn:"Object, key/value pairs",
                $paras:[
                    "key [Optional] : String, if 'key' was specified, only the corresponding value will be returned"
                ]
            },
            setData:{
                $desc:"Sets the inner data",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : Object/String, key/value pairs or a string key",
                    "value [Optional] : Object, value, only when the parameter 'key' was specified",
                    "force [Optional] : Boolean, force to updateDataToUI. The default is [false]"
                ]
            },
            updateDataToUI:{
                $desc:"Updates data from the inner data to the bound UI",
                $rtn:"[self]",
                $paras:[
                    "adjustData [Optional] : Function, the adjust function for data( before data is set to UI)",
                    "dataKeys [Optional] : String/Array, keys will to be set"
                ]
            },
            updateDataFromUI:{
                $desc:"Updates data from the bound UI to inner data",
                $rtn:"[Booean]",
                $paras:[
                    "updateUIValue [Optional] : Boolean, to determine whether to reset all controls' value and clear the diry mark immediately or not, Default is [true]",
                    "withCaption [Optional] : Boolean, to determine whether include caption(if has this property), Default is [false]",
                    "returnArr [Optional] : Boolean, to determine whether return array object(for those multi selection absList only),Default is [false]",
                    "adjustData [Optional] : Function, the adjust function for data( before data is set to the innder data property)",
                    "dataKeys [Optional] : String/Array, keys will to be get",
                    "ignoreAlert[Optional] : Boolean, Don't show alert info"
                ]
            },

            beforeUpdateDataToUI:{
                $desc:"Fired before updateDataToUI function is called. For adjusting data. This event function can return adjusted data",
                $rtn:"Object",
                $paras:[
                    "profile : xui.Profile",
                    "dataToUI : Object, the data object to UI"
                ]
            },
            afterUpdateDataFromUI:{
                $desc:"Fired after updateDataFromUI function is called. For adjusting data. This event function can return adjusted data",
                $rtn:"Object",
                $paras:[
                    "profile : xui.Profile",
                    "dataFromUI : Object, the data object from UI"
                ]
            }
        }
    });
    xui.set(xui.Locale,["en","doc","xui","Tips"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Tips Class(static)",
        AUTOHIDETIME:{
            $desc:"Number, Indicates that how long(in ms) the tooltips will be hidden automatically after it's showed. This parameter is valid when MOABLE is [true]",
            $snippet:["alert(xui.Tips.AUTOHIDETIME)"]
        },
        DELAYTIME:{
            $desc:"Number, Indicates that how long(in ms) the tooltips will be showed after the function 'xui.Tips.show' is called",
            $snippet:["alert(xui.Tips.DELAYTIME)"]
        },
        MAXWIDTH:{
            $desc:"Number, The max width of the tooltips",
            $snippet:["alert(xui.Tips.MAXWIDTH)"]
        },
        MOVABLE:{
            $desc:"Boolean, Indicates whether or not the tooltips is movable",
            $snippet:["alert(xui.Tips.MOVABLE)"]
        },
        TIPSKEY:{
            $desc:"String, The tooltips key. Default is 'tips'",
            $snippet:["alert(xui.Tips.TIPSKEY)"]
        },
        getTips:{
            $desc:"To get the tips string",
            $rtn:"String",
            $snippet:[
                "xui.Tips.show({left:100,top:100}, 'a string');"+
                "alert(xui.Tips.getTips());"+
                "xui.Tips.hide();"+
                "alert(xui.Tips.getTips());"
            ]
        },
        setTips:{
            $desc:"To set the tips string",
            $paras:[
                "s [Required] : String"
            ]
        },
        setPos:{
            $desc:"To set the tips position",
            $paras:[
                "left [Optional] : Number, px number",
                "top [Optional] : Number, px number"
            ]
        },
        hide:{
            $desc:"To hide the tooltips",
            $snippet:[
                "xui.Tips.show({left:100,top:100}, 'a string'); xui.asyRun(function(){xui.Tips.hide();},1000); xui.asyRun(function(){xui.Tips.show({left:100,top:100}, {tips:'an Object with a \\\'tips\\\' key'})},2000); xui.asyRun(function(){xui.Tips.hide();},3000); xui.asyRun(function(){xui.Tips.show({left:100,top:100}, {any:'an Object with a customizable key'},'any')},4000);xui.asyRun(function(){xui.Tips.hide();},5000);"
            ]
        },
        show:{
            $desc:"To show the tooltips",
            $paras:[
                "pos [Required] : {left:Number,top:Number}, the position of the tooltips",
                "item [Required] : String or Object, to provide the tooltips content",
                "key [Optional] : String, the tips key. Default is 'tips'"
            ],
            $snippet:[
                "xui.Tips.show({left:100,top:100}, 'a string'); xui.asyRun(function(){xui.Tips.hide();},1000); xui.asyRun(function(){xui.Tips.show({left:100,top:100}, {tips:'an Object with a \\\'tips\\\' key'})},2000); xui.asyRun(function(){xui.Tips.hide();},3000); xui.asyRun(function(){xui.Tips.show({left:100,top:100}, {any:'an Object with a customizable key'},'any')},4000);xui.asyRun(function(){xui.Tips.hide();},5000);"
            ]
        }
    });

    xui.set(xui.Locale,["en","doc","xui","Coder"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.Coder Class(static)",
        isSafeJSON:{
            $desc:"Checks string is safe JSON or not",
            $rtn:"Boolean",
            $paras:[
                "s [Required] : String"
            ]
        },
        formatText:{
            $desc:"Converts a snippet of js/css/php/html code to more readable text format",
            $rtn:"String",
            $paras:[
                "code [Required] : String, code snippet",
                "type [Optional] : String, code type. Defalut is 'js'"
            ],
            $snippet:[
                "alert(xui.Coder.formatText('var a=function(){var a=1;var b=2;var c={a:1,b:2};};'))",
                "alert(xui.Coder.formatText('.cls{left:0;top:0}','css'))",
                "alert(xui.Coder.formatText('<div><p>1</p><p>2</p><p><span>3</span>4</p></div>','html'))",
                "alert(xui.Coder.formatText(' foreach ($d as $k => $v){print $k.$v;}','php'))"
            ]
        },
        formatHTML:{
            $desc:"Converts a snippet of js/css/php/html code to HTML format",
            $rtn:"String",
            $paras:[
                "code [Required] : String, code snippet",
                "type [Optional] : String, code type. Defalut is 'js'",
                "paras [Optional] : String[], Commands, e.g. ['plain','run']",
                "fold [Optional] : String, fold the code",
                "id [Optional] : String, the output HTML DOM id",
                "height [Optional] : Number, the output HTML height"
            ],
            $snippet:[
                "var str=xui.Coder.formatHTML('var a=function(){var a=1;var b=2;var c={a:1,b:2};};alert(1);','js',['plain','run'],'i-d'); xui.UI.Dialog.alert('xui.Coder', str)",
                "var str=xui.Coder.formatHTML('.cls{left:0;top:0}','css'); xui.UI.Dialog.alert('xui.Coder', str)",
                "var str=xui.Coder.formatHTML('<div><p>1</p><p>2</p><p><span>3</span>4</p></div>','html'); xui.UI.Dialog.alert('xui.Coder', str)",
                "var str=xui.Coder.formatHTML(' foreach ($d as $k => $v){print $k.$v;}','php',['plain']); xui.UI.Dialog.alert('xui.Coder', str)"
            ]
        },
        formatAll:{
            $desc:"Converts a snippet of js/css/php/html code to more readable HTML format. Equals to formatText + formatHTML",
            $rtn:"String",
            $paras:[
                "code [Required] : String, code snippet",
                "type [Optional] : String, code type. Defalut is 'js'",
                "paras [Optional] : String[], Commands, e.g. ['plain','run']",
                "fold [Optional] : String, fold the code",
                "id [Optional] : String, the output HTML DOM id",
                "height [Optional] : Number, the output HTML height"
            ],
            $snippet:[
                "var str=xui.Coder.formatAll('var a=function(){var a=1;var b=2;var c={a:1,b:2};};alert(1);','js',['plain','run'],'i-d'); xui.UI.Dialog.alert('xui.Coder', str)",
                "var str=xui.Coder.formatAll('.cls{left:0;top:0}','css'); xui.UI.Dialog.alert('xui.Coder', str)",
                "var str=xui.Coder.formatAll('<div><p>1</p><p>2</p><p><span>3</span>4</p></div>','html'); xui.UI.Dialog.alert('xui.Coder', str)",
                "var str=xui.Coder.formatAll(' foreach ($d as $k => $v){print $k.$v;}','php',['plain']); xui.UI.Dialog.alert('xui.Coder', str)"
            ]
        },
        applyById:{
            $desc:"Apply xui.Coder to all the specified elements with a given DOM id",
            $paras:[
                "id [Required] : String, DOM id",
                "formatAll [Optional] : Boolean, use 'formatAll' or not (use 'formatHTML'), Default is [false]"
            ],
            $memo:"Generally, this function will not be used in a web application, but a HTML page with code to be highlighted"
        }
    });


    xui.set(xui.Locale,["en","doc","xui","absList"], {
        prototype:{
            doFilter:{
                $desc:"to filter the list",
                $rtn:"[self]",
                $paras:[
                    "itemFilter [Required] : Function, The filter function. function(item, helper, profile){if(item.tag == 'a') return true;}",
                    "helper [Optional]: Object, The filter helper object"
                ]
            },
            fireItemClickEvent:{
                $desc:"To fires the click event on the specified item",
                $rtn:"[self]",
                $paras:[
                    "subId [Required] : String, the id value of target item"
                ],
                $snippet:[
                    "var id='xui.temp.tabs6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "xui.asyRun(function(){o.fireItemClickEvent('b')},1000);"+
                    "}"
                ]
            },
            updateItem:{
                $desc:"Updates the specified item and the corresponding DOM Element",
                $rtn:"[self]",
                $paras:[
                    "id [Required] : String, The node id",
                    "options [Required] : a key/value pairs Object or String"
                ],
                $snippet:[
                    "var id='xui.temp.absl0-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',iniFold:true,height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c',sub:[{id:'cz',caption:'cz'}]}]});"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.updateItem('b',{caption:'bbb', image:'img/img.gif', imagePos:'left -16px'})},1000);" +
                    "}"
                ]
            },
            hideItems:{
                $desc:"To hide an or more item",
                $rtn:"[self]",
                $paras:[
                     "subId [Required] : String/Array, id array of target items"
                ]
            },
            showItems:{
                $desc:"To  show an or more item",
                $rtn:"[self]",
                $paras:[
                     "subId [Required] : String/Array, id array of target items"
                ]
            },
            disableItem:{
                $desc:"To  disable an item",
                $rtn:"[self]",
                $paras:[
                     "subId [Required] : String,  target item id"
                ]
            },
            enableItem:{
                $desc:"To  enable an item",
                $rtn:"[self]",
                $paras:[
                     "subId [Required] : String,  target item id"
                ]
            },
            getItems:{
                $desc:"Gets the items proerpy from the current UI Object",
                $rtn:"Array",
                $snippet:[
                    "var id='xui.temp.absl1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({position:'relative',items:[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]}))"+
                    "xui.asyRun(function(){alert(xui.serialize(o.getItems()))});"+
                    "}"
                ]
            },
            setItems:{
                $desc:"Sets the items property to the current UI Object, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array, the items",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.absl2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({position:'relative',items:[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]}))"+
                    "xui.asyRun(function(){o.setItems([{id:'aaa',caption:'bbb'}])});"+
                    "}"
                ]
            },
            insertItems:{
                $desc:"Inserts a set of items to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "arr [Required] : Array, A set of Item objects",
                    "base [Optional] : String, the base item id string",
                    "before [Optional] : Boolean, Indicates whether it inserts the target items before the base, or after the base. Default is false;"
                ],
                $snippet:[
                    "var id='xui.temp.absl3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({position:'relative',items:[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]}));"+
                    "xui.asyRun(function(){o.insertItems([{id:'a1',caption:'a1'}],'b',true)},1000);"+
                    "xui.asyRun(function(){o.insertItems([{id:'c1',caption:'c1'}],'c',false)},2000);"+
                    "xui.asyRun(function(){o.insertItems([{id:'a0',caption:'a0'}],null,true)},3000);"+
                    "xui.asyRun(function(){o.insertItems([{id:'c2',caption:'c2'}],null,false)},4000);"+
                    "xui.asyRun(function(){o.insertItems([{id:'h',caption:'h'},{id:'i',caption:'i'}])},5000);"+
                    "}"
                ]
            },
            removeItems:{
                $desc:"Removes a set of items from the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "arr [Required] : Array, A set of id strings"
                ],
                $snippet:[
                    "var id='xui.temp.absl4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({position:'relative',items:[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]}));"+
                    "xui.asyRun(function(){o.removeItems(['a','b'])},1000);"+
                    "}"
                ]
            },
            clearItems:{
                $desc:"Removes all items from the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "key [Optional] : String, the template key which node includes all the items nodes. Defalt is 'ITEMS'"
                ],
                $snippet:[
                    "var id='xui.temp.absl5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({position:'relative',items:[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]}));"+
                    "xui.asyRun(function(){o.clearItems();},1000);"+
                    "}"
                ]
            },
            getValueSeparator:{
                $desc:"Gets the separator for string value(only for selMode is 'multi' or 'multibycheckbox'); Default is ';'",
                $rtn:"String"
            },
            setValueSeparator:{
                $desc:"Sets the separator for string value(only for selMode is 'multi' or 'multibycheckbox')",
                $rtn:"[self]"
            },
            getListKey:{
                $desc:"Gets the list key property from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.abs6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.UI.cacheData('test',[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]);"+
                    "xui.UI.cacheData('test2',[{id:'aa',caption:'aa'},{id:'bb',caption:'bb'},{id:'cc',caption:'cc'}]);"+
                    "var o;xui(id).prepend(o=new xui.UI.List({position:'relative',listKey:'test'}));"+
                    "xui.asyRun(function(){alert(o.getListKey())});"+
                    "}"
                ]
            },
            setListKey:{
                $desc:"Sets the list key property to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the list key",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.abs7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.UI.cacheData('test',[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]);"+
                    "xui.UI.cacheData('test2',[{id:'aa',caption:'aa'},{id:'bb',caption:'bb'},{id:'cc',caption:'cc'}]);"+
                    "var o;xui(id).prepend(o=new xui.UI.List({position:'relative',listKey:'test'}));"+
                    "xui.asyRun(function(){o.setListKey('test2')},1000);"+
                    "}"
                ]
            },
            getItemByItemId:{
                $desc:"Gets a item Object according to a specified item id",
                $rtn:"Object",
                $paras:[
                    "itemId [Required] :String, item id"
                ],
                $snippet:[
                    "var pro=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:').boxing();alert(xui.serialize( pro.getItemByItemId('Class') ))"
                ]
            },
            getItemByDom:{
                $desc:"Gets a item Object according to a specified DOM element or an id string",
                $rtn:"Object",
                $paras:[
                    "src [Required] : DOM element or id string"
                ],
                $snippet:[
                    "var pro=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:').boxing();alert(xui.serialize( pro.getItemByDom('xui.UI.TreeBar-ITEM:a:a') ))"
                ]
            },
            getSubIdByItemId:{
                $desc:"Gets the sub id (from DOM element id) according to a specified item id",
                $rtn:"String",
                $paras:[
                    "itemId [Required] :String, item id"
                ],
                $snippet:[
                    "var pro=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:').boxing();alert(pro.getSubIdByItemId('Class') )"
                ]
            },
            getSubNodeByItemId:{
                $desc:"Gets the sub DOM element) according to a specified item id",
                $rtn:"xui.Dom",
                $paras:[
                    "key [Required] : String, key string",
                    "itemId [Required] :String, item id"
                ],
                $snippet:[
                    "var pro=xui.UIProfile.getFromDom('xui.UI.TreeBar:a:').boxing();alert(pro.getSubNodeByItemId('ITEM','Class') )"
                ]
            },
            beforeIniEditor:{
                $desc:"Fired before the cell switch to edit mode. If returns false, the default edit action will be ignored",
                $paras:[
                    $profile,
                    "item : Object. item object",
                    "captionNode : xui.Dom, caption's dom object"
                ]
            },
            onBeginEdit:{
                $desc:"Fired when the item's editor is showed",
                $paras:[
                    $profile,
                    "item : Object. item object",
                    "editor: Object, the editor object"
                ]
            },
            beforeEditApply:{
                $desc:"Fired before the item's editor apply changed. If returns false, the activation will be ignored",
                $paras:[
                    $profile,
                    "item : Object. item object",
                    "caption: String. updated content",
                    "editor: Object, the editor object",
                    "tag: String,  action source"
                ]
            },
            onEndEdit:{
                $desc:"Fired when the item's editor is hidden",
                $paras:[
                    $profile,
                    "item : Object. item object",
                    "editor: Object, the editor object"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","absValue"], {
        prototype:{
            getReadonly:{
                $desc:"Gets the readonly property",
                $rtn:"Boolean"
            },
            setReadonly:{
                $desc:"Sets the readonly property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getShowDirtyMark:{
                $desc:"Gets the showDirtyMark property value on the first UIProfile",
                $rtn:"Boolean",
                $memo:"If dirtyMark and showDirtyMark are [true], the component maybe show the dirty mark in UI when its value was changed"
            },
            setShowDirtyMark:{
                $desc:"Sets the showDirtyMark property value on the first UIProfile",
                $rtn:"[self]",
                $memo:"If dirtyMark and showDirtyMark are [true], the component maybe show the dirty mark in UI when its value was changed"
            },
            getDirtyMark:{
                $desc:"Gets the dirtyMark property value on the first UIProfile",
                $rtn:"Boolean",
                $memo:"If dirtyMark and showDirtyMark are [true], the component maybe show the dirty mark in UI when its value was changed"
            },
            setDirtyMark:{
                $desc:"Sets the dirtyMark property value on the first UIProfile",
                $rtn:"[self]",
                $memo:"If dirtyMark and showDirtyMark are [true], the component maybe show the dirty mark in UI when its value was changed"
            },
            getIsFormField:{
                $desc:"To determine whether the valuable control is a form input or not",
                $rtn:"Boolean"
            },
            setIsFormField:{
                $desc:"To specify whether the valuable control is a form input or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getRequired:{
                $desc:"Gets the valuable control's required prop",
                $rtn:"Boolean"
            },
            setRequired:{
                $desc:"Sets the valuable control's required prop",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getDataBinder:{
                $desc:"Gets the DataBinder property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.absv1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input);"+
                    "xui.asyRun(function(){o.setDataBinder('db1'); alert(o.getDataBinder())},1000)"+
                    "}"
                ]
            },
            setDataBinder:{
                $desc:"Sets the DataBinder property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.absv2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input);"+
                    "xui.asyRun(function(){o.setDataBinder('db1'); alert(o.getDataBinder())},1000)"+
                    "}"
                ]
            },
            getDataField:{
                $desc:"Gets the DataField property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.absv3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input);"+
                    "xui.asyRun(function(){o.setDataField('field1'); alert(o.getDataField())},1000)"+
                    "}"
                ]
            },
            setDataField:{
                $desc:"Sets the DataField property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.absv4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input);"+
                    "xui.asyRun(function(){o.setDataField('field1'); alert(o.getDataField())},1000)"+
                    "}"
                ]
            },

            getUIValue:{
                $desc:"Gets the 'UI value' on the first UIProfile",
                $rtn:"Object",
                $paras:[
                    "returnArr [Optional] : Boolean. to determine whether return array or string,(selMode is 'multi' or 'multibycheckbox')"
                ],
                $snippet:[
                    "var id='xui.temp.absv7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "xui.asyRun(function(){alert(o.getUIValue())},1000)"+
                    "}"
                ]
            },
            setUIValue:{
                $desc:"Sets the 'UI value' and the 'Control value' on the first UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    "force [Optional] : Boolean, Force to execute the function even if the same UI value already exists. Default is [false]"
                ],
                $snippet:[
                    "var id='xui.temp.absv81'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "xui.asyRun(function(){o.setUIValue('ini2'); alert(o.getUIValue());},1000)"+
                    "}"
                ],
                $memo:"There are two events will be triggered in this action: beforeUIValueSet and afterUIValueSet"
            },

            updateValue:{
                $desc:"Copies the 'UI value' to 'value'",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.absv82'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "xui.asyRun(function(){o.setUIValue('ini2').updateValue(); alert(o.getValue());},1000)"+
                    "}"
                ]
            },
            getValue:{
                $desc:"Gets the 'value' on the first UIProfile",
                $rtn:"Object",
                $paras:[
                    "returnArr [Optional] : Boolean. to determine whether return array or string,(selMode is 'multi' or 'multibycheckbox')"
                ],
                $snippet:[
                    "var id='xui.temp.absv9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "xui.asyRun(function(){alert(o.getValue())},1000)"+
                    "}"
                ]
            },
            setValue:{
                $desc:"Sets the 'value', the 'UI value' and the 'Control value' on the first UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    "force [Optional] : Boolean, force to set the value even if the same value already exists. Default is [false]"
                ],
                $snippet:[
                    "var id='xui.temp.absv10'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "xui.asyRun(function(){o.setValue('ini2'); alert(o.getValue());},1000)"+
                    "}"
                ],
                $memo:"There are two events will be triggered in this action: beforeValueSet and afterValueSet"
            },
            checkValid:{
                $desc:"To check whether or not the current 'UI value' is valid",
                $rtn:"Boolean",
                $paras:[
                    "value [Optional] : Object, the target value. If not specified, the target value will be the control's UI value"
                ],
                $snippet:[
                    "var id='xui.temp.absv11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini',valueFormat:'^-?\\\\d\\\\d*$'}));"+
                    "xui.asyRun(function(){alert(o.checkValid());},1000)"+
                    "}"
                ]
            },
            isDirtied:{
                $desc:"To check whether or not the 'value' equals to the 'UI value'",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.absv13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "xui.asyRun(function(){o.setUIValue('ini2');alert(o.isDirtied());},1000)"+
                    "}"
                ]
            },
            resetValue:{
                $desc:"To reset the 'value', the 'UI value' and the 'Control value', no event will be triggered in this process",
                $rtn:'[self]',
                $paras:[
                    "value [Optional] : Object, the reset value. Default is ''"
                ],
                $snippet:[
                    "var id='xui.temp.absv14'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "o.setUIValue('ini2');xui.asyRun(function(){o.resetValue('ini2');},1000)"+
                    "}"
                ]
            },

            beforeUIValueSet:{
                $desc:"Fired before setUIValue is called. If returns false, setUIValue function will be ignored",
                $paras:[
                    $profile,
                    "oldValue : String, old UIValue",
                    "newValue : String, new UIValue",
                    "force : Boolean, force to call or not",
                    "tag : call extra info",
                    "tagVar: Ojbect, value's corresponding object, if exists"
                ],
                $snippet:[
                    "var id='xui.temp.absv15'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "var arr=[];"+
                    "o.beforeUIValueSet(function(p,o,v){arr.push('beforeUIValueSet: '+o+'->'+v)}).afterUIValueSet(function(p,o,v){arr.push('afterUIValueSet: '+o+'->'+v)}).beforeValueSet(function(p,o,v){arr.push('beforeValueSet: '+o+'->'+v)}).afterValueSet(function(p,o,v){arr.push('afterValueSet: '+o+'->'+v)});"+
                    "xui.asyRun(function(){o.setUIValue('ini2');},100);"+
                    "xui.asyRun(function(){o.setValue('ini3');},200);"+
                    "xui.asyRun(function(){alert(arr.join('\\n'));},220);"+
                    "}"
                ]
            },
            afterUIValueSet:{
                $desc:"Fired after setUIValue is called",
                $paras:[
                    $profile,
                    "oldValue :String, old UIValue",
                    "newValue : String, new UIValue",
                    "force : Boolean, force to call or not",
                    "tag : call extra info",
                    "tagVar: Ojbect, value's corresponding object, if exists"
                ],
                $snippet:[
                    "var id='xui.temp.absv16'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "var arr=[];"+
                    "o.beforeUIValueSet(function(p,o,v){arr.push('beforeUIValueSet: '+o+'->'+v)}).afterUIValueSet(function(p,o,v){arr.push('afterUIValueSet: '+o+'->'+v)}).beforeValueSet(function(p,o,v){arr.push('beforeValueSet: '+o+'->'+v)}).afterValueSet(function(p,o,v){arr.push('afterValueSet: '+o+'->'+v)});"+
                    "xui.asyRun(function(){o.setUIValue('ini2');},100);"+
                    "xui.asyRun(function(){o.setValue('ini3');},200);"+
                   "xui.asyRun(function(){alert(arr.join('\\n'));},220);"+
                    "}"
                ]
            },
            onChange:{
                $desc:"Fired when control's UI value is changed!",
                $paras:[
                    $profile,
                    "oldValue :String, old UIValue",
                    "newValue : String, new UIValue",
                    "force : Boolean, force to call or not",
                    "tag : call extra info",
                    "tagVar: Ojbect, value's corresponding object, if exists"
                ]
            },
            onValueChange:{
                $desc:"Fired when control's inner value is changed!",
                $paras:[
                    $profile,
                    "oldValue :String,  old Value",
                    "newValue : String, new Value",
                    "force : Boolean, force to call or not",
                    "tag : call extra info"
                ]
            },
            beforeValueSet:{
                $desc:"Fired before setValue is called. If returns false, setValue function will be ignored",
                $paras:[
                    $profile,
                    "oldValue : String, old Value",
                    "newValue : String, new Value",
                    "force : Boolean, force to call or not",
                    "tag : call extra info"
                ],
                $snippet:[
                    "var id='xui.temp.absv17'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "var arr=[];"+
                    "o.beforeUIValueSet(function(p,o,v){arr.push('beforeUIValueSet: '+o+'->'+v)}).afterUIValueSet(function(p,o,v){arr.push('afterUIValueSet: '+o+'->'+v)}).beforeValueSet(function(p,o,v){arr.push('beforeValueSet: '+o+'->'+v)}).afterValueSet(function(p,o,v){arr.push('afterValueSet: '+o+'->'+v)});"+
                    "xui.asyRun(function(){o.setUIValue('ini2');},100);"+
                    "xui.asyRun(function(){o.setValue('ini3');},200);"+
                   "xui.asyRun(function(){alert(arr.join('\\n'));},220);"+
                    "}"
                ]
            },
            afterValueSet:{
                $desc:"Fired after setValue is called",
                $paras:[
                    $profile,
                    "oldValue : String, old Value",
                    "newValue : String, new Value",
                    "force : Boolean, force to call or not",
                    "tag : call extra info"
                ],
                $snippet:[
                    "var id='xui.temp.absv18'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "var arr=[];"+
                    "o.beforeUIValueSet(function(p,o,v){arr.push('beforeUIValueSet: '+o+'->'+v)}).afterUIValueSet(function(p,o,v){arr.push('afterUIValueSet: '+o+'->'+v)}).beforeValueSet(function(p,o,v){arr.push('beforeValueSet: '+o+'->'+v)}).afterValueSet(function(p,o,v){arr.push('afterValueSet: '+o+'->'+v)});"+
                    "xui.asyRun(function(){o.setUIValue('ini2');},100);"+
                    "xui.asyRun(function(){o.setValue('ini3');},200);"+
                   "xui.asyRun(function(){alert(arr.join('\\n'));},220);"+
                    "}"
                ]
            },


            beforeDirtyMark:{
                $desc:"Fired when before _setDirtyMark is called.If returns false, the inner dirtyMark function will be ignored",
                $paras:[
                    $profile,
                     "dirty : Boolean, it's dirty or not"
                ],
                $snippet:[
                    "var id='xui.temp.absv19'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.Input({value:'111',position:'relative'})).prepend(o2=new xui.UI.Input({value:'111',position:'relative'}));"+
                    "o1.beforeDirtyMark(function(p,dirty){p.getSubNode('INPUT').css('background',dirty?'#00ff00':'');return false;});"+
                    "xui.asyRun(function(){o1.setUIValue('ini');o2.setUIValue('ini');},1000);"+
                    "xui.asyRun(function(){o1.setUIValue('111');o2.setUIValue('111');},2000);"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","absContainer"], {
        prototype:{
            getDragKey:{
                $desc:"Gets the dragKey property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.d1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setDragKey('a'); alert(btn.getDragKey())},1000)"+
                    "}"
                ]
            },
            setDragKey:{
                $desc:"Sets the dragKey property value on the first UIProfile",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.d2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setDragKey('a'); alert(btn.getDragKey())},1000)"+
                    "}"
                ]
            },
            getDropKeys:{
                $desc:"Gets the dropKeys property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.d3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Block({position:'relative',border:true}));"+
                    "xui.asyRun(function(){btn.setDropKeys('a:b'); alert(btn.getDropKeys())},1000)"+
                    "}"
                ]
            },
            setDropKeys:{
                $desc:"Sets the DropKeys property value on the first UIProfile",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.d4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Block({position:'relative',border:true}));"+
                    "xui.asyRun(function(){btn.setDropKeys('a:b'); alert(btn.getDropKeys())},1000)"+
                    "}"
                ]
            },
            addPanel:{
                $desc:"Adds a panel to the current UI",
                $paras:[
                    "paras [Required] : a key/value pairs",
                    "children [Required] : Array, the panel's children",
                    "item [Optional] : Object"
                ],
                $snippet:[
                    "var id='xui.temp.d5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var panel, tabs;"+
                    "xui(id).prepend(panel=new xui.UI.Panel({height:100,width:100,dock:'none',position:'relative'}));"+
                    "panel.append(new xui.UI.Button);"+
                    "xui(id).prepend(tabs=new xui.UI.Tabs({position:'relative',width:200, height:100, dock:'none',items:[{id:'a',caption:'a'},{id:'b',caption:'b'}]}));"+
                    "xui.asyRun(function(){tabs.addPanel(panel.getPanelPara(), panel.getPanelChildren()); panel.removePanel();},1000);"+
                    "}"
                ]
            },
            dumpContainer:{
                $desc:"To dump a panel, to remove specific control or empty all the contents of the container",
                $rtn:"[self]",
                $paras:[
                    "subId [Optional] : String, the sub id that determines which profile will be removed. [true] for all contents. Default is [true]"
                ]
            },
            removePanel:{
                $desc:"Removes a panel from the current UI",
                $snippet:[
                    "var id='xui.temp.d6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var panel, tabs;"+
                    "xui(id).prepend(panel=new xui.UI.Panel({height:100,width:100,dock:'none',position:'relative'}));"+
                    "panel.append(new xui.UI.Button);"+
                    "xui(id).prepend(tabs=new xui.UI.Tabs({position:'relative',width:200, height:100, dock:'none',items:[{id:'a',caption:'a'},{id:'b',caption:'b'}]}));"+
                    "xui.asyRun(function(){tabs.addPanel(panel.getPanelPara(), panel.getPanelChildren()); panel.removePanel();},1000);"+
                    "}"
                ]
            },
            getPanelPara:{
                $desc:"Gets panel parameters from the current UI",
                $rtn:"Object",
                $snippet:[
                    "var id='xui.temp.d8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var panel, tabs;"+
                    "xui(id).prepend(panel=new xui.UI.Panel({height:100,width:100,dock:'none',position:'relative'}));"+
                    "panel.append(new xui.UI.Button);"+
                    "xui(id).prepend(tabs=new xui.UI.Tabs({position:'relative',width:200, height:100, dock:'none',items:[{id:'a',caption:'a'},{id:'b',caption:'b'}]}));"+
                    "xui.asyRun(function(){tabs.addPanel(panel.getPanelPara(), panel.getPanelChildren()); panel.removePanel();},1000);"+
                    "}"
                ]
            },
            getPanelChildren:{
                $desc:"Gets panel chldren from the current UI",
                $rtn:"Array",
                $snippet:[
                    "var id='xui.temp.d9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var panel, tabs;"+
                    "xui(id).prepend(panel=new xui.UI.Panel({height:100,width:100,dock:'none',position:'relative'}));"+
                    "panel.append(new xui.UI.Button);"+
                    "xui(id).prepend(tabs=new xui.UI.Tabs({position:'relative',width:200, height:100, dock:'none',items:[{id:'a',caption:'a'},{id:'b',caption:'b'}]}));"+
                    "xui.asyRun(function(){tabs.addPanel(panel.getPanelPara(), panel.getPanelChildren()); panel.removePanel();},1000);"+
                    "}"
                ]
            },
            getOverflow:{
                $desc:"Gets container's CSS overflow property",
                $rtn:"String"
            },
            setOverflow:{
                $desc:"Sets container's CSS overflow property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'auto','hidden','visible','' ",
                    $force
                ]
            },
            getPanelBgCrl:{
                $desc:"Gets container's CSS background color property",
                $rtn:"String"
            },
            setPanelBgCrl:{
                $desc:"Sets container's CSS background color property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getPanelBgImg:{
                $desc:"Gets container's CSS background image property",
                $rtn:"String"
            },
            setPanelBgImg:{
                $desc:"Sets container's CSS background image property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getPanelBgImgPos:{
                $desc:"Gets container's CSS background image position property",
                $rtn:"String"
            },
            setPanelBgImgPos:{
                $desc:"Sets container's CSS background image position property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getPanelBgImgRepeat:{
                $desc:"Gets container's CSS background image position property",
                $rtn:"String"
            },
            setPanelBgImgRepeat:{
                $desc:"Sets container's CSS background image position property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getPanelBgImgAttachment:{
                $desc:"Gets container's CSS background image attachment property",
                $rtn:"String"
            },
            setPanelBgImgAttachment:{
                $desc:"Sets container's CSS background image attachment property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getConDockPadding:{
                $desc:"Gets the inner docking padding px for this container",
                $rtn:"Object"
            },
            setConDockPadding:{
                $desc:"To specify the inner docking padding px for this container",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object. {left:,top:,bottom:right}",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui751'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block;xui(id).prepend(block=new xui.UI.Block({width:200,height:200,conDockPadding:{left:10,top:20,right:10,bottom:20},conDockSpacing:{width:10,height:20}}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',capton:'top'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',capton:'top'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'fill',capton:'fill'}));"+
                    "}"
                ]
            },
            getConDockSpacing:{
                $desc:"Gets the inner docking spacing px for this container",
                $rtn:"Object"
            },
            setConDockSpacing:{
                $desc:"To specify the inner docking spacing px for this container",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object. {width:,height:}",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui751'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block;xui(id).prepend(block=new xui.UI.Block({width:200,height:200,conDockPadding:{left:10,top:20,right:10,bottom:20},conDockSpacing:{width:10,height:20}}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',capton:'top'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',capton:'top'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'fill',capton:'fill'}));"+
                    "}"
                ]
            },
            getConDockFlexFill:{
                $desc:"To determine whether the children docking controls are flex fill(cross axis) or not ",
                $rtn:"Object"
            },
            setConDockFlexFill:{
                $desc:"To specify whether the children docking controls are flex fill(cross axis) or not ",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui750'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block;xui(id).prepend(block=new xui.UI.Block({width:200,conDockFlexFill:'both'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',caption:'dockIgnoreFlexFill:true',dockIgnoreFlexFill:true}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',caption:'dockIgnoreFlexFill:false'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',caption:'dockIgnoreFlexFill:false'}));"+
                    "}"
                ]
            },
            getConDockStretch:{
                $desc:"To determine the children docking controls' stretch parameter",
                $rtn:"String"
            },
            setConDockStretch:{
                $desc:"To specify the children docking controls' stretch parameter",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui750'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block;xui(id).prepend(block=new xui.UI.Block({width:200,conDockStretch:'0.25'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',caption:'25%'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',caption:'25%'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',caption:'50%',dockStretch:0.5}));"+
                    "}"
                ]
            },

            getFormValues:{
                $desc:"Gets the form field-value map",
                $rtn:"Hash",
                $paras:[
                    "dirtiedOnly [Optional] : Boolean, to determine whether return dirtied controls only",
                    "subId [Optional]: String, id",
                    "penetrate [Optional]: Boolean, penetrate inner modules",
                    "withCaption [Optional] : Boolean, to determine whether include caption(returns {fieldname:{value:xxx,caption:xxx}} ), Default is [false]",
                    "withCaptionField [Optional] : Boolean, to determine whether include caption( returns {valueField:xxx,captionField:xxx}) if the field control name is 'valueField:captionField', Default is [false]"
                ]
            },
            setFormValues:{
                $desc:"Sets values to the form fields",
                $rtn:"Hash",
                $paras:[
                    "values [Optional] : Hash, key/value pairs",
                    "subId [Optional]: String, id",
                    "penetrate [Optional]: Boolean, penetrate inner modules"
                ]
            },
            getFormElements:{
                $desc:"Gets the form fields",
                $rtn:"xui.absValue",
                $paras:[
                    "dirtiedOnly [Optional] : Boolean, to determine whether return dirtied controls only",
                    "subId [Optional]: String, id",
                    "penetrate [Optional]: Boolean, penetrate inner modules"
                ]
            },
            isDirtied:{
                $desc:"To determine whether the form is dirty or not",
                $rtn:"Boollean",
                $paras:[
                    "subId [Optional]: String, id",
                    "penetrate [Optional]: Boolean, penetrate inner modules"
                ]
            },
            checkValid:{
                $desc:"To check if there exists any invalid field",
                $rtn:"Boollean",
                $paras:[
                    "dirtiedOnly [Optional] : Boolean, to determine whether check dirtied controls only",
                    "subId [Optional]: String, id",
                    "penetrate [Optional]: Boolean, penetrate inner modules"
                ]
            },
            checkRequired:{
                $desc:"To check if there exists any empty required field",
                $rtn:"Boollean",
                $paras:[
                    "dirtiedOnly [Optional] : Boolean, to determine whether check dirtied controls only",
                    "subId [Optional]: String, id",
                    "penetrate [Optional]: Boolean, penetrate inner modules"
                ]
            },
            formClear:{
                $desc:"Empty all fields value and field controls",
                $rtn:"Boollean",
                $paras:[
                    "subId [Optional]: String, id",
                    "penetrate [Optional]: Boolean, penetrate inner modules"
                ]
            },
            formReset:{
                $desc:"Resets all field controls to original values",
                $rtn:"Boollean",
                $paras:[
                    "subId [Optional]: String, id",
                    "penetrate [Optional]: Boolean, penetrate inner modules"
                ]
            },
            updateFormValues:{
                $desc:"To update all fields' value according to field controls",
                $rtn:"Boollean",
                $paras:[
                    "subId [Optional]: String, id",
                    "penetrate [Optional]: Boolean, penetrate inner modules"
                ]
            },
            formSubmit:{
                $desc:"To submit the form",
                $rtn:"Boollean",
                $paras:[
                    "dirtiedOnly [Optional] : Boolean, to determine whether submit dirtied controls only",
                    "subId [Optional]: String, id",
                    "penetrate [Optional]: Boolean, penetrate inner modules",
                    "withCaption [Optional] : Boolean, to determine whether include caption(returns {fieldname:{value:xxx,caption:xxx}} ), Default is [false]",
                    "withCaptionField [Optional] : Boolean, to determine whether include caption( returns {valueField:xxx,captionField:xxx}) if the field control name is 'valueField:captionField', Default is [false]"
                ]
            },

            onHotKeydown:{
                $desc:"Fired when keyboard is down",
                $paras:[
                    $profile,
                    "keyboard : Object, keyboard object",
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.c1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var w, arr;xui(id).prepend(w=new xui.UI.Widget({position:'relative'}));"+
                    "w.setCustomStyle('KEY','border:solid 1px').getSubNode('BORDER').append(xui.create('<input />'));"+
                    "w.onHotKeydown(function( profile, key,  e, src ){arr=[];arr.push(['onHotKeydown',,key.key,key.ctrlKey,key.shiftKey,key.altKey])});"+
                    "w.onHotKeypress(function( profile, key,  e, src ){arr.push(['onHotKeypress',,key.key,key.ctrlKey,key.shiftKey,key.altKey]); });"+
                    "w.onHotKeyup(function( profile, key,  e, src ){arr.push(['onHotKeyup',,key.key,key.ctrlKey,key.shiftKey,key.altKey]);alert(arr);});"+
                    "}"
                ]
            },
            onHotKeyup:{
                $desc:"Fired when keyboard is up",
                $paras:[
                    $profile,
                    "keyboard : Object, keyboard object",
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.c2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var w, arr;xui(id).prepend(w=new xui.UI.Widget({position:'relative'}));"+
                    "w.setCustomStyle('KEY','border:solid 1px').getSubNode('BORDER').append(xui.create('<input />'));"+
                    "w.onHotKeydown(function( profile, key,  e, src ){arr=[];arr.push(['onHotKeydown',,key.key,key.ctrlKey,key.shiftKey,key.altKey])});"+
                    "w.onHotKeypress(function( profile, key,  e, src ){arr.push(['onHotKeypress',,key.key,key.ctrlKey,key.shiftKey,key.altKey]); });"+
                    "w.onHotKeyup(function( profile, key,  e, src ){arr.push(['onHotKeyup',,key.key,key.ctrlKey,key.shiftKey,key.altKey]);alert(arr);});"+
                    "}"
                ]
            },
            onHotKeypress:{
                $desc:"Fired when keyboard is pressed",
                $paras:[
                    $profile,
                    "keyboard : Object, keyboard object",
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.c3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var w, arr;xui(id).prepend(w=new xui.UI.Widget({position:'relative'}));"+
                    "w.setCustomStyle('KEY','border:solid 1px').getSubNode('BORDER').append(xui.create('<input />'));"+
                    "w.onHotKeydown(function( profile, key,  e, src ){arr=[];arr.push(['onHotKeydown',,key.key,key.ctrlKey,key.shiftKey,key.altKey])});"+
                    "w.onHotKeypress(function( profile, key,  e, src ){arr.push(['onHotKeypress',,key.key,key.ctrlKey,key.shiftKey,key.altKey]); });"+
                    "w.onHotKeyup(function( profile, key,  e, src ){arr.push(['onHotKeyup',,key.key,key.ctrlKey,key.shiftKey,key.altKey]);alert(arr);});"+
                    "}"
                ]
            },
            onDragEnter:{
                $desc:"Fired when the user drags the Object to a valid drop target",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid",
                    "dragKey : String, the DragDrop key",
                    "dragData : Object, the DragDrop data",
                    "item : Object, the target item Object"
                ],
                $snippet:[
                    "var id='xui.temp.ab1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block,btn1,btn2;xui(id).prepend(block=new xui.UI.Block({position:'relative',width:'200',border:true,dropKeys:['test']})).prepend(btn1=new xui.UI.Button({position:'relative'})).prepend(btn2=new xui.UI.Button({position:'relative'}));"+
                    "btn2.get(0).$noDrop=true;"+
                    "btn1.draggable('test',btn1.getDomId());"+
                    "btn2.draggable('test','abc');"+
                    "block.onDragEnter(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragEnter')});"+
                    "block.onDragLeave(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragLeave')});"+
                    "block.onDrop(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDrop')});"+
                    "block.onDropMarkClear(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#fff')});"+
                    "block.onDropMarkShow(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#ccc')});"+
                    "block.onDropTest(function(p,e,n,k,d,i){return d!='abc';});"+
                    "}"
                ]
            },
            onDragLeave:{
                $desc:"Fired when the user drags the Object leave a valid drop target",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid",
                    "dragKey : String, the DragDrop key",
                    "dragData : Object, the DragDrop data",
                    "item : Object, the target item Object"
                ],
                $snippet:[
                    "var id='xui.temp.ab2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block,btn1,btn2;xui(id).prepend(block=new xui.UI.Block({position:'relative',width:'200',border:true,dropKeys:['test']})).prepend(btn1=new xui.UI.Button({position:'relative'})).prepend(btn2=new xui.UI.Button({position:'relative'}));"+
                    "btn2.get(0).$noDrop=true;"+
                    "btn1.draggable('test',btn1.getDomId());"+
                    "btn2.draggable('test','abc');"+
                    "block.onDragEnter(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragEnter')});"+
                    "block.onDragLeave(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragLeave')});"+
                    "block.onDrop(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDrop')});"+
                    "block.onDropMarkClear(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#fff')});"+
                    "block.onDropMarkShow(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#ccc')});"+
                    "block.onDropTest(function(p,e,n,k,d,i){return d!='abc';});"+
                    "}"
                ]

            },
            onDrop:{
                $desc:"Fired when the user drop the Object to a valid drop target",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid",
                    "dragKey : String, the DragDrop key",
                    "dragData : Object, the DragDrop data",
                    "item : Object, the target item Object"
                ],
                $snippet:[
                    "var id='xui.temp.ab3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block,btn1,btn2;xui(id).prepend(block=new xui.UI.Block({position:'relative',width:'200',border:true,dropKeys:['test']})).prepend(btn1=new xui.UI.Button({position:'relative'})).prepend(btn2=new xui.UI.Button({position:'relative'}));"+
                    "btn2.get(0).$noDrop=true;"+
                    "btn1.draggable('test',btn1.getDomId());"+
                    "btn2.draggable('test','abc');"+
                    "block.onDragEnter(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragEnter')});"+
                    "block.onDragLeave(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragLeave')});"+
                    "block.onDrop(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDrop')});"+
                    "block.onDropMarkClear(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#fff')});"+
                    "block.onDropMarkShow(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#ccc')});"+
                    "block.onDropTest(function(p,e,n,k,d,i){return d!='abc';});"+
                    "}"
                ]
            },
            beforeDrop:{
                $desc:"Fired before the user drop the Object to a valid drop target. If returns false, onDrop and afteDrop will not be triggered",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid",
                    "dragKey : String, the DragDrop key",
                    "dragData : Object, the DragDrop data",
                    "item : Object, the target item Object"
                ]
            },
            afterDrop:{
                $desc:"Fired after the user drop the Object to a valid drop target",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid",
                    "dragKey : String, the DragDrop key",
                    "dragData : Object, the DragDrop data",
                    "item : Object, the target item Object"
                ]
            },
            onDropMarkClear:{
                $desc:"Fired when the user drags the Object leave a valid drop target",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid",
                    "dragKey : String, the DragDrop key",
                    "dragData : Object, the DragDrop data",
                    "item : Object, the target item Object"
                ],
                $snippet:[
                    "var id='xui.temp.ab4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block,btn1,btn2;xui(id).prepend(block=new xui.UI.Block({position:'relative',width:'200',border:true,dropKeys:['test']})).prepend(btn1=new xui.UI.Button({position:'relative'})).prepend(btn2=new xui.UI.Button({position:'relative'}));"+
                    "btn2.get(0).$noDrop=true;"+
                    "btn1.draggable('test',btn1.getDomId());"+
                    "btn2.draggable('test','abc');"+
                    "block.onDragEnter(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragEnter')});"+
                    "block.onDragLeave(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragLeave')});"+
                    "block.onDrop(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDrop')});"+
                    "block.onDropMarkClear(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#fff')});"+
                    "block.onDropMarkShow(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#ccc')});"+
                    "block.onDropTest(function(p,e,n,k,d,i){return d!='abc';});"+
                    "}"
                ]
            },
            onDropMarkShow:{
                $desc:"Fired when the user drags the Object to a valid drop target",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid",
                    "dragKey : String, the DragDrop key",
                    "dragData : Object, the DragDrop data",
                    "item : Object, the target item Object"
                ],
                $snippet:[
                    "var id='xui.temp.ab5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block,btn1,btn2;xui(id).prepend(block=new xui.UI.Block({position:'relative',width:'200',border:true,dropKeys:['test']})).prepend(btn1=new xui.UI.Button({position:'relative'})).prepend(btn2=new xui.UI.Button({position:'relative'}));"+
                    "btn2.get(0).$noDrop=true;"+
                    "btn1.draggable('test',btn1.getDomId());"+
                    "btn2.draggable('test','abc');"+
                    "block.onDragEnter(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragEnter')});"+
                    "block.onDragLeave(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragLeave')});"+
                    "block.onDrop(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDrop')});"+
                    "block.onDropMarkClear(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#fff')});"+
                    "block.onDropMarkShow(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#ccc')});"+
                    "block.onDropTest(function(p,e,n,k,d,i){return d!='abc';});"+
                    "}"
                ]
            },
            onDropTest:{
                $desc:"Fired when the user drags the Object to a valid drop target",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid",
                    "dragKey : String, the DragDrop key",
                    "dragData : Object, the DragDrop data",
                    "item : Object, the target item Object"
                ],
                $snippet:[
                    "var id='xui.temp.ab61'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block,btn1,btn2;xui(id).prepend(block=new xui.UI.Block({position:'relative',width:'200',border:true,dropKeys:['test']})).prepend(btn1=new xui.UI.Button({position:'relative'})).prepend(btn2=new xui.UI.Button({position:'relative'}));"+
                    "btn2.get(0).$noDrop=true;"+
                    "btn1.draggable('test',btn1.getDomId());"+
                    "btn2.draggable('test','abc');"+
                    "block.onDragEnter(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragEnter')});"+
                    "block.onDragLeave(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDragLeave')});"+
                    "block.onDrop(function(p,e,n,k,d,i){block.setHtml(k+':'+d+' onDrop')});"+
                    "block.onDropMarkClear(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#fff')});"+
                    "block.onDropMarkShow(function(p,e,n,k,d,i){block.getSubNode('PANEL').css('background','#ccc')});"+
                    "block.onDropTest(function(p,e,n,k,d,i){return d!='abc';});"+
                    "}"
                ]
            },
            onStartDrag:{
                $desc:"Triggered when the user start to drag",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.ab661'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var list1,list2;xui(id).prepend(list1=new xui.UI.List({position:'relative',width:'200',border:true,dragKey:'test',items:['aa','bb','cc']})).prepend(list2=new xui.UI.List({position:'relative',width:'200',border:true,dragKey:'test',items:['aa','bb','cc']}));"+
                    "list2.onStartDrag(function(p,e,n){return false;});"+
                    "list1.onStartDrag(function(p,e,n){xui.message('onStartDrag');});"+
                    "list1.onDragStop(function(p,e,n){xui.message('onDragStop');});"+
                    "}"
                ]
            },
            onGetDragData:{
                $desc:"Fired when the user start to drag",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.ab661-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var list1,list2;xui(id).append(list1=new xui.UI.List({position:'relative',width:'200',height:50,border:true,dragKey:'test',items:['drag me and drop to the below list']})).append(list2=new xui.UI.List({position:'relative',width:'200',height:50,border:true,dropKeys:'test',items:['drop here']}));"+
                    "list1.onGetDragData(function(p,e,n){return {key:'value'};});"+
                    "list2.onDrop(function(p, e, node, key, data){xui.log(data.data);});"+
                    "}"
                ]
            },
            onDragstop:{
                $desc:"Fired when the user stop the dragging process",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.ab662'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var list1,list2;xui(id).prepend(list1=new xui.UI.List({position:'relative',width:'200',border:true,dragKey:'test',items:['aa','bb','cc']})).prepend(list2=new xui.UI.List({position:'relative',width:'200',border:true,dragKey:'test',items:['aa','bb','cc']}));"+
                    "list2.onStartDrag(function(p,e,n){return false;});"+
                    "list1.onStartDrag(function(p,e,n){xui.message('onStartDrag');});"+
                    "list1.onDragStop(function(p,e,n){xui.message('onDragStop');});"+
                    "}"
                ]
            },
            beforeClickEffect:{
                $desc:"Fired when the user click the specified element. If returns false, the default click effect will be ignored",
                $paras:[
                    $profile,
                    "item : Object, the data item Object",
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid",
                    "type : String, 'mousedown'or 'mouseup'"
                ],
                $snippet:[
                    "var id='xui.temp.ab7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).append(btn=new xui.UI.Button({position:'relative'}));"+
                    "btn.beforeClickEffect(function(p,i,e,s,t){xui([s]).css('border',t=='mousedown'?'solid 1px;':'');return false;});"+
                    "}"
                ]
            },
            beforeHoverEffect:{
                $desc:"Fired when the mouse hover the specified element. If returns false, the default mouse hover effect will be ignored",
                $paras:[
                    $profile,
                    "item : Object, the data item Object",
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid",
                    "type : String, 'mouseover'or 'mouseout'"
                ],
                $snippet:[
                    "var id='xui.temp.ab8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).append(btn=new xui.UI.Button({position:'relative'}));"+
                    "btn.beforeHoverEffect(function(p,i,e,s,t){xui([s]).css('border',t=='mouseover'?'solid 1px;':'');return false;});"+
                    "}"
                ]
            },
            beforeNextFocus:{
                $desc:"Fired when the mouse hover the specified element. If returns false, the default 'set focus to the next' action will be ignored",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "k : Object, {key:keycode string, type: event type, ctrlKey:ctrl status, shiftKey:shift status, altKey:alt status}",
                    "shift: Boolean, Shift keyboard is pressed or not",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.ab9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).append(new xui.UI.Button({position:'relative'})).append(new xui.UI.Button({position:'relative'})).append(btn=new xui.UI.Button({position:'relative'})).append(new xui.UI.Button({position:'relative'}));"+
                    "btn.beforeNextFocus(function(){return false;});"+
                    "}"
                ]
            },
            beforeInputAlert:{
                $desc:"Fired before one of controls in form will show the 'invalid' or 'required' alert window. If returns false, the default action will be ignored",
                $paras:[
                    $profile,
                    "ctrlPrf : xui.UIProfile, the input control's profile object",
                    "type : String, alert type. invalid or required"
                ]
            },
            beforeFormReset:{
                $desc:"Fired before the form reset. If returns false, the default action will be ignored",
                $paras:[
                    $profile,
                    "elems : xui.absValue, All input controls",
                    "subId: String, the id of sub container"
                ]
            },
            afterFormReset:{
                $desc:"Fired after the form reset",
                $paras:[
                    $profile,
                    "elems : xui.absValue, All input controls",
                    "subId: String, the id of sub container"
                ]
            },
            beforeFormSubmit:{
                $desc:"Fired before the form submit. If returns false, the default action will be ignored",
                $paras:[
                    $profile,
                    "data : Ojbect, the submit data",
                    "subId: String, the id of sub container"
                ]
            },
            afterFormSubmit:{
                $desc:"Fired after the form submit",
                $paras:[
                    $profile,
                    "data : Ojbect, the submit data",
                    "subId: String, 子容器id"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI Class",
        getFromDom:{
            $desc:"Gets an UI Object according to a given DOM element or id",
            $rtn:"xui.UI",
            $paras:[
                "id [Required] : String, a DOM element or id"
            ],
            $snippet:[
                "alert(xui.UI.getFromDom('xui.UI.TreeBar-CMD:a:1').getAlias());"
            ]
        },
        setDftProp:{
            $desc:"to specify defult properties for all UI class",
            $rtn:"xui.UI",
            $paras:[
                "prop [Required] : key/value pairs"
            ]
        },
        buildCSSText:{
            $desc:"Builds CSS text from a key/value pairs Object",
            $rtn:"String",
            $paras:[
                "hash [Required] : key/value pairs"
            ],
            $snippet:[
                "alert(xui.UI.Button.buildCSSText({KEY:{left:xui.browser.ie?0:null,overflow:xui.browser.gek?'auto':null,'font-size':'12px'},BORDER:{'_line-height':10,'-moz-display':'none'}}));"+
                "alert(xui.UI.Button.buildCSSText({KEY:{left:xui.browser.ie?0:null,overflow:xui.browser.gek?'auto':null,'font-size':'12px'},BORDER:{'_line-height':10,'-moz-display':'none'}},'mac'));"
            ]
        },
        adjustData:{
            $desc:"Adjusts an input key/value pairs to appropriate data format for building UI",
            $rtn:"Object",
            $paras:[
                "profile [Required] : the target profile",
                "hashIn [Required] : key/value pairs, the data to be adjusted",
                "hashOut [Optional] : key/value pairs, the out data"
            ],
            $snippet:[
                "alert(xui.serialize(xui.UI.adjustData(null, {a:1,b:2,c:'$date.MS',d:'@xui.ini.path',renderer:function(){return 'cap';}})))"
            ]
        },
        addTemplateKeys:{
            $desc:"Adds a set of template keys to the current UI Class",
            $rtn:'[self]',
            $paras:[
                "arr [Required] : Array, a set of keys"
            ],
            $snippet:[
                "alert(xui.serialize(xui.UI.Div.$Keys)); alert(xui.serialize(xui.UI.Div.addTemplateKeys(['A','B']).$Keys))"
            ],
            $memo:"Generally, you don't need to use this function manually in the normal project"
        },
        getAppearance:{
            $desc:"Gets the appearance Object",
            $rtn:'Object',
            $snippet:[
                "alert(xui.serialize(xui.UI.Div.getAppearance()))"
            ],
            $memo:"Generally, you don't need to use this function manually in the normal project"
        },
        getTemplate:{
            $desc:"Gets template Object according to a given cache id",
            $rtn:'Object',
            $paras:[
                "cacheId [Optional] : String"
            ],
            $snippet:[
                "alert(xui.serialize(xui.UI.Div.getTemplate()))"
            ],
            $memo:"Generally, you don't need to use this function manually in the normal project"
        },
        getBehavior:{
            $desc:"Gets behavior Object",
            $rtn:'Object',
            $snippet:[
                "alert(xui.serialize(xui.UI.Link.getBehavior()))"
            ],
            $memo:"Generally, you don't need to use this function manually in the normal project"
        },
        setAppearance:{
            $desc:"Sets the appearance Object",
            $rtn:'[self]',
            $paras:[
                "hash [Required] : key/value pairs"
            ],
            $memo:"Generally, you don't need to use this function manually in the normal project"
        },
        setTemplate:{
            $desc:"Sets a template Object to a specified cache id",
            $rtn:'[self]',
            $paras:[
                "hash [Required] : key/value pairs",
                "cacheId [Optional] : String"
            ],
            $memo:"Generally, you don't need to use this function manually in the normal project"
        },
        setBehavior:{
            $desc:"Sets behavior Object",
            $rtn:'[self]',
            $memo:"Generally, you don't need to use this function manually in the normal project"
        },
        cacheData:{
            $desc:"Sets the data in the cache at the specified key",
            $rtn:'[self]',
            $paras:[
                "key [Required] : String, cache key",
                "data [Optional] : Object. Default is [undifined], that indicates to remove the cacke at the specified key"
            ],
            $snippet:[
                "xui.UI.cacheData('a',1); alert(xui.UI.getCachedData('a')); xui.UI.cacheData('a')"
            ]
        },
        getCachedData:{
            $desc:"Gets the data in the cache at the specified key",
            $rtn:"Object",
            $paras:[
                "key [Required] : String, cache key"
            ],
            $snippet:[
                "xui.UI.cacheData('a',1); alert(xui.UI.getCachedData('a')); xui.UI.cacheData('a')"
            ]
        },
        getDragData:{
            $desc:"Gets drag data from the specified profile",
            $rtn:"Object",
            $paras:[
                "profile [Required] : the target profile",
                "event: DOM event Object",
                "node [Required] : the related DOM element"
            ],
            $memo:"Generally, you don't need to use this function manually. This function might be overwrote in the sub Class"
        },
        getDragKey:{
            $desc:"Gets drag key from the specified profile",
            $rtn:"String",
            $paras:[
                "profile [Required] : the target profile",
                "node [Required] : the related DOM element"
            ],
            $memo:"Generally, you don't need to use this function manually. This function might be overwrote in the sub Class"
        },
        getDropKeys:{
            $desc:"Gets drop keys from the specified profile",
            $rtn:"Array",
            $paras:[
                "profile [Required] : the target profile",
                "node [Required] : the related DOM element"
            ],
            $memo:"Generally, you don't need to use this function manually. This function might be overwrote in the sub Class"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getAutoTips:{
              $desc:"To determine whether the control show tips automatically or not",
              $rtn:"Boolean"
            },
            setAutoTips:{
              $desc:"Specify whether the control show tips automatically or not",
              $rtn:"[self]",
              $paras:[
                  "value [Required] : Boolean",
                  $force
              ]
            },
            getClassName:{
              $desc:"Gets class name",
              $rtn:"String"
            },
            setClassName:{
              $desc:"Sets class name",
              $rtn:"[self]",
              $paras:[
                  "value [Required] : String",
                  $force
              ]
            },
            hoverPop:{
                $desc:"Sets pop window triggered by mouse hover",
                 $rtn:"[self]",
                $paras:[
                    "node [Reqired]  : Object/xui.Dom/Element. The pop window",
                    "type [Optional] : String, refer to hoverPopTYpe, [null] will clear the setting",
                    "beforePop[Optional] : Function(prf, node, e, src),  triggered before the window pop",
                    "beforeHide[Optional] : Function(prf, node, e, src, trigger,item), triggered before the window hide",
                    "parent [Optional] : xui.Dom Object. the parent element to hold the pop element. Default is [document.body]",
                    "groupid[Optional] : String. The group id"
                ]
            },
            getTheme:{
                $desc:"Gets the current control's theme key",
                $rtn:"String"
            },
            setTheme:{
                $desc:"Sets a specific theme key to the current set of controls",
                $rtn:"[self]",
                $paras:[
                    "key [Optional] : String, the theme key"
                ]
            },
            busy:{
                $desc:"Shows busy layer(A special top zindex div covers the UI)",
                $rtn:"[self]",
                $paras:[
                    "coverAll [Optional] : Boolean,  to determine if cover all UI",
                    "html [Optional] : String, the busy description html",
                    "key [Optional] : String, the busy div's parent key. Default is 'BORDER'",
                    "subId [Optional] : String, the sub panel's id "
                ]
            },
            free:{
                $desc:"Hide busy layer",
                $rtn:"[self]"
            },
            reLayout:{
                $desc:"relayout the control. It'll trigger the control's onresize event",
                $rtn:"[self]",
                $paras:[
                    "force [Optional] : Boolean, force to relayou or not"
                ]
            },
            getParent:{
                $desc:"Gets the current widget's parent",
                $rtn:"xui.UI"
            },
            getChildrenId:{
                $desc:"Gets the current widget's parent container id",
                $rtn:"String"
            },
            getChildren:{
                $desc:"Gets the current widget's children",
                $rtn:"xui.UI",
                $paras:[
                    "subId [Optional] : String, the sub container's id. [true] for all sub containers",
                    "all [Optional] : Boolean, returns all inner objects or just the first layer"
                ],
                $snippet:[
                    "var id='xui.temp.ui-1e'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var tabs;xui(id).prepend(tabs=xui.create({key:'xui.UI.Tabs',properties:{dock:'none',width:200,height:100,position:'relative',items:['a','b','c'],value:'a'},children:[[{key:'xui.UI.Button'},'a'],[{key:'xui.UI.Button'},'b'],[{key:'xui.UI.Button'},'c']]}));"+
                    "xui.asyRun(function(){alert(tabs.getChildren().get().length);alert(tabs.getChildren('a').get().length);},1000);"+
                    "}"
                ]
            },
            toHtml:{
                $desc:"To build HTML string from the current Object, and returns it",
                $rtn:"String",
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').boxing().toHtml())"
                ]
            },
            getRenderer:{
                $desc:"Gets the renderer function from the first UIProfile",
                $rtn:"Function",
                $snippet:[
                    "var id='xui.temp.ui-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var link=new xui.UI.Link({position:'relative'});"+
                    "link.setRenderer(function(item){return '['+item.caption+']'});"+
                    "xui(id).prepend(link);"+
                    "xui.asyRun(function(){alert(link.getRenderer());},1000);"+
                    "}"
                ]
            },
            setRenderer:{
                $desc:"Sets the renderer function to all the UIProfiles",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Function",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui-2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var link=new xui.UI.Link({position:'relative'});"+
                    "link.setRenderer(function(item){return '<span style=\"width:15px;height:15px;background:url(img/img.gif)\"></span> ['+item.caption+']'});"+
                    "xui(id).prepend(link);"+
                    "xui.asyRun(function(){alert(link.getRenderer());},1000);"+
                    "}"
                ]
            },
            getContainer:{
                $desc:"Gets container Object(xui.Dom) or root node",
                $rtn:"xui.Dom",
                $paras:[
                    "subId [Optional] : container's sub id"
                ]
            },
            getRoot:{
                $desc:"Gets root Object(xui.Dom) of the UIProfile",
                $rtn:"xui.Dom",
                $snippet:[
                "alert(xui.UIProfile.getFromDom('btnLang').boxing().getRoot());"
                ]
            },
            getRootNode:{
                $desc:"Gets the root DOM element of the UIProfile",
                $rtn:"Element",
                $snippet:[
                "alert(xui.UIProfile.getFromDom('btnLang').boxing().getRootNode());"
                ]
            },
            append:{
                $desc:"Appends a set of xui.UIProfile objects to the inside of the first profile",
                $rtn:"[self]",
                $paras:[
                    "target [Required] : a xui.UI ojbect(including a set of xui.UIProfile objects)",
                    "subId [Optional] : String, the sub id that determines the [target] will be added to which sub DOM node. This parameter can be [false] too, that means the [target] will be appended to DOM only, no link created between the [target] UIProfiles and the parent UIProfile"
                ],
                $snippet:[
                    "var id='xui.temp.ui2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block,btn1,btn2;xui(id).prepend(block=new xui.UI.Block({border:true}));"+
                    "block.append(btn1=new xui.UI.Button({position:'relative'})).append(btn2=new xui.UI.Button({position:'relative'}), false);"+
                    "alert(btn1.get(0).parent===block.get(0));alert(btn2.get(0).parent);"+
                    "}"
                ]
            },
            removeChildren:{
                $desc:"Removes a set of xui.UIProfile objects from each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "subId [Optional] : String, the sub id that determines which profile will be removed. [true] for all profiles.  Default is [true]",
                    "bdestroy : Boolean, to be destroyed or not. Default is [false]"
                ],
                $snippet:[
                    "var id='xui.temp.ui2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block,btn1,btn2;xui(id).prepend(block=new xui.UI.Block({border:true}));"+
                    "block.append(btn1=new xui.UI.Button({position:'relative'})).append(btn2=new xui.UI.Button({position:'relative'}), false);"+
                    "xui.asyRun(function(){block.removeChildren();},1000)"+
                    "}"
                ]
            },
            clone:{
                $desc:"Creates a copy of the set of UIProfiles",
                $rtn:"xui.UI",
                $snippet:[
                    "var id='xui.temp.ui3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block,btn1,btn2;xui(id).prepend(block=new xui.UI.Block({position:'relative',border:true}));"+
                    "block.append(btn1=new xui.UI.Button({position:'relative'})).append(btn2=new xui.UI.Button({position:'relative'}), false);"+
                    "\n // Notice: here, only btn1 will be cloned :\n"+
                    "xui(id).append(block.clone())"+
                    "}"
                ]
            },
            destroy:{
                $desc:"To destroy current Object",
                $snippet:[
                    "var id='xui.temp.ui4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block;xui(id).prepend(block=new xui.UI.Block({position:'relative',border:true}));"+
                    "xui.asyRun(function(){block.destroy();},1000);"+
                    "}"
                ]
            },
            isDestroyed:{
                $desc:"To determine whether the current control is destroyed or not"
            },
            draggable:{
                $desc:"Enables/disables the draggable functionality on the specified elements",
                $rtn:"[self]",
                $paras:[
                    "dragKey [Optional] : String, the dragKey for xui.DragDrop",
                    "dragData [Optional] : Object, the dragData for xui.DragDrop",
                    "key [Optional] : String, a template key in UIProfile that will determine which elements will be the target elements. Default is 'KEY'",
                    "options [Optional] : key/value Object. Go <strong>xui.DragDrop.startDrag</strong> for the profile struct detail",
                    "target [Optional] : xui.Dom, drag target"
                ],
                $snippet:[
                    "var id='xui.temp.ui5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block,btn;xui(id).prepend(block=new xui.UI.Block({position:'relative',border:true,dropKeys:['test']})).prepend(btn=new xui.UI.Button({position:'relative'}));"+
                    "block.onDrop(function(profile, e, node, key, data){var btn=xui.UIProfile.getFromDom(data).boxing();profile.boxing().append(btn); btn.draggable(false)});"+
                    "btn.draggable('test',btn.getDomId());"+
                    "}"
                ]
            },
            getLeft:{
                $desc:"Gets the left(corresponding to the CSS value of the root DOM element) property value on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui10'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setLeft(20); alert(btn.getLeft())},1000)"+
                    "}"
                ]
            },
            setLeft:{
                $desc:"Sets the left(corresponding to the CSS value of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setLeft(20); alert(btn.getLeft())},1000)"+
                    "}"
                ]
            },
            getRight:{
                $desc:"Gets the right(corresponding to the CSS value of the root DOM element) property value on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui12'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setRight(20); alert(btn.getRight())},1000)"+
                    "}"
                ]
            },
            setRight:{
                $desc:"Sets the right(corresponding to the CSS value of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setRight(20); alert(btn.getRight())},1000)"+
                    "}"
                ]
            },
            getTop:{
                $desc:"Gets the top(corresponding to the CSS value of the root DOM element) property value on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui14'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTop(20); alert(btn.getTop())},1000)"+
                    "}"
                ]
            },
            setTop:{
                $desc:"Sets the top(corresponding to the CSS value of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui15'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTop(20); alert(btn.getTop())},1000)"+
                    "}"
                ]
            },
            getBottom:{
                $desc:"Gets the bottom(corresponding to the CSS value of the root DOM element) property value on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui16'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTop('auto').setBottom(20); alert(btn.getBottom())},1000)"+
                    "}"
                ]
            },
            setBottom:{
                $desc:"Sets the bottom(corresponding to the CSS value of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui17'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTop('auto').setBottom(20); alert(btn.getBottom())},1000)"+
                    "}"
                ]
            },
            getWidth:{
                $desc:"Gets the width(corresponding to the CSS value of the root DOM element) property value on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui18'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setWidth(100); alert(btn.getWidth())},1000)"+
                    "}"
                ]
            },
            setWidth:{
                $desc:"Sets the width(corresponding to the CSS value of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                 $paras:[
                    "value [Required] : nonnegative Number",
                    $force
                ],
               $snippet:[
                    "var id='xui.temp.ui19'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setWidth(100); alert(btn.getWidth())},1000)"+
                    "}"
                ]
            },
            getHeight:{
                $desc:"Gets the height(corresponding to the CSS value of the root DOM element) property value on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui20'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setHeight(100); alert(btn.getHeight())},1000)"+
                    "}"
                ]
            },
            setHeight:{
                $desc:"Sets the height(corresponding to the CSS value of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : nonnegative Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui21'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setHeight(100); alert(btn.getHeight())},1000)"+
                    "}"
                ]
            },
            getDisplay:{
                $desc:"Gets the display(corresponding to the CSS value of the root DOM element) property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.ui22'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setDisplay('none'); alert(btn.getDisplay())},1000)"+
                    "}"
                ]
            },
            setDisplay:{
                $desc:"Sets the display(corresponding to the CSS value of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : corresponding CSS value",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui23'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setDisplay('none'); alert(btn.getDisplay())},1000)"+
                    "}"
                ]
            },
            getVisibility:{
                $desc:"Gets the visibility(corresponding to the CSS value of the root DOM element) property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.ui24'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setVisibility('hidden'); alert(btn.getVisibility())},1000)"+
                    "}"
                ]
            },
            setVisibility:{
                $desc:"Sets the visibility(corresponding to the CSS value of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : corresponding CSS value",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui25'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setVisibility('hidden'); alert(btn.getVisibility())},1000)"+
                    "}"
                ]
            },
            getZIndex:{
                $desc:"Gets the z-index(corresponding to the CSS value of the root DOM element) property value on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui26'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button).prepend(new xui.UI.Button({zIndex:10}));"+
                    "xui.asyRun(function(){btn.setZIndex(20); alert(btn.getZIndex())},1000)"+
                    "}"
                ]
            },
            setZIndex:{
                $desc:"Sets the z-index(corresponding to the CSS value of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : corresponding CSS value",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui27'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button).prepend(new xui.UI.Button({zIndex:10}));"+
                    "xui.asyRun(function(){btn.setZIndex(20); alert(btn.getZIndex())},1000)"+
                    "}"
                ]
            },
            getSelectable:{
                $desc:"Gets the selectable property",
                $rtn:"Boolean"
            },
            setSelectable:{
                $desc:"Sets the selectable property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getPosition:{
                $desc:"Gets the position(corresponding to the CSS value of the root DOM element) property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.ui25'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setPosition('static'); alert(btn.getPosition())},1000)"+
                    "}"
                ]
            },
            setPosition:{
                $desc:"Sets the position(corresponding to the CSS value of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : corresponding CSS value",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui28'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setPosition('static'); alert(btn.getPosition())},1000)"+
                    "}"
                ]
            },
            getTabindex:{
                $desc:"Gets the tabIndex(corresponding to the tabIndex property of the root DOM element) property value on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui29'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTabindex('10'); alert(btn.getTabindex())},1000)"+
                    "}"
                ]
            },
            setTabindex:{
                $desc:"Sets the tabIndex(corresponding to the tabIndex property of the root DOM element) property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui30'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTabindex('10'); alert(btn.getTabindex())},1000)"+
                    "}"
                ]
            },
            getTips:{
                $desc:"Gets the tips string value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.ui44'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTips('a b c d'); alert(btn.getTips())},1000)"+
                    "}"
                ]
            },
            setTips:{
                $desc:"Sets the tips string value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui45'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setTips('a b c d'); alert(btn.getTips())},1000)"+
                    "}"
                ]
            },
            getDisableTips:{
                $desc:"To determine whether this UI control disabled tips or not",
                $rtn:"Boolean"
            },
            setDisableTips:{
                $desc:"Specifys whether this UI control disable tips or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getDisableClickEffect:{
                $desc:"To determine whether this UI control disabled mouse click effection or not",
                $rtn:"Boolean"
            },
            setDisableClickEffect:{
                $desc:"Specifys whether this UI control disable mouse click effection or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getDisableHoverEffect:{
                $desc:"To determine whether this UI control disabled mouse hover effection or not",
                $rtn:"Boolean"
            },
            setDisableHoverEffect:{
                $desc:"Specifys whether this UI control disable mouse hover effection or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getSpaceUnit:{
                $desc:"To set the space unit for position(left, top), size(width, height) etc.",
                $rtn:"String"
            },
            setSpaceUnit:{
                $desc:"To get the space unit.",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. '', 'px' , 'em'.",
                    $force
                ]
            },
            getDisabled:{
                $desc:"To determine whether this UI control is disabled or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.ui46'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setDisabled(true); alert(btn.getDisabled())},1000)"+
                    "}"
                ]
            },
            setDisabled:{
                $desc:"Specifys whether this UI control is disabled or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui47'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setDisabled(true); alert(btn.getDisabled())},1000)"+
                    "}"
                ]
            },
            getLocked:{
                $desc:"To determine whether the control be locked automatically not",
                $rtn:"Boolean"
            },
            setLocked:{
                $desc:"To set whether the control be locked automatically not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean, default is [false]",
                    $force
                ]
            },
            getDefaultFocus:{
                $desc:"To determine whether the control be focused automatically not",
                $rtn:"Boolean"
            },
            setDefaultFocus:{
                $desc:"To set whether the control be focused automatically not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean, default is [false]",
                    $force
                ]
            },
            getHoverPop:{
                $desc:"Gets hover pop target (alias)",
                $rtn:"String"
            },
            setHoverPop:{
                $desc:"Sets hover pop target (alias)",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the pop target's alias, which has to be in the same host",
                    $force
                ]
            },
            getHoverPopType:{
                $desc:"Gets hover pop type",
                $rtn:"String"
            },
            setHoverPop:{
                $desc:"Sets hover pop type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, one of 'outer','inner','outerleft-outertop','left-outertop','center-outertop','right-outertop','outerright-outertop','outerleft-top','left-top','center-top','right-top','outerright-top','outerleft-middle','left-middle','center-middle','right-middle','outerright-middle','outerleft-bottom','left-bottom','center-bottom','right-bottom','outerright-bottom','outerleft-outerbottom','left-outerbottom','center-outerbottom','right-outerbottom','outerright-outerbottom','1','2','3','4','12','21'. Default is 'outer'",
                    $force
                ]
            },
            getDock:{
                $desc:"Gets the dock property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.ui50'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "alert(btn.getDock())"+
                    "}"
                ]
            },
            setDock:{
                $desc:"Sets the dock property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : 'none','top','bottom','left','right','center','middle','origin','width','height','fill','cover'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui51'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button());"+
                    "var arr=['none','top','bottom','left','right','center','middle','origin','width','height','fill','cover'];"+
                    "xui.Thread(null,[function(id){if(!arr.length)return xui.Thread.abort(id); var type=arr.shift();btn.setDock(type).setCaption(type);}],1000,null,null,null,true).start();"+
                    "}"
                ]
            },
            getDockFloat:{
                $desc:"Gets the dockFloat property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.ui52'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "alert(btn.getDockFloat())"+
                    "}"
                ]
            },
            setDockFloat:{
                $desc:"Sets the dockFloat property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui53'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var div1,btn2;xui(id).prepend(div1=new xui.UI.Div({dock:'top',height:20})).prepend(btn2=new xui.UI.Button({zIndex:10}));"+
                    "div1.setDockFloat(true).setCustomStyle({KEY:'background:#00ff00'});"+
                    "var arr=['none','top','bottom','left','right','center','middle','origin','width','height','fill','cover'];"+
                    "xui.Thread(null,[function(id){if(!arr.length)return xui.Thread.abort(id); var type=arr.shift();btn2.setDock(type).setCaption(type);}],1000,null,null,null,true).start();"+
                    "}",
                    "var id='xui.temp.ui54'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var div1,btn2;xui(id).prepend(div1=new xui.UI.Div({dock:'top',height:20})).prepend(btn2=new xui.UI.Button({zIndex:10}));"+
                    "div1.setDockFloat(false).setCustomStyle({KEY:'background:#00ff00'});"+
                    "var arr=['none','top','bottom','left','right','center','middle','origin','width','height','fill','cover'];"+
                    "xui.Thread(null,[function(id){if(!arr.length)return xui.Thread.abort(id); var type=arr.shift();btn2.setDock(type).setCaption(type);}],1000,null,null,null,true).start();"+
                    "}"
                ]
            },
            getDockMargin:{
                $desc:"Gets dock margin on the first UIProfile",
                $rtn:"Object",
                $snippet:[
                    "var id='xui.temp.ui60'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "alert(xui.serialize(btn.getDockMargin()))"+
                    "}"
                ]
            },
            setDockMargin:{
                $desc:"Sets dock margin on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : {left:Number,right:Number,top:Number,bottom:Number}",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui61'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button());"+
                    "btn.setDockMargin({left:20,top:20,right:10,bottom:10});"+
                    "var arr=['none','top','bottom','left','right','center','middle','origin','width','height','fill','cover'];"+
                    "xui.Thread(null,[function(id){if(!arr.length)return xui.Thread.abort(id); var type=arr.shift();btn.setDock(type).setCaption(type);}],1000,null,null,null,true).start();"+
                    "}",
                    "var id='xui.temp.ui61-2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var div1,btn2;xui(id).prepend(div1=new xui.UI.Div({dock:'top',height:20})).prepend(btn2=new xui.UI.Button({zIndex:10}));"+
                    "div1.setDockMargin({left:20,top:20,right:10,bottom:10}).setCustomStyle({KEY:'background:#00ff00'});"+
                    "var arr=['none','top','bottom','left','right','center','middle','origin','width','height','fill','cover'];"+
                    "xui.Thread(null,[function(id){if(!arr.length)return xui.Thread.abort(id); var type=arr.shift();btn2.setDock(type).setCaption(type);}],1000,null,null,null,true).start();"+
                    "}"
                ]
            },
            getDockOrder:{
                $desc:"Gets dock order on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui70'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "alert(btn.getDockOrder())"+
                    "}"
                ]
            },
            setDockOrder:{
                $desc:"Sets dock order on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui72'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var div1,btn2;xui(id).prepend(div1=new xui.UI.Div({dock:'top',height:20})).prepend(btn2=new xui.UI.Button({zIndex:10}));"+
                    "div1.setDockOrder(1).setDock('top').setCustomStyle({KEY:'background:#00ff00'});"+
                    "btn2.setDockOrder(2).setDock('top');"+
                    "xui.asyRun(function(){div1.setDockOrder(3)},1000)"+
                    "}"
                ]
            },
            getDockIgnore:{
                $desc:"Gets the dockIgnore property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.ui75'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'fill'}));"+
                    "alert(btn.getDockIgnore())"+
                    "}"
                ]
            },
            setDockIgnore:{
                $desc:"Sets the dockIgnore property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui76'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'fill'}));"+
                    "xui.asyRun(function(){xui(id).width(200);},1000);"+
                    "xui.asyRun(function(){btn.setDockIgnore(true);xui(id).width(300);},2000);"+
                    "xui.asyRun(function(){btn.setDockIgnore(false);xui(id).width(400);},3000);"+
                    "}"
                ]
            },
            getDockStretch:{
                $desc:"Gets the dock stretch parameter on the dock cross axis",
                $rtn:"String"
            },
            setDockStretch:{
                $desc:"Sets the stretch parameter on the dock cross axis. (It will cover the parent container's 'conDockStretch')",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui750'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'top',caption:'50%',dockStretch:'0.5'}));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'top',caption:'25%',dockStretch:'0.25'}));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'top',caption:'25%',dockStretch:'0.25'}));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'top',caption:'fixed',dockStretch:'fixed'}));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'top',caption:'100%',dockStretch:'stretch'}));"+
                    "}"
                ]
            },
            getDockIgnoreFlexFill:{
                $desc:"To determine whether to ignore the conDockFlexFill property of the parent's container",
                $rtn:"String"
            },
            setDockIgnoreFlexFill:{
                $desc:"To specify whether to ignore the conDockFlexFill property of the parent's container",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui750'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var block;xui(id).prepend(block=new xui.UI.Block({width:200,conDockFlexFill:'both'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',caption:'dockIgnoreFlexFill:true'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',caption:'dockIgnoreFlexFill:false'}));"+
                    "var btn;block.append(btn=new xui.UI.Button({dock:'top',caption:'dockIgnoreFlexFill:false'}));"+
                    "}"
                ]
            },
            getDockMinH:{
                $desc:"Gets dock minimal height on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui77'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'fill'}));"+
                    "alert(btn.getDockMinH())"+
                    "}"
                ]
            },
            setDockMinH:{
                $desc:"Sets dock minimal height on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui81'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"overflow:visible;border:solid 1px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'height'}));"+
                    "xui.asyRun(function(){btn.setDockMinH(100);xui(id).height(80);},1000);"+
                    "xui.asyRun(function(){btn.setDockMinH(50);xui(id).height(50);},2000);"+
                    "}"
                ]
            },
            getDockMaxH:{
                $desc:"Gets dock max height on the first UIProfile",
                $rtn:"Number"
            },
            setDockMaxH:{
                $desc:"Sets dock max height on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getDockMinW:{
                $desc:"Gets dock minimal width on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ui79'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'fill'}));"+
                    "alert(btn.getDockMinW())"+
                    "}"
                ]
            },
            setDockMinW:{
                $desc:"Sets dock minimal width on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ui82'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'width'}));"+
                    "xui.asyRun(function(){btn.setDockMinW(300);xui(id).width(200);},1000);"+
                    "xui.asyRun(function(){btn.setDockMinW(50);xui(id).width(100);},2000);"+
                    "}"
                ]
            },
            getDockMaxW:{
                $desc:"Gets dock max width on the first UIProfile",
                $rtn:"Number"
            },
            setDockMaxW:{
                $desc:"Sets dock max width on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getShowEffects:{
                $desc:"Gets the show effects string or object on the first UIProfile",
                $rtn:"Object/String"
            },
            setShowEffects:{
                $desc:"Sets the show effects string or object on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String or Object",
                    $force
                ]
            },
            getHideEffects:{
                $desc:"Gets the hide effects string or object on the first UIProfile",
                $rtn:"Object/String"
            },
            setHideEffects:{
                $desc:"Sets the hideeffects string or object on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String or Object",
                    $force
                ]
            },
            getRotate:{
                $desc:"Gets the control's rotate prop",
                $rtn:"Number"
            },
            setRotate:{
                $desc:"Sets the control's rotate prop",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number. 0~360",
                    $force
                ]
            },
            getDomId:{
                $desc:"Gets the first profile's dom id string",
                $rtn:"String",
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').boxing().getDomId())"
                ]
            },
            getSubNode:{
                $desc:"Gets one or a set of specified inner DOM elements(in the corresponding DOM element of the first profile) according to the given [key] and [subId]",
                $rtn:"xui.dom",
                $paras:[
                    "key [Required] : String, key string",
                    "subId [Optional] : String or [true]. [true] for getting all the sub nodes with the specified [key]"
                ],
                $snippet:[
                    "alert(xui.UIProfile.getFromDom('btnLang').boxing().getSubNode('KEY').id());"+
                    "alert(xui.UIProfile.getFromDom('xui.UI.TreeBar:a:').boxing().getSubNode('ITEM','a').id());"+
                    "alert(xui.UIProfile.getFromDom('xui.UI.TreeBar:a:').boxing().getSubNode('ITEM',true).get().length);"
                ],
                $memo:"The [subId] parameter is for those [xui.absList] profiles only"
            },
            setDomId:{
                $desc:"Sets a specified dom id to the first profile",
                $rtn:"[self]",
                $paras:[
                    "id [Required] : String, id string"
                ],
                $snippet:[
                    "var logo=xui.UIProfile.getFromDom('btnLang').boxing(); alert(logo.getDomId()); logo.setDomId('logo1'); alert(logo.getDomId());logo.setDomId('btnLang'); alert(logo.getDomId());"
                ]
            },
            hide:{
                $desc:"To hide the set of UIProfile",
                $rtn:"[self]",
                $snippet:[
                    "var logo=xui.UIProfile.getFromDom('btnLang').boxing(); logo.hide(); xui.asyRun(function(){logo.show();},1000);"
                ]
            },
            show:{
                $desc:"To show the set of UIProfile",
                $rtn:"[self]",
                $paras:[
                    "parent [Required] : xui.UIProfile, xui.UI ojbect, Element or xui.Dom Object",
                    "subId [Optional] : String, the sub id that determines the set of UIProfiles will be added to",
                    "left [Optional] : Number, the css left value",
                    "top [Optional] : Number, the css top value"
                ],
                $snippet:[
                    "var logo=xui.UIProfile.getFromDom('btnLang').boxing(); logo.hide(); xui.asyRun(function(){logo.show();},1000);"
                ]
            },
            // xui.UI.prototype
            popUp:{
                $desc:"Pops it onto the top, and sets a trigger function to allow user click out of the first element's region to hide it",
                $rtn:"String, the blur trigger id",
                $paras:[
                    "pos [Reqired] : {left:Number,top:Number} Object(The css left and top value) or xui.Dom Object(for getting position)",
                    "type [Optional] : String. one of 'outer','inner','outerleft-outertop','left-outertop','center-outertop','right-outertop','outerright-outertop','outerleft-top','left-top','center-top','right-top','outerright-top','outerleft-middle','left-middle','center-middle','right-middle','outerright-middle','outerleft-bottom','left-bottom','center-bottom','right-bottom','outerright-bottom','outerleft-outerbottom','left-outerbottom','center-outerbottom','right-outerbottom','outerright-outerbottom','1','2','3','4','12','21'.Default is 'outer'",
                    "parent [Optional] : xui.Dom Object. the parent element to hold the pop element. Default is [document.body]",
                    "trigger [Required] : Function or [null] : the hidden trigger function",
                    "group [Optional] : xui.Dom Object. this trigger's group Object"
                ]
            },
            refresh:{
                $desc:"To refresh the set of UIProfiles",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.ui91'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({dock:'width'}));"+
                    "btn.get(0).properties.caption='new caption';"+
                    "xui.asyRun(function(){btn.refresh();},1000);"+
                    "}"
                ]
            },
            render:{
                $desc:"To render the set of UIProfiles to DOM",
                $rtn:"[self]",
                $paras:[
                    "triggerLayOut [Optional] : Boolean, triggers lay out or not. Default is [false]"
                ],
                $snippet:[
                    "var btn=new xui.UI.Button; alert(btn.get(0).renderId); btn.render(); alert(btn.get(0).renderId); btn.destroy()"
                ]
            },
            renderOnto:{
                $desc:"To render the first UIProfile to DOM, and replace an existing DOM element",
                $rtn:"[self]",
                $paras:[
                    "node [Required] : String,DOM element, DOM id or xui.Dom Object",
                    "host [Optional] : Object, the host Object. Default is [window]"
                ],
                $snippet:[
                    "var id='xui.temp.a1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).append(xui.create('<button id=\"id_abc\">a b c d e f t</button>'));"+
                    "(new xui.UI.Button()).renderOnto('id_abc');"+
                    "alert(id_abc);"+
                    "}"
                ]
            },
            setCustomAttr:{
                $desc:"Sets customized DOM attributes Object",
                $rtn:"[self]",
                $paras:[
                    "key [Optional] : String or Object. the template string key, or key/value pairs",
                    "value [Optional] : String, DOM attributes Obejct"
                ]
            },
            setCustomStyle:{
                $desc:"Sets customized CSS Object to the set of UIProfiles",
                $rtn:"[self]",
                $paras:[
                    "key [Optional] : String or Object. the template string key, or key/value pairs",
                    "value [Optional] : String, CSS string"
                ],
                $snippet:[
                    "var id='xui.temp.a2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setCustomStyle('BORDER','background:#666')},1000);"+
                    "xui.asyRun(function(){btn.setCustomStyle({BORDER:null,KEY:'border:solid 2px',CAPTION:'font-size:14px'})},2000);"+
                    "xui.asyRun(function(){btn.setCustomStyle('KEY',null)},3000);"+
                    "xui.asyRun(function(){btn.setCustomStyle(null)},4000);"+
                    "}"
                ]
            },
            setCustomClass:{
                $desc:"Sets customized CSS class to the set of UIProfiles",
                $rtn:"[self]",
                $paras:[
                    "key [Optional] : String or Object. the template string key, or key/value pairs",
                    "value [Optional] : String, Class string"
                ],
                $snippet:[
                    "var id='xui.temp.a4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.CSS.setStyleRules('.a-1',{background:'#666'}).setStyleRules('.a-2',{border:'solid 2px'}).setStyleRules('.a-3',{'font-size':'14px'});"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setCustomClass('BORDER','a-1')},1000);"+
                    "xui.asyRun(function(){btn.setCustomClass({BORDER:null,KEY:'a-2',CAPTION:'a-3'})},2000);"+
                    "xui.asyRun(function(){btn.setCustomClass('KEY',null)},3000);"+
                    "xui.asyRun(function(){btn.setCustomClass(null);},4000);"+
                    "xui.asyRun(function(){xui.CSS.setStyleRules('.a-1').setStyleRules('.a-2').setStyleRules('.a-3');},5000);"+
                    "}"
                ]
            },
            adjustDock:{
                $desc:"Adjusts docking",
                $rtn:"[self]"
            },
            setCustomBehavior:{
                $desc:"Sets customized behavior function to the set of UIProfiles",
                $rtn:"[self]",
                $paras:[
                    "key [Optional] : String or Object. the template string key, or key/value pairs",
                    "value [Optional] : Object, key/value pairs"
                ],
                $snippet:[
                    "var id='xui.temp.a3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "btn.onClick(function(){alert(1); btn.setCustomBehavior('KEY',{onClick:function(){alert(2); btn.setCustomBehavior({KEY:{onClick:function(){alert(3); btn.setCustomBehavior(null)}}})}})});"+
                    "}"
                ]
            },
            setCustomFunction:{
                $desc:"Sets customized functions to the set of UIProfiles. Those functions can be serialized",
                $rtn:"[self]",
                $paras:[
                    "key [Optional] : String or Object. the template string key, or key/value pairs",
                    "value [Optional] : Function, custom function"
                ],
                $snippet:[
                    "var id='xui.temp.a5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "btn.setCustomFunction('showTips', function(profile, node, pos){xui.Tips.show(pos, 'hi tips');return false;});"+
                    "btn.setCustomFunction('a', function(){var a;});"+
                    "alert(btn.serialize(btn))"+
                    "}"
                ]
            },
            beforeDestroy:{
                $desc:"Fired before the UIProfile is destroyed. If returns false, destroy function will be ignored",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.b1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "btn.beforeDestroy(function(profile){alert('cancelled');return false});"+
                    "xui.asyRun(function(){btn.destroy();},1000)"+
                    "}"
                ]
            },
            afterDestroy:{
                $desc:"Fired after the UIProfile was destroyed",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ]
            },
            onDestroy:{
                $desc:"Fired when the UIProfile is destroyed",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.b2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "btn.onDestroy(function(profile){alert('onDestroy');});"+
                    "xui.asyRun(function(){btn.destroy();},1000)"+
                    "}"
                ]
            },
            onContextmenu:{
                $desc:"Fired when the root element's contextmenu event was fired. If returns false, the default contextmenu will be blocked(not in opera)",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid",
                    "item: Object, the corresponding item object"
                ],
                $snippet:[
                    "var id='xui.temp.b2-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Input;xui(id).prepend(btn);"+
                    "btn.onContextmenu(function(profile){return false});" +
                    "}"
                ]
            },
            beforeRender:{
                $desc:"Fired before the control was rendered. If returns false, destroy function will be ignored",
                $paras:[
                   "profile : xui.UIProfile. The current control's profile object"
                ]
            },
            onRender:{
                $desc:"Fired when the control was rendered",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.b3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button;"+
                    "btn.onRender(function(profile){alert('onRender')});"+
                    "xui.asyRun(function(){xui(id).prepend(btn)},1000)"+
                    "}"
                ]
            },
            onLayout:{
                $desc:"Fired when ever the UIProfile lays out",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.b4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\"><div id='+id+'1 style=\"height:20px;border:solid 1px;\"></div><div id='+id+'2 style=\"height:20px;border:solid 1px;\"></div>' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button;"+
                    "btn.onLayout(function(profile){alert('onLayout')});"+
                    "xui(id).prepend(btn);"+
                    "xui.asyRun(function(){xui(id+'1').prepend(btn)},1000);"+
                    "xui.asyRun(function(){xui(id+'2').prepend(btn)},2000);"+
                    "}"
                ]
            },
            onResize:{
                $desc:"Fired when the control was resized",
                $paras:[
                    $profile,
                    "width : Number, the control's width",
                    "height : Number, the control's height"
                ],
                $snippet:[
                    "var id='xui.temp.b3-a'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button;"+
                    "btn.onResize(function(profile,width,height){xui.message('onResize:'+width+':'+height)});"+
                    "xui(id).prepend(btn);"+
                    "xui.asyRun(function(){btn.setWidth(50).setHeight(50)},1000);"+
                    "}"
                ]
            },
            onMove:{
                $desc:"Fired when the control was moved",
                $paras:[
                    $profile,
                    "left : Number, the control's left value",
                    "top : Number, the control's top value",
                    "right : Number, the control's right value",
                    "bottom : Number, the control's bottom value"
                ],
                $snippet:[
                    "var id='xui.temp.b3-b'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button;"+
                    "btn.onMove(function(profile,left,top){xui.message('onMove:'+left+':'+top)});"+
                    "xui(id).prepend(btn);"+
                    "xui.asyRun(function(){btn.setLeft(50).setTop(50)},1000);"+
                    "}"
                ]
            },
            onDock:{
                $desc:"Fired when the control was resized or repositioned by docking mechanism",
                $paras:[
                    $profile,
                    "region : Object"
                ],
                $snippet:[
                    "var id='xui.temp.b3-c'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button({dock:'fill'}); var pane=new xui.UI.Pane({position:'relative'});"+
                    "btn.onDock(function(profile,region){xui.message('onDock:'+xui.serialize(region))});"+
                    "xui(id).prepend(pane.append(btn));"+
                    "xui.asyRun(function(){pane.setWidth(50).setHeight(50)},1000);"+
                    "}"
                ]
            },
            beforePropertyChanged:{
                $desc:"Fired before the UIProfile's property is going to be changed. If returns false, destroy function will be ignored",
                $paras:[
                    $profile,
                    "name : String, property name",
                    "value : Object, property new value",
                    "ovalue : Objecgt, property old value"
                ],
                $snippet:[
                    "var id='xui.temp.b3-d'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button;"+
                    "btn.beforePropertyChanged(function(profile,name,value){if(profile.renderId)return false;});"+
                    "xui(id).prepend(btn);"+
                    "xui.asyRun(function(){btn.setCaption('updated')},1000);"+
                    "}"
                ]
            },
            afterPropertyChanged:{
                $desc:"Fired before the UIProfile's property was changed",
                $paras:[
                    $profile,
                    "name : String, property name",
                    "value : Object, property new value",
                    "ovalue : Objecgt, property old value"
                ],
                $snippet:[
                    "var id='xui.temp.b3-e'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button;"+
                    "btn.afterPropertyChanged(function(profile,name,v,ov){xui.message(name+':'+ov+'->'+v)});"+
                    "xui(id).prepend(btn);"+
                    "xui.asyRun(function(){btn.setCaption('updated')},1000);"+
                    "}"
                ]
            },
            beforeAppend:{
                $desc:"Fired before any ctrl was appended. If returns false, append function will be ignored",
                $paras:[
                    $profile,
                    "child : xui.UI, to be appended"
                ],
                $snippet:[
                    "var id='xui.temp.b3-f'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button(); var pane=new xui.UI.Pane({position:'relative'});"+
                    "pane.beforeAppend(function(){return false;});"+
                    "xui(id).prepend(pane);"+
                    "xui.asyRun(function(){pane.append(btn)},1000);"+
                    "}"
                ]
            },
            afterAppend:{
                $desc:"Fired after any ctrl was appended",
                $paras:[
                    $profile,
                    "child : xui.UI, to be appended"
                ],
                $snippet:[
                    "var id='xui.temp.b3-g'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button(); var pane=new xui.UI.Pane({position:'relative'});"+
                    "pane.afterAppend(function(p,c){xui.message(c.getAlias() + ' was added')});"+
                    "xui(id).prepend(pane);"+
                    "xui.asyRun(function(){pane.append(btn)},1000);"+
                    "}"
                ]
            },
            beforeRemove:{
                $desc:"Fired before any ctrl was removed. If returns false, remove function will be ignored",
                $paras:[
                    $profile,
                    "child : xui.UIProfile, to be removed",
                    "subId : String, container's id",
                    "bdestroy : Boolean, to be destroyed or not"
                ],
                $snippet:[
                    "var id='xui.temp.b3-h'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button(); var pane=new xui.UI.Pane({position:'relative'});"+
                    "pane.beforeRemove(function(){return false;});"+
                    "xui(id).prepend(pane.append(btn));"+
                    "xui.asyRun(function(){pane.removeChildren(btn,true)},1000);"+
                    "}"
                ]
            },
            afterRemove:{
                 $desc:"Fired after any ctrl was removed",
                $paras:[
                    $profile,
                    "child : xui.UIProfile, to be removed",
                    "subId : String, container's id",
                    "bdestroy : Boolean, to be destroyed or not"
                ],
                $snippet:[
                    "var id='xui.temp.b3-j'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn=new xui.UI.Button(); var pane=new xui.UI.Pane({position:'relative'});"+
                    "pane.afterRemove(function(p,c){xui.message(c.alias+' was removed!');});"+
                    "xui(id).prepend(pane.append(btn));"+
                    "xui.asyRun(function(){pane.removeChildren(btn,true)},1000);"+
                    "}"
                ]
            },
            onShowTips:{
                $desc:"Fired when xui.Tips shows tips. If it returns false, will stop the system default tips",
                $paras:[
                    $profile,
                    "src : String, the event source DOM element's xid",
                    "pos : Object, {left:Number, top:Number}"
                ],
                $snippet:[
                    "var id='xui.temp.b5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "btn.onShowTips(function(profile, node, pos){xui.Tips.show(pos, 'hi tips');return false;});"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","CSSBox"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.CSSBox Class",
        constructor:{
            $desc:"Creates a xui.UI.CSSBox Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getClassName:{
              $desc:"Gets the class name",
              $rtn:"String"
            },
            setClassName:{
              $desc:"Sets the class name",
              $rtn:"[self]",
              $paras:[
                  "value [Required] : String",
                  $force
              ]
            },
            getNormalStatus:{
                $desc:"Gets the normal status CSS",
                $rtn:"Object, key/value pairs"
            },
            setNormalStatus:{
                $desc:"Sets the normal status CSS",
                $rtn:"[self],",
                $paras:[
                    "value [Required] : Object, key/value pairs",
                    $force
                ]
            },
            getHoverStatus:{
                $desc:"Gets the hover status CSS",
                $rtn:"Object, key/value pairs"
            },
            setHoverStatus:{
                $desc:"Sets the hover status CSS",
                $rtn:"[self],",
                $paras:[
                    "value [Required] : Object, key/value pairs",
                    $force
                ]
            },
            getActiveStatus:{
                $desc:"Gets the active status CSS",
                $rtn:"Object, key/value pairs"
            },
            setActiveStatus:{
                $desc:"Sets the active status CSS",
                $rtn:"[self],",
                $paras:[
                    "value [Required] : Object, key/value pairs",
                    $force
                ]
            },
            getFocusStatus:{
                $desc:"Gets the focus status CSS",
                $rtn:"Object, key/value pairs"
            },
            setFocusStatus:{
                $desc:"Sets the focus status CSS",
                $rtn:"[self],",
                $paras:[
                    "value [Required] : Object, key/value pairs",
                    $force
                ]
            },
            getSandbox:{
                $desc:"Gets sandbox id",
                $rtn:"String, widget's alias or DOM id"
            },
            setSandbox:{
                $desc:"Sets sandbox id",
                $rtn:"[self],",
                $paras:[
                    "value [Required] : String, String, widget's alias or DOM id",
                    $force
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Widget"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Widget Class",
        constructor:{
            $desc:"Creates a xui.UI.Widget Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getBorder:{
                $desc:"To determine whether this widget has border",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.w1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Widget()));"+
                    "xui.asyRun(function(){alert(o.getBorder())});"+
                    "}"
                ]
            },
            setBorder:{
                $desc:"Specifys whether this widget has border, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.w2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Widget()));"+
                    "xui.asyRun(function(){alert(o.getBorder())});"+
                    "}"
                ]
            },
            getShadow:{
                $desc:"To determine whether this widget has shadow",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.w3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Widget()).setShadow(true));"+
                    "xui.asyRun(function(){alert(o.getShadow())});"+
                    "}"
                ]
            },
            setShadow:{
                $desc:"Specifys whether this widget has shadow, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.w4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Widget()).setShadow(true));"+
                    "xui.asyRun(function(){alert(o.getShadow())});"+
                    "}"
                ]
            },
            getResizer:{
                $desc:"To determine whether this widget could be resized by end user",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.w5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Widget()).setCustomStyle('KEY','background:#ccc').setResizer(true));"+
                    "xui.asyRun(function(){alert(o.getResizer())});"+
                    "}"
                ]
            },
            setResizer:{
                $desc:"Specifys whether this widget could be resized by end user, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.w6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Widget()).setCustomStyle('KEY','background:#ccc').setResizer(true));"+
                    "xui.asyRun(function(){alert(o.getResizer())});"+
                    "}"
                ]
            },
            getResizerProp:{
                $desc:"To get Resizer's properties",
                $rtn:"Object"
            },
            setResizerProp:{
                $desc:"To set Resizer's properties",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object. {forceVisible:/*Boolean*/,forceMovable:/*Boolean*/,singleDir:/*Boolean*/,vertical:/*Boolean*/,horizontal:/*Boolean*/,minHeight:/*Number*/,minWidth:/*Number*/,maxHeight:/*Number*/,maxWidth:/*Number*/,handlerSize:/*Number*/,handlerOffset:/*Number*/}",
                    $force
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Div"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Div Class",
        constructor:{
            $desc:"Creates a xui.UI.Div Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            fireClickEvent:{
                $desc:"Fires the click event",
                $rtn:"[self]"
            },
            getIframeAutoLoad:{
                $desc:"Gets auto load(with iframe) iframe src property",
                $rtn:"String"
            },
            setIframeAutoLoad:{
                $desc:"Sets auto load(with iframe) iframe src property. Set it before control was rendered",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getAjaxAutoLoad:{
                $desc:"Gets auto load(with Ajax, same domain only) html file path property",
                $rtn:"String"
            },
            setAjaxAutoLoad:{
                $desc:"Sets auto load(with Ajax, same domain only) html file path property. Set it before control was rendered",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getHtml:{
                $desc:"Gets the html string from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.div1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Div({height:'auto',html:'<span>a</span>'}));"+
                    "xui.asyRun(function(){alert(o.getHtml())});"+
                    "}"
                ]
            },
            setHtml:{
                $desc:"Sets the html string to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the html string",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.div2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Div).setHeight('auto').setHtml('<span>a</span>'));"+
                    "xui.asyRun(function(){o.setHtml('<span>b</span>')},1000);"+
                    "}"
                ]
            },
            getOverflow:{
                $desc:"Gets container's CSS overflow property",
                $rtn:"String"
            },
            setOverflow:{
                $desc:"Sets container's CSS overflow property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'auto','hidden','visible','' ",
                    $force
                ]
            },
            onClick:{
                $desc:"Fired when user click it",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, Element.xui id or Dom Element"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Pane"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Pane Class",
        constructor:{
            $desc:"Creates a xui.UI.Pane Object"
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Icon"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Icon Class",
        constructor:{
            $desc:"Creates a xui.UI.Icon Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            fireClickEvent:{
                $desc:"Fires the click event",
                $rtn:"[self]"
            },
            onClick:{
                $desc:"Fired when user click it",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, Element.xui id or Dom Element"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Link"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Link Class",
        constructor:{
            $desc:"Creates a xui.UI.Link Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            fireClickEvent:{
                $desc:"Fires the click event",
                $rtn:"[self]"
            },
            getCaption:{
                $desc:"Gets the caption string from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.link1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Link()).setCaption('cap'));"+
                    "xui.asyRun(function(){alert(o.getCaption())});"+
                    "}"
                ]
            },
            setCaption:{
                $desc:"Sets the caption string to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the caption",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.link2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Link()).setCaption('cap'));"+
                    "xui.asyRun(function(){alert(o.getCaption())});"+
                    "}"
                ]
            },
            getTarget:{
                $desc:"Gets the target attribute from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.link3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Link()).setTarget('_top'));"+
                    "xui.asyRun(function(){alert(o.getTarget())});"+
                    "}"
                ]
            },
            setTarget:{
                $desc:"Sets the target attribute to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the target",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.link4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Link()).setTarget('_top'));"+
                    "xui.asyRun(function(){alert(o.getTarget())});"+
                    "}"
                ]
            },
            getHref:{
                $desc:"Gets the href attribute from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.link5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Link()).setHref('#'));"+
                    "xui.asyRun(function(){alert(o.getHref())});"+
                    "}"
                ]
            },
            setHref :{
                $desc:"Sets the href attribute to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the href",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.link6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Link()).setHref('#'));"+
                    "xui.asyRun(function(){alert(o.getHref())});"+
                    "}"
                ]
            },


            onClick:{
                $desc:"Fired when user click it",
                $paras:[
                    $profile,
                    "e : Event, Dom event object"
                ],
                $snippet:[
                    "var id='xui.temp.link7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).prepend((new xui.UI.Link()).setCaption('cap').onClick(function(profile){alert(profile.properties.caption)}));"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Border"], {$desc:"xui.UI.Border Class",KEY:{$desc:"Class Name"}});

    xui.set(xui.Locale,["en","doc","xui","UI","Shadow"], {$desc:"xui.UI.Shadow Class",KEY:{$desc:"Class Name"}});

    xui.set(xui.Locale,["en","doc","xui","UI","Resizer"], {$desc:"xui.UI.Resizer Class",KEY:{$desc:"Class Name"}});

    xui.set(xui.Locale,["en","doc","xui","UI","Resizer"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Resizer Class",
        constructor:{
            $desc:"Creates a xui.UI.Block Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getHtml:{
                $desc:"Gets the html string from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.blk1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Block({border:true,html:'<span>a</span>'}));"+
                    "xui.asyRun(function(){alert(o.getHtml())});"+
                    "}"
                ]
            },
            setHtml:{
                $desc:"Sets the html string to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the html string",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.blk2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Block).setHtml('<span>a</span>'));"+
                    "xui.asyRun(function(){o.setHtml('<span>b</span>')},1000);"+
                    "}"
                ]
            },
            getBackground:{
                $desc:"Gets background from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.blk3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Block).setBackground('red'));"+
                    "xui.asyRun(function(){alert(o.getBackground())},1000);"+
                    "}"
                ]
            },
            setBackground:{
                $desc:"Sets background to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the background string",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.blk4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Block).setBackground('red'));"+
                    "xui.asyRun(function(){alert(o.getBackground())},1000);"+
                    "}"
                ]
            },
            getBorderType:{
                $desc:"Gets border type from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.blk5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Block).setBorderType('inset'));"+
                    "xui.asyRun(function(){alert(o.getBorderType())},1000);"+
                    "}"
                ]
            },
            setBorderType:{
                $desc:"Sets border type to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'none','inset','outset','groove'or 'ridge'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.blk6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Block).setBorderType('groove'));"+
                    "xui.asyRun(function(){alert(o.getBorderType())},1000);"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Block"], {
        $desc:"xui.UI.Block Class",
        constructor:{
            $desc:"Creates a xui.UI.Block Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getIframeAutoLoad:{
                $desc:"Gets auto load(with iframe) iframe src property",
                $rtn:"String"
            },
            setIframeAutoLoad:{
                $desc:"Sets auto load(with iframe) iframe src property. Set it before control was rendered",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getAjaxAutoLoad:{
                $desc:"Gets auto load(with Ajax, same domain only) html file path property",
                $rtn:"String"
            },
            setAjaxAutoLoad:{
                $desc:"Sets auto load(with Ajax, same domain only) html file path property. Set it before control was rendered",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getHtml:{
                $desc:"Gets inner HTML",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.blk1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Block({border:true,html:'<span>a</span>'}));"+
                    "xui.asyRun(function(){alert(o.getHtml())});"+
                    "}"
                ]
            },
            setHtml:{
                $desc:"Sets inner HTML",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.blk2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Block).setHtml('<span>a</span>'));"+
                    "xui.asyRun(function(){o.setHtml('<span>b</span>')},1000);"+
                    "}"
                ]
            },
            getBackground:{
                $desc:"Gets background style",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.blk3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Block).setBackground('red'));"+
                    "xui.asyRun(function(){alert(o.getBackground())},1000);"+
                    "}"
                ]
            },
            setBackground:{
                $desc:"Sets background style",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.blk4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Block).setBackground('red'));"+
                    "xui.asyRun(function(){alert(o.getBackground())},1000);"+
                    "}"
                ]
            },
            getBorderType:{
                $desc:"Gets border type",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.blk5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Block).setBorderType('inset'));"+
                    "xui.asyRun(function(){alert(o.getBorderType())},1000);"+
                    "}"
                ]
            },
            setBorderType:{
                $desc:"Sets border type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'none','inset','outset','groove'or 'ridge'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.blk6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Block).setBorderType('groove'));"+
                    "xui.asyRun(function(){alert(o.getBorderType())},1000);"+
                    "}"
                ]
            },
            getSideBarType:{
                $desc:"Gets side bar type",
                $rtn:"String"
            },
            setSideBarType:{
                $desc:"Sets side bar type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, none, left, right, top ,bottom",
                    $force
                ]
            },
            getDropFileTypes:{
                $desc:"Gets allowed file types",
                $rtn:"String"
            },
            setDropFileTypes:{
                $desc:"Sets allowed file types",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, file types",
                    $force
                ]
            },
            getBackdrop:{
                $desc:"Gets backdrop background or css",
                $rtn:"String"
            },
            setBackdrop:{
                $desc:"Sets backdrop background or css",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, like 'transparent','#FFFFFF','background:#000;opacity:0.7;' ",
                    $force
                ]
            },
            getBackdropClick:{
                $desc:"Gets backdrop type",
                $rtn:"String"
            },
            setBackdropClick:{
                $desc:"Sets  backdrop type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'none','hide' or 'destroy'",
                    $force
                ]
            },
            getSideBarSize:{
                $desc:"Gets side bar size",
                $rtn:"String"
            },
            setSideBarSize:{
                $desc:"Sets side bar size",
                $rtn:"[Number/String]",
                $paras:[
                    "value [Required] : String, em or px ",
                    $force
                ]
            },
            getMaxFileSize:{
                $desc:"Gets the max file size allowed",
                $rtn:"Number"
            },
            setSideBarSize:{
                $desc:"Sets the max file size allowed",
                $rtn:"Number",
                $paras:[
                    "value [Required] : Number, bits",
                    $force
                ]
            },
            getSideBarStatus:{
                $desc:"gets side bar status",
                $rtn:"String"
            },
            setSideBarStatus:{
                $desc:"Sets side bar status",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, fold or expand",
                    $force
                ]
            },
            getSideBarCaption:{
                $desc:"Gets side bar caption",
                $rtn:"String"
            },
            setSideBarCaption:{
                $desc:"Sets side bar caption",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            onClickPanel:{
                $desc:"Fired when user click the panel",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, Element.xui id or Dom Element"
                ]
            },
            onClickBackdrop:{
                $desc:"Fired when user click the backdrop",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, Element.xui id or Dom Element"
                ]
            },
            beforeGetFiles:{
                $desc:"Fired before getting the files, if returns false, the default files getting function will be ignored",
                $paras:[
                    $profile,
                     "e : Event, Dom event object"
                ]
            },
            onFiles:{
                $desc:"Fired when files are added",
                $paras:[
                    $profile,
                    "files : Array, files"
                ]
            },
            onFileError:{
                $desc:"Fired when getting file error",
                $paras:[
                    $profile,
                    "message : String, error message",
                    "file : Object, file or error object"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","ProgressBar"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.ProgressBar Class",
        constructor:{
            $desc:"Creates a xui.UI.ProgressBar Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getType:{
                $desc:"Gets bar type'vertical' or 'horizontal'",
                $rtn:"String"
            },
            setType:{
                $desc:"Sets bar type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'vertical' or 'horizontal'",
                    $force
                ]
            },
            getCaptionTpl :{
                $desc:"Gets the caption template string",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.pb1-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ProgressBar({value:'20'}));"+
                    "xui.asyRun(function(){o.setCaptionTpl('ongoing {value}%')},1000);"+
                    "xui.asyRun(function(){alert(o.getCaptionTpl())},2000);"+
                    "}"
                ]
            },
            setCaptionTpl :{
                $desc:"Sets the caption template string",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.pb1-2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ProgressBar({value:'20'}));"+
                    "xui.asyRun(function(){o.setCaptionTpl('ongoing {value}%')},1000);"+
                    "xui.asyRun(function(){alert(o.getCaptionTpl())},2000);"+
                    "}"
                ]
            },
            getFillBG:{
                $desc:"Gets the fill backgournd property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.pb2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ProgressBar({value:'20'}));"+
                    "xui.asyRun(function(){o.setFillBG('#00ff00')},1000);"+
                    "xui.asyRun(function(){alert(o.getFillBG())},1000);"+
                    "}"
                ]
            },
            setFillBG:{
                $desc:"Sets the fill backgournd to the properties Object of each UIProfile",
                $rtn:"[self]",
                 $paras:[
                    "value [Required] : nonnegative Number",
                    $force
                ],
               $snippet:[
                    "var id='xui.temp.pb3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ProgressBar({value:'20'}));"+
                    "xui.asyRun(function(){o.setFillBG('#00ff00')},1000);"+
                    "xui.asyRun(function(){alert(o.getFillBG())},1000);"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Label"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Label Class",
        constructor:{
            $desc:"Creates a xui.UI.Label Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            fireClickEvent:{
                $desc:"Fires the click event",
                $rtn:"[self]"
            },
            getExcelCellFormula:{
                $desc:"Gets the simulated Excel cell's formula",
                $rtn:"String"
            },
            setExcelCellFormula:{
                $desc:"Sets the simulated Excel cell's formula",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force                ]
            },
            getCaption :{
                $desc:"Gets the caption text",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.Label1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Label);"+
                    "xui.asyRun(function(){btn.setCaption ('tag'); alert(btn.getCaption ())},1000)"+
                    "}"
                ]
            },
            setCaption :{
                $desc:"Sets caption text to this control",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.Label2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Label);"+
                    "xui.asyRun(function(){btn.setCaption ('tag'); alert(btn.getCaption ())},1000)"+
                    "}"
                ]
            },
            getClock:{
                $desc:"Gets the clock format string",
                $rtn:"String"
            },
            setClock:{
                $desc:"Sets the clock format string",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getHAlign :{
                $desc:"Gets horizontal alignment",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.Label7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Label({border:true,width:'100'}));"+
                    "xui.asyRun(function(){btn.setHAlign('center'); alert(btn.getHAlign())},1000)"+
                    "}"
                ]
            },
            setHAlign :{
                $desc:"Sets horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.Label8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Label({border:true,width:'100'}));"+
                    "xui.asyRun(function(){btn.setHAlign('center'); alert(btn.getHAlign())},1000)"+
                    "}"
                ]
            },
            getImage :{
                $desc:"Gets the image property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.lbl13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Label({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif'); alert(btn.getImage())},1000)"+
                    "}"
                ]
            },
            setImage :{
                $desc:"Sets the image property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] :String,  image path",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.lbl14'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Label({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif'); alert(btn.getImage())},1000)"+
                    "}"
                ]
            },
            getImagePos :{
                $desc:"Gets the image position property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.lbl15'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Label({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif').setImagePos('left -16px'); alert(btn.getImagePos())},1000)"+
                    "}"
                ]
            },
            setImagePos :{
                $desc:"Sets the image positon property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.lbl16'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Label({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif').setImagePos('left -16px'); alert(btn.getImagePos())},1000)"+
                    "}"
                ]
            },
            getImageBgSize :{
                $desc:"Gets the image background size property value on the first UIProfile",
                $rtn:"String"
            },
            setImageBgSize :{
                $desc:"Sets the image background size property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ]
            },
            getFontColor :{
                $desc:"Gets the font-color property",
                $rtn:"String"
            },
            setFontColor :{
                $desc:"Sets the font-color property ",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : color",
                    $force
                ]
            },
            getFontSize :{
                $desc:"Gets the font-size property",
                $rtn:"String"
            },
            setFontSize :{
                $desc:"Sets the font-size property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getFontWeight :{
                $desc:"Gets the font-weight property",
                $rtn:"String"
            },
            setFontWeight :{
                $desc:"Sets the font-weight property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getFontFamily :{
                $desc:"Gets the font-family property",
                $rtn:"String"
            },
            setFontFamily :{
                $desc:"Sets the font-family property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            onClick:{
                $desc:"Fired when user click it",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, Element.xui id or Dom Element"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","RichEditor"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.RichEditor Class",
        constructor:{
            $desc:"Creates a xui.UI.RichEditor Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getFrameTemplate:{
                $desc:"Gets the control's inner iframe html template",
                $rtn:"String"
            },
            setFrameTemplate:{
                $desc:"Sets the control's inner iframe html template",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getFrameStyle:{
                $desc:"Gets the control's inner iframe css style",
                $rtn:"String"
            },
            setFrameStyle:{
                $desc:"Sets the control's inner iframe css style",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getCmdFilter:{
                $desc:"Gets the filter of control's command list",
                $rtn:"String"
            },
            setCmdFilter:{
                $desc:"Sets the filter of control's command list",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String'font1;font2': to hide font1 and font2 command buttons",
                    $force
                ]
            },
            getCmdList :{
                $desc:"Gets the control's command list",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.rich'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:300px;width:400px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var rich;xui(id).prepend(rich=new xui.UI.RichEditor);"+
                    "xui.asyRun(function(){rich.setCmdList('font1;font2;font3;font4'); alert(rich.getCmdList ())},1000)"+
                    "}"
                ]
            },
            setCmdList :{
                $desc:"Sets the control's command list",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.rich'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:300px;width:400px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var rich;xui(id).prepend(rich=new xui.UI.RichEditor);"+
                    "xui.asyRun(function(){rich.setCmdList('font1;font2;font3;font4'); alert(rich.getCmdList ())},1000)"+
                    "}"
                ]
            },
            getLabelSize:{
                $desc:"Gets the label's size",
                $rtn:"Number"
            },
            setLabelSize:{
                $desc:"Sets the label's size",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelPos:{
                $desc:"Gets the label's positoin",
                $rtn:"String"
            },
            setLabelPos:{
                $desc:"Sets the label's positoin",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : left, right, top, bottom \u00D6\u00AE\u00D2\u00BB",
                    $force
                ]
            },
            getLabelGap:{
                $desc:"Gets the gap between the label and the input",
                $rtn:"Number"
            },
            setLabelGap:{
                $desc:"Sets the the gap between label and input",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelCaption:{
                $desc:"Gets the label's caption",
                $rtn:"String"
            },
            setLabelCaption:{
                $desc:"Sets the label's caption",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getLabelHAlign:{
                $desc:"Gets the label's horizontal alignment",
                $rtn:"String"
            },
            setLabelHAlign:{
                $desc:"Sets the label's horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'. \u00C4\u00AC\u00C9\u008F\u00CE\u00AA 'left'",
                    $force
                ]
            },
            onLabelClick:{
                $desc:"Fired when user click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelDblClick:{
                $desc:"Fired when user double click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelActive:{
                $desc:"Fired when user mousedown the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onReady:{
                $desc:"When the inner frame is ready",
                $paras:[
                    $profile
                ]
            },
            onUpdateToolbar:{
                $desc:"When trying to modify the toolbar",
                $paras:[
                    $profile,
                    "etype: String,  event type",
                    "doc: Object, the inner frame's document object"
                ]
            },
            onInnerEvent:{
                $desc:"When the inner frame fired an event",
                $paras:[
                    $profile,
                    "type : String,  event type",
                    "node: Element, the corresponding Caption DOM element",
                    "e: Event, DOM event Object"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","CheckBox"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.CheckBox Class",
        constructor:{
            $desc:"Creates a xui.UI.CheckBox Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            fireClickEvent:{
                $desc:"Fires the click event",
                $rtn:"[self]"
            },
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.scbtn0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.CheckBox);"+
                    "xui.asyRun(function(){btn.activate();},1000);"+
                    "}"
                ]
            },
            getExcelCellId:{
                $desc:"Gets the simulated Excel cell's id",
                $rtn:"String"
            },
            setExcelCellId:{
                $desc:"Sets the simulated Excel cell's id",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force                ]
            },
            getCaption :{
                $desc:"Gets this checkbox caption text",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.Scbtn1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.CheckBox);"+
                    "xui.asyRun(function(){btn.setCaption ('tag'); alert(btn.getCaption ())},1000)"+
                    "}"
                ]
            },
            setCaption :{
                $desc:"Sets caption text to this checkbox",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.Scbtn2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.CheckBox);"+
                    "xui.asyRun(function(){btn.setCaption ('tag'); alert(btn.getCaption ())},1000)"+
                    "}"
                ]
            },
            getImage :{
                $desc:"Gets image url",
                $rtn:"String"
            },
            setImage :{
                $desc:"Sets image url",
                $rtn:"[self]",
                $paras:[
                    "value [Required] :String,  image path",
                    $force
                ]
            },
            getImagePos :{
                $desc:"Gets image postion",
                $rtn:"String"
            },
            setImagePos :{
                $desc:"Sets image image postion",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ]
            },
            getImageBgSize :{
                $desc:"Gets the image background size property value on the first UIProfile",
                $rtn:"String"
            },
            setImageBgSize :{
                $desc:"Sets the image background size property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ]
            },
            onChecked:{
                $desc:"Fired when CheckBox is checked",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "value : Boolean, the value"
                ],
                $snippet:[
                    "var id='xui.temp.scbtn18'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).prepend((new xui.UI.CheckBox()).onChecked(function(profile,e,value){alert(value)}));"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Button"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Button Class",
        constructor:{
            $desc:"Creates a xui.UI.Button Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            resetValue:{
                $desc:"To reset value, UI value and Control value, no event will be triggered in this process",
                $rtn:'[self]',
                $paras:[
                    "value [Optional] : Boolean, the reset value. Default is false"
                ]
            },
            setUIValue:{
                $desc:"Sets the 'UI value' and the 'Control value' on the first UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    "force [Optional] : Boolean, Force to execute the function even if the same UI value already exists. Default is [false]"
                ]
            },
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.btn0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.activate();},1000);"+
                    "}"
                ]
            },
            getCaption :{
                $desc:"Gets this button caption text",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.btn1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setCaption ('tag'); alert(btn.getCaption ())},1000)"+
                    "}"
                ]
            },
            setCaption :{
                $desc:"Sets caption text to this button",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.btn2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setCaption ('tag'); alert(btn.getCaption ())},1000)"+
                    "}"
                ]
            },
            getFontColor :{
                $desc:"Gets the font-color property",
                $rtn:"String"
            },
            setFontColor :{
                $desc:"Sets the font-color property ",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : color",
                    $force
                ]
            },
            getFontSize :{
                $desc:"Gets the font-size property",
                $rtn:"String"
            },
            setFontSize :{
                $desc:"Sets the font-size property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getFontWeight :{
                $desc:"Gets the font-weight property",
                $rtn:"String"
            },
            setFontWeight :{
                $desc:"Sets the font-weight property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getFontFamily :{
                $desc:"Gets the font-family property",
                $rtn:"String"
            },
            setFontFamily :{
                $desc:"Sets the font-family property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getType:{
                $desc:"Gets button type",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.btn5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setType('drop'); alert(btn.getType ())},1000)"+
                    "}"
                ]
            },
            setType  :{
                $desc:"Sets button type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'normal', 'drop' or 'status'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.btn6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button);"+
                    "xui.asyRun(function(){btn.setType('drop'); alert(btn.getType ())},1000)"+
                    "}"
                ]
            },
            getHAlign :{
                $desc:"Gets horizontal alignment",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.btn7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({border:true,height:'50',width:'100'}));"+
                    "xui.asyRun(function(){btn.setHAlign('center'); alert(btn.getHAlign())},1000)"+
                    "}"
                ]
            },
            setHAlign :{
                $desc:"Sets horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.btn8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({border:true,height:'50',width:'100'}));"+
                    "xui.asyRun(function(){btn.setHAlign('center'); alert(btn.getHAlign())},1000)"+
                    "}"
                ]
            },
            getVAlign :{
                $desc:"Gets vertical alignment",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.btn9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({border:true,height:'50',width:'100'}));"+
                    "xui.asyRun(function(){btn.setVAlign('bottom'); alert(btn.getVAlign())},1000)"+
                    "}"
                ]
            },
            setVAlign :{
                $desc:"Sets vertical alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'top', 'middle' or 'bottom'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.btn20'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button({border:true,height:'50',width:'100'}));"+
                    "xui.asyRun(function(){btn.setVAlign('bottom'); alert(btn.getVAlign())},1000)"+
                    "}"
                ]
            },
            getImage :{
                $desc:"Gets image url",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.btn13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button());"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif'); alert(btn.getImage())},1000)"+
                    "}"
                ]
            },
            setImage :{
                $desc:"Sets image url",
                $rtn:"[self]",
                $paras:[
                    "value [Required] :String,  image path",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.btn14'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button());"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif'); alert(btn.getImage())},1000)"+
                    "}"
                ]
            },
            getImagePos :{
                $desc:"Gets image postion",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.btn15'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button());"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif').setImagePos('left -16px'); alert(btn.getImagePos())},1000)"+
                    "}"
                ]
            },
            setImagePos :{
                $desc:"Sets image image postion",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.btn16'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Button());"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif').setImagePos('left -16px'); alert(btn.getImagePos())},1000)"+
                    "}"
                ]
            },
            getImageBgSize :{
                $desc:"Gets the image background size property value on the first UIProfile",
                $rtn:"String"
            },
            setImageBgSize :{
                $desc:"Sets the image background size property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ]
            },
            onClick:{
                $desc:"Fired when user click it",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element",
                    "value : Object"
                ],
                $snippet:[
                    "var id='xui.temp.btn17'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).prepend((new xui.UI.Button()).onClick(function(profile){alert(profile.properties.caption)}));"+
                    "}"
                ]
            },
            onClickDrop:{
                $desc:"Fired when user click the drop button",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element",
                    "value : Object"
                ],
                $snippet:[
                    "var id='xui.temp.btn17-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).prepend((new xui.UI.Button({type:'drop'})).onClick(function(profile){alert('clicked button')}).onClickDrop(function(profile){alert('clicked drop button')}));"+
                    "}"
                ]
            },
            onChecked:{
                $desc:"Fired when button is checked. xui.UI.Button Object has this event handler only when button type is 'status'",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "value : Boolean, the value"
                ],
                $snippet:[
                    "var id='xui.temp.btn18'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).prepend((new xui.UI.Button({style:'status'})).onChecked(function(profile,e,value){alert(value)}));"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Input"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Input Class",
        constructor:{
            $desc:"Creates a xui.UI.Input Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.input0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input);"+
                    "xui.asyRun(function(){o.activate();},1000)"+
                    "}"
                ]
            },
            getDynCheck:{
                $desc:"Gets the 'dynamic check' property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.input3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$'})).prepend(o=new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$'}));"+
                    "o.setDynCheck(true);alert(o.getDynCheck());"+
                    "}"
                ]
            },
            setDynCheck:{
                $desc:"Sets the 'dynamic check' property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.input4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$'})).prepend(o=new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$'}));"+
                    "o.setDynCheck(true);alert(o.getDynCheck());"+
                    "}"
                ]
            },
            getPlaceholder:{
                $desc:"Gets placeholder string for HTML 5 ",
                $rtn:"String"
            },
            setPlaceholder:{
                $desc:"Sets placeholder string for HTML 5 ",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getExcelCellId:{
                $desc:"Gets the simulated Excel cell's id",
                $rtn:"String"
            },
            setExcelCellId:{
                $desc:"Sets the simulated Excel cell's id",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force                ]
            },
            getExcelCellFormula:{
                $desc:"Gets the simulated Excel cell's formula",
                $rtn:"String"
            },
            setExcelCellFormula:{
                $desc:"Sets the simulated Excel cell's formula",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force                ]
            },
            getHAlign :{
                $desc:"Gets horizontal alignment(text-align)",
                $rtn:"String"
            },
            setHAlign :{
                $desc:"Sets horizontal alignment(text-align)",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'",
                    $force
                ]
            },
            getMultiLines:{
                $desc:"To determine whether input box holds single line or multi line",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.input5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(new xui.UI.Input({position:'relative'})).prepend(o=new xui.UI.Input({position:'relative'}));"+
                    "o.setMultiLines(true).setHeight(50);alert(o.getMultiLines());"+
                    "}"
                ]
            },
            setMultiLines:{
                $desc:"Specifys whether input box holds single line or multi line",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.input6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(new xui.UI.Input({position:'relative'})).prepend(o=new xui.UI.Input({position:'relative'}));"+
                    "o.setMultiLines(true).setHeight(50);alert(o.getMultiLines());"+
                    "}"
                ]
            },
            getMask:{
                $desc:"Gets the mask property value. Mark is kind of input pattern/format and can restrict abusive input",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.input7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input());"+
                    "alert(o.setMask('(1111)11111111-111').getMask());"+
                    "}"
                ]
            },
            setMask:{
                $desc:"Sets the mask property value. Mark is kind of input pattern/format and can restrict abusive input.<ul>Char represents:"+
                    "<li>'~' : [+-]</li>"+
                "<li>'1' : [0-9]</li>"+
                "<li>'a' : [A-Za-z]</li>"+
                "<li>'u' : [A-Z]</li>"+
                "<li>'l' : [a-z]</li>"+
                "<li>'*' : [A-Za-z0-9]</li>"+
                "<li>other : itself </li>"+
                "</ul>",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.input8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input());"+
                    "alert(o.setMask('(1111)11111111-111').getMask());"+
                    "}"
                ]
            },
            getReadonly:{
                $desc:"Gets the readonly property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.input9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "alert(o.setReadonly(true).getReadonly())"+
                    "}"
                ]
            },
            setReadonly:{
                $desc:"Sets the readonly property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.input10'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({value:'ini'}));"+
                    "alert(o.setReadonly(true).getReadonly())"+
                    "}"
                ]
            },
            getTipsBinder:{
                $desc:"Gets the tipsBinder property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.input11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o,host={}; xui(id).prepend((new xui.UI.Div({position:'relative'})).setHost(host,'div')).prepend((o=new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$',dynCheck:true})).setHost(host,'input'));"+
                    "o.setTipsBinder('div').setTipsErr('format err').setTipsOK('ok');"+
                    "alert(o.getTipsBinder()+' : '+ o.getTipsErr() +' : '+ o.getTipsOK())"+
                    "}"
                ]
            },
            setTipsBinder:{
                $desc:"Sets the tipsBinder property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.input12'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o,host={}; xui(id).prepend((new xui.UI.Div({position:'relative'})).setHost(host,'div')).prepend((o=new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$',dynCheck:true})).setHost(host,'input'));"+
                    "o.setTipsBinder('div').setTipsErr('format err').setTipsOK('ok');"+
                    "alert(o.getTipsBinder()+' : '+ o.getTipsErr() +' : '+ o.getTipsOK())"+
                    "}"
                ]
            },
            getTipsErr:{
                $desc:"Gets the 'error tips' property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.input13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o,host={}; xui(id).prepend((new xui.UI.Div({position:'relative'})).setHost(host,'div')).prepend((o=new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$',dynCheck:true})).setHost(host,'input'));"+
                    "o.setTipsBinder('div').setTipsErr('format err').setTipsOK('ok');"+
                    "alert(o.getTipsBinder()+' : '+ o.getTipsErr() +' : '+ o.getTipsOK())"+
                    "}"
                ]
            },
            setTipsErr:{
                $desc:"Sets the 'error tips' property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.input14'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o,host={}; xui(id).prepend((new xui.UI.Div({position:'relative'})).setHost(host,'div')).prepend((o=new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$',dynCheck:true})).setHost(host,'input'));"+
                    "o.setTipsBinder('div').setTipsErr('format err').setTipsOK('ok');"+
                    "alert(o.getTipsBinder()+' : '+ o.getTipsErr() +' : '+ o.getTipsOK())"+
                    "}"
                ]
            },
            getTipsOK:{
                $desc:"Gets the 'OK tips' property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.input15'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o,host={}; xui(id).prepend((new xui.UI.Div({position:'relative'})).setHost(host,'div')).prepend((o=new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$',dynCheck:true})).setHost(host,'input'));"+
                    "o.setTipsBinder('div').setTipsErr('format err').setTipsOK('ok');"+
                    "alert(o.getTipsBinder()+' : '+ o.getTipsErr() +' : '+ o.getTipsOK())"+
                    "}"
                ]
            },
            setTipsOK:{
                $desc:"Sets the 'OK tips' property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.input16'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o,host={}; xui(id).prepend((new xui.UI.Div({position:'relative'})).setHost(host,'div')).prepend((o=new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$',dynCheck:true})).setHost(host,'input'));"+
                    "o.setTipsBinder('div').setTipsErr('format err').setTipsOK('ok');"+
                    "alert(o.getTipsBinder()+' : '+ o.getTipsErr() +' : '+ o.getTipsOK())"+
                    "}"
                ]
            },
            getValueFormat:{
                $desc:"Gets value format of this input box. Format is pattern which can be accepted by input box",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.input17'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o; xui(id).prepend((o=new xui.UI.Input({position:'relative',dynCheck:true})));"+
                    "alert(o.setValueFormat('^\\\\d*$').getValueFormat());"+
                    "}"
                ]
            },
            setValueFormat:{
                $desc:"Sets value formate to this input box. Format is pattern which can be accepted by input box",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.input18'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o; xui(id).prepend((o=new xui.UI.Input({position:'relative',dynCheck:true})));"+
                    "alert(o.setValueFormat('^\\\\d*$').getValueFormat());"+
                    "}"
                ]
            },
            getSelectOnFocus:{
                $desc:"Gets the property value, which determines whether inner text will be selected when it's focused, or won't"
            },
            setSelectOnFocus:{
                $desc:"Sets this property to determine whether inner text will be selected when it's focused, or won't",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : 'input' or 'password'. Default is 'input'",
                    $force
                ]
            },
            getType:{
                $desc:"Gets input box type",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.input19'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(new xui.UI.Input({position:'relative'})).prepend(o=new xui.UI.Input({position:'relative'}));"+
                    "o.setType('password');alert(o.getType());"+
                    "}"
                ]
            },
            setType:{
                $desc:"Sets the type property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : 'input' or 'password'. Default is 'input'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.input20'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(new xui.UI.Input({position:'relative'})).prepend(o=new xui.UI.Input({position:'relative'}));"+
                    "o.setType('password');alert(o.getType());"+
                    "}"
                ]
            },
            getMaxlength:{
                $desc:"Gets input's maxlength. Only for html input type='text' or type='password'",
                $rtn:"Number"
            },
            setMaxlength:{
                $desc:"Sets input's maxlength. Only for html input type='text' or type='password'",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : the maxlength number",
                    $force
                ]
            },
            getLabelSize:{
                $desc:"Gets the label's size",
                $rtn:"Number"
            },
            setLabelSize:{
                $desc:"Sets the label's size",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelPos:{
                $desc:"Gets the label's positoin",
                $rtn:"String"
            },
            setLabelPos:{
                $desc:"Sets the label's positoin",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : left, right, top, bottom \u00D6\u00AE\u00D2\u00BB",
                    $force
                ]
            },
            getLabelGap:{
                $desc:"Gets the gap between the label and the input",
                $rtn:"Number"
            },
            setLabelGap:{
                $desc:"Sets the the gap between label and input",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelCaption:{
                $desc:"Gets the label's caption",
                $rtn:"String"
            },
            setLabelCaption:{
                $desc:"Sets the label's caption",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getLabelHAlign:{
                $desc:"Gets the label's horizontal alignment",
                $rtn:"String"
            },
            setLabelHAlign:{
                $desc:"Sets the label's horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'. \u00C4\u00AC\u00C9\u008F\u00CE\u00AA 'left'",
                    $force
                ]
            },
            onClick:{
                $desc:"Fired when user click the button",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid",
                    "btn: String, the button",
                    "value: String, the value"
                ]
            },
            onLabelClick:{
                $desc:"Fired when user click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelDblClick:{
                $desc:"Fired when user double click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelActive:{
                $desc:"Fired when user mousedown the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onBlur:{
                $desc:"Fired when input box loses focus",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.input20'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({position:'relative'}));"+
                    "o.onBlur(function(){alert('onBlur')});"+
                    "}"
                ]
            },
            onFocus:{
                $desc:"Fired when input box gets focus",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.input20'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({position:'relative'}));"+
                    "o.onChange(function(p,v){xui.log(v);});"+
                    "}"
                ]
            },
            onChange:{
                $desc:"Fired before input value is changed!",
                $paras:[
                    $profile,
                    "value: String, the value"
                ],
                $snippet:[
                    "var id='xui.temp.input21-3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({position:'relative'}));"+
                    "o.onChange(function(p,v){xui.log(v);});"+
                    ")"
                ]
            },
            onCancel:{
                $desc:"Fired when ESC was pressed",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ]
            },
            beforeFormatCheck:{
                $desc:"Fired before validating value format. If returns false, the inner formatCheck function will be ignored",
                $paras:[
                    $profile,
                    "value: String, the value need to be checked"
                ],
                $snippet:[
                    "var id='xui.temp.input21'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Input({position:'relative',dynCheck:true}));"+
                    "o.beforeFormatCheck(function(p,v){if(v!=='a')return false;});"+
                    "}"
                ]
            },
            beforeFormatMark:{
                $desc:"Fired before the UIProfile sets the format mark. If returns false, the inner formatMark function will be ignored",
                $paras:[
                    $profile,
                    "formatErr: Boolean, is the format error"
                ],
                $snippet:[
                    "var id='xui.temp.input21'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$', dynCheck:true})).prepend(o=new xui.UI.Input({position:'relative',valueFormat:'^\\\\d*$', dynCheck:true}));"+
                    "o.beforeFormatMark(function(p,v){p.getSubNode('INPUT').css('background',v?'#00ff00':''); return false;});"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Group"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Group Class",
        constructor:{
            $desc:"Creates a xui.UI.Group Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            resetPanelView:{
                $desc:"Resets the group's panel view -- removes all children and fold it",
                $rtn:"[self]",
                $paras:[
                    "remvoeChildren [Optional] : Boolean, to determine whether children will be remove or not",
                    "destroyChildren [Optional] : Boolean, to determine whether children will be destroyed or not"
                ]
            },
            iniPanelView:{
                $desc:"To fire onIniPanelView event",
                $rtn:"[self]"
            },
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.grp0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group);"+
                    "xui.asyRun(function(){btn.activate();},1000)"+
                    "}"
                ]
            },
            getCaption :{
                $desc:"Gets caption text of this group",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.grp1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group);"+
                    "xui.asyRun(function(){btn.setCaption ('tag'); alert(btn.getCaption ())},1000)"+
                    "}"
                ]
            },
            setCaption :{
                $desc:"Sets caption text to this group",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grp2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group);"+
                    "xui.asyRun(function(){btn.setCaption ('tag'); alert(btn.getCaption ())},1000)"+
                    "}"
                ]
            },
            getHAlign :{
                $desc:"Gets horizontal alignment",
                $rtn:"String"
            },
            setHAlign :{
                $desc:"Sets horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'",
                    $force
                ]
            },
            getImage :{
                $desc:"Gets image url",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.grp3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif'); alert(btn.getImage())},1000)"+
                    "}"
                ]
            },
            setImage :{
                $desc:"Sets image url",
                $rtn:"[self]",
                $paras:[
                    "value [Required] :String,  image path",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grp4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif'); alert(btn.getImage())},1000)"+
                    "}"
                ]
            },
            getImagePos :{
                $desc:"Gets image position",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.grp5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif').setImagePos('left -16px'); alert(btn.getImagePos())},1000)"+
                    "}"
                ]
            },
            setImagePos :{
                $desc:"Sets image position",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grp6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif').setImagePos('left -16px'); alert(btn.getImagePos())},1000)"+
                    "}"
                ]
            },
            getImageBgSize :{
                $desc:"Gets the image background size property value on the first UIProfile",
                $rtn:"String"
            },
            setImageBgSize :{
                $desc:"Sets the image background size property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ]
            },
            getToggle:{
                $desc:"To determine whether group collapses or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.fs3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group);"+
                    "xui.asyRun(function(){btn.setToggle(false); alert(btn.getToggle ())},1000)"+
                    "}"
                ]
            },
            setToggle :{
                $desc:"Specifys whether group collapses or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.fs4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group);"+
                    "xui.asyRun(function(){btn.setToggle(false); alert(btn.getToggle ())},1000)"+
                    "}"
                ]
            },
            getToggleBtn:{
                $desc:"To determine whether toggle button shows or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.fs3-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group);"+
                    "xui.asyRun(function(){btn.setToggleBtn(false); alert(btn.getToggleBtn())},1000)"+
                    "}"
                ]
            },
            setToggleBtn :{
                $desc:"Specifys whether toggle button shows or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.fs4-2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Group);"+
                    "xui.asyRun(function(){btn.setToggleBtn(false); alert(btn.getToggleBtn())},1000)"+
                    "}"
                ]
            },


            beforeExpand:{
                $desc:"Fired before group expands. If returns false, function will be ignored",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.fs5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.Group;"+
                    "o.beforeExpand(function(){alert('beforeExpand')}).beforeFold(function(){alert('beforeFold')}).onIniPanelView(function(){alert('onIniPanelView')});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            beforeFold:{
                $desc:"Fired before group collapses. If returns false, function will be ignored",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.fs6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.Group;"+
                    "o.beforeExpand(function(){alert('beforeExpand')}).beforeFold(function(){alert('beforeFold')}).onIniPanelView(function(){alert('onIniPanelView')});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            afterExpand:{
                $desc:"Fired after group expands"
            },
            afterFold:{
                $desc:"Fired after group collapses"
            },
            onIniPanelView:{
                $desc:"Fired on panel is initialized",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.fs7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.Group;"+
                    "o.beforeExpand(function(){alert('beforeExpand')}).beforeFold(function(){alert('beforeFold')}).onIniPanelView(function(){alert('onIniPanelView')});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            onClickPanel:{
                $desc:"Fired when user click the panel",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","ComboInput"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.ComboInput Class",
        constructor:{
            $desc:"Creates a xui.UI.ComboInput Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getInputReadonly:{
                $desc:"Gets the inner Input's readonly property",
                $rtn:"Boolean"
            },
            setInputReadonly:{
                $desc:"Sets the inner Input's readonly property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean, readonly or not",
                    $force
                ]
            },
            getCaption:{
                $desc:"Gets the temporary caption text",
                $rtn:"String"
            },
            setCaption:{
                $desc:"Sets ths temporary caption text",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the caption",
                    $force
                ],
                $memo:"Only for readonly mode, for showing text temporarily"
            },
            getShowValue:{
                $desc:"Gets control's display string",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.ci001'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ComboInput({type:'listbox',items:[{id:'id1',caption:'show1'},{id:'id2',caption:'show2'}]}));"+
                    "o.setValue('id2'); xui.asyRun(function(){ alert(o.getValue() + '->' + o.getShowValue()) },1000)"+
                    "}"
                ]
            },
            resetValue:{
                $desc:"To reset value, UI value and Control value, no event will be triggered in this process",
                $rtn:'[self]',
                $paras:[
                    "value [Optional] : Object, the reset value. Default is ''"
                ],
                $snippet:[
                    "var id='xui.temp.ci1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ComboInput({value:'ini'}));"+
                    "o.setUIValue('ini2');xui.asyRun(function(){o.resetValue('ini2');},1000)"+
                    "}"
                ]
            },
            clearPopCache:{
                $desc:"Clears the popped UI cache",
                $rtn:"[self]"
            },
            expand:{
                $desc:"Opens pop window"
            },
            collapse:{
                $desc:"Close pop window"
            },
            setUplaodObj:{
                $desc:"Sets the file object, only for type='uplaod'",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : file input object"
                ]
            },
            getUploadObj:{
                $desc:"Gets the file object, only for type='uplaod'",
                $rtn:"xui.Dom",
                $snippet:[
                    "var id='xui.temp.ci2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ComboInput({type:'file'}));"+
                    "o.afterUIValueSet(function(){alert(o.getUploadObj().value)});"+
                    "}"
                ]
            },
            setType:{
                $desc:"Sets the type property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : none,input,password,combobox,listbox,file,getter,helpinput,button,dropbutton,cmdbox,popbox,date,time,datetime,color,spin,counter,currency,number. Default is 'combobox'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ci4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var label,o;xui(id).prepend(o=new xui.UI.ComboInput({position:'relative'})).prepend(label=new xui.UI.Label({position:'relative',width:100}));"+
                    "var arr=['none','combobox','listbox','file','getter','helpinput','cmdbox','popbox','time','date','color'];"+
                    "xui.Thread(null,[function(id){if(!arr.length)return xui.Thread.abort(id); var type=arr.shift();o.setType(type);label.setCaption(type)}],1000,null,null,null,true).start();"+
                    "}"
                ]
            },
            getItems:{
                $desc:"Gets the items from the current UI Object",
                $rtn:"Array",
                $snippet:[
                    "var id='xui.temp.ci5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ComboInput({position:'relative',items:[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]}));"+
                    "xui.asyRun(function(){alert(xui.serialize(o.getItems()))});"+
                    "}"
                ]
            },
            setItems:{
                $desc:"Sets the items property to the current UI Object, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array, the items",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ci6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ComboInput({position:'relative',items:[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]}));"+
                    "xui.asyRun(function(){o.setItems([{id:'aaa',caption:'bbb'}])});"+
                    "}"
                ]
            },
            getDropListHeight:{
                $desc:"Gets pop window's height(only for listbox,combobox,helpinput)",
                $rtn:"Number"
            },
            setDropListHeight:{
                $desc:"Sets pop window's height(only for listbox,combobox,helpinput)",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number, the items",
                    $force
                ]
            },
            getDropListWidth:{
                $desc:"Gets pop window's width(only for listbox,combobox,helpinput)",
                $rtn:"Number"
            },
            setDropListWidth:{
                $desc:"Sets pop window's height(only for listbox,combobox,helpinput)",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number, the items",
                    $force
                ]
            },
            getListKey:{
                $desc:"Gets the list key property from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.ci7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.UI.cacheData('test',[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]);"+
                    "xui.UI.cacheData('test2',[{id:'aa',caption:'aa'},{id:'bb',caption:'bb'},{id:'cc',caption:'cc'}]);"+
                    "var o;xui(id).prepend(o=new xui.UI.ComboInput({position:'relative',listKey:'test'}));"+
                    "xui.asyRun(function(){alert(o.getListKey())});"+
                    "}"
                ]
            },
            setListKey:{
                $desc:"Sets the list key property to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the lisk key",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ci7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui.UI.cacheData('test',[{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]);"+
                    "xui.UI.cacheData('test2',[{id:'aa',caption:'aa'},{id:'bb',caption:'bb'},{id:'cc',caption:'cc'}]);"+
                    "var o;xui(id).prepend(o=new xui.UI.ComboInput({position:'relative',listKey:'test'}));"+
                    "xui.asyRun(function(){o.setListKey('test2')},1000);"+
                    "}"
                ]
            },
            getCachePopWnd:{
                $desc:"Gets whether cache pop window or not",
                $rtn:"Boolean"
            },
            setCachePopWnd:{
                $desc:"Sets whether cache pop window or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getDateEditorTpl:{
                $desc:"Gets the date/datetime editor template",
                $rtn:"String"
            },
            setDateEditorTpl:{
                $desc:"Sets the date/datetime editor template",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getGroupingSeparator:{
                $desc:"Gets the thousands separator",
                $rtn:"String"
            },
            setGroupingSeparator:{
                $desc:"Sets the thousands separator",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getDecimalSeparator:{
                $desc:"Gets the decimal separator",
                $rtn:"String"
            },
            setDecimalSeparator:{
                $desc:"Sets the decimal separator",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getForceFillZero:{
                $desc:"Gets the property of 'whether fills zero for precision or doesnt'",
                $rtn:"Boolean"
            },
            setForceFillZero:{
                $desc:"Sets the property of 'whether fills zero for precision or doesnt'",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getPopCtrlProp:{
                $desc:"Gets properties of the standard pop control('combobox,listbox,helpinput,date,time,datetime,color')",
                $rtn:"Object"
            },
            setPopCtrlProp:{
                $desc:"Sets properties to the standard pop control('combobox,listbox,helpinput,date,time,datetime,color')",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ],
                $memo:"You have to use this function before the UIProfile is rendered"
            },
            getPopWnd:{
                $desc:"Gets the Pop up windows",
                $rtn:"[xui.UI]"
            },
            getPopCtrlEvents:{
                $desc:"Gets events of the standard pop control('combobox,listbox,helpinput,date,time,datetime,color')",
                $rtn:"Object"
            },
            setPopCtrlEvents:{
                $desc:"Sets events to the standard pop control('combobox,listbox,helpinput,date,time,datetime,color')",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ],
                $memo:"You have to use this function before the UIProfile is rendered"
            },
            getCurrencyTpl:{
                $desc:"Gets the currency template",
                $rtn:"String"
            },
            setCurrencyTpl:{
                $desc:"Sets the currency template",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. Must be a string with a '*' and no number char",
                    $force
                ]
            },
            getNumberTpl:{
                $desc:"Gets the number template",
                $rtn:"String"
            },
            setNumberTpl:{
                $desc:"Sets the number template",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. Must be a string with a '*' and no number char",
                    $force
                ]
            },
            getCommandBtn:{
                $desc:"To determine which command button shows up or not",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.ci8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative'})).prepend(o2=new xui.UI.ComboInput({position:'relative',type:'none'}));"+
                    "xui.asyRun(function(){o1.setCommandBtn('save');o2.setCommandBtn('add'); alert(o1.getCommandBtn())},1000)"+
                    "}"
                ]
            },
            setCommandBtn:{
                $desc:"Specify which command button shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ci9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative'})).prepend(o2=new xui.UI.ComboInput({position:'relative',type:'none'}));"+
                    "xui.asyRun(function(){o1.setCommandBtn('remove');o2.setCommandBtn('delete'); alert(o1.getCommandBtn())},1000)"+
                    "}"
                ]
            },
            getPrecision:{
                $desc:"Gets Precision. For style is 'spin' only",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ci11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative',type:'spin'}));"+
                    "xui.asyRun(function(){o1.setPrecision(2);alert(o1.getPrecision())},1000)"+
                    "}"
                ]
            },
            setPrecision:{
                $desc:"Sets Precision. For style is 'spin' only",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ci12'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative',type:'spin'}));"+
                    "xui.asyRun(function(){o1.setPrecision(2);alert(o1.getPrecision())},1000)"+
                    "}"
                ]
            },
            getIncrement:{
                $desc:"Gets increment value. For style is 'spin' only",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ci13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative',type:'spin'}));"+
                    "xui.asyRun(function(){o1.setIncrement(0.02);alert(o1.getIncrement())},1000)"+
                    "}"
                ]
            },
            setIncrement:{
                $desc:"Sets increment value. For style is 'spin' only",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ci14'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative',type:'spin'}));"+
                    "xui.asyRun(function(){o1.setIncrement(0.02);alert(o1.getIncrement())},1000)"+
                    "}"
                ]
            },
            getMin:{
                $desc:"Gets min value. For style is 'spin' only",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.ci15'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative',type:'spin'}));"+
                    "xui.asyRun(function(){o1.setMin(-2);alert(o1.getMin())},1000)"+
                    "}"
                ]
            },
            setMin:{
                $desc:"Sets min value. For style is 'spin' only",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ci16'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative',type:'spin'}));"+
                    "xui.asyRun(function(){o1.setMin(-2);alert(o1.getMin())},1000)"+
                    "}"
                ]
            },
            getMax:{
                $desc:"Gets max value. For style is 'spin' only",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.ci17'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative',type:'spin'}));"+
                    "xui.asyRun(function(){o1.setMax(2);alert(o1.getMax())},1000)"+
                    "}"
                ]
            },
            setMax:{
                $desc:"Sets max value. For style is 'spin' only",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ci18'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative',type:'spin'}));"+
                    "xui.asyRun(function(){o1.setMax(2);alert(o1.getMax())},1000)"+
                    "}"
                ]
            },
            onFileDlgOpen:{
                $desc:"Fired when the file upload dialog is open",
                $paras:[
                    $profile,
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.ci99'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ComboInput({type:'file'}));"+
                    "o.onFileDlgOpen(function(){alert('File upload dialog is open')});"+
                    "}"
                ]
            },
            beforeComboPop:{
                $desc:"Fired before the pop-up window is created. If returns false, the default pop window will be ignored",
                $paras:[
                    $profile,
                    "pos : the mouse position",
                    "e : Event, Dom event object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.ci100'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative',type:'cmdbox'}));"+
                    "o1.beforeComboPop(function(p){p.boxing().setUIValue( 'beforeComboPop' )});"+
                    "}"
                ]
            },
            beforePopShow:{
                $desc:"Fired before the pop-up window shows. If returns false, the default pop action won't show",
                $paras:[
                    $profile,
                    "popCtl : xui.UIProfile, pop-up window UI Control",
                    "items : Array, the list items"
                ]
            },
            afterPopShow:{
                $desc:"Fired after the pop-up window shows",
                $paras:[
                    $profile,
                    "popCtl : xui.UI, pop-up window UI Control"
                ]
            },
            afterPopHide:{
                $desc:"Fired after the pop-up window hides",
                $paras:[
                    $profile,
                    "popCtl : xui.UI, pop-up window UI Control"
                ]
            },
            onClick:{
                $desc:"Fired when the control's pop button is clicked. (Only for 'popbox' or 'getter' type)",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid",
                    "value: String, control's UI value"
                ]
            },
            onCommand:{
                $desc:"Fired when the command button is clicked",
                $paras:[
                    $profile,
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.ci101'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o1,o2;xui(id).prepend(o1=new xui.UI.ComboInput({position:'relative',commandBtn:'save'}));"+
                    "o1.onCommand(function(p){alert( p.boxing().getUIValue() )});"+
                    "}"
                ]
            }
        }
    });


    xui.set(xui.Locale,["en","doc","xui","UI","Stacks"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Stacks Class",
        constructor:{
            $desc:"Creates a xui.UI.Stacks Object"
        },
        prototype:{
            getBorderType:{
                $desc:"Gets border type from the current UI Object",
                $rtn:"String"
            },
            setBorderType:{
                $desc:"Sets border type to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'none','inset','outset','groove'or 'ridge'",
                    $force
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","ButtonViews"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.ButtonViews Class",
        constructor:{
            $desc:"Creates a xui.UI.ButtonViews Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            setBarLocation:{
                $desc:"Sets the commands bar position",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : 'top','bottom','left' or 'right'. Default is 'top'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.bv1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ButtonViews({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "var arr=['top','bottom','left','right'];"+
                    "xui.Thread(null,[function(id){if(!arr.length)return xui.Thread.abort(id); var type=arr.shift();o.setBarLocation(type);alert(o.getBarLocation())}],1000,null,null,null,true).start();"+
                    "}"
                ]
            },
            getBarLocation:{
                $desc:"Gets the commands bar position",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.bv2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ButtonViews({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "var arr=['top','bottom','left','right'];"+
                    "xui.Thread(null,[function(id){if(!arr.length)return xui.Thread.abort(id); var type=arr.shift();o.setBarLocation(type);alert(o.getBarLocation())}],1000,null,null,null,true).start();"+
                    "}"
                ]
            },
            setBarHAlign:{
                $desc:"Sets the commands bar horizontal alignment ",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'. Default is 'left'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.bv3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ButtonViews({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){o.setBarHAlign('right'); alert(o.getBarHAlign());},1000);"+
                    "}"
                ]
            },
            getBarHAlign:{
                $desc:"Gets the commands bar horizontal alignment",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.bv4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ButtonViews({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){o.setBarHAlign('right'); alert(o.getBarHAlign());},1000);"+
                    "}"
                ]
            },
            setBarVAlign:{
                $desc:"Sets the commands bar vertical alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : 'top' or 'bottom'. Default is 'top'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.bv3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ButtonViews({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){o.setBarVAlign('bottom'); alert(o.getBarVAlign());},1000);"+
                    "}"
                ]
            },
            getBarVAlign:{
                $desc:"Gets the commands bar vertical alignment",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.bv4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ButtonViews({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){o.setBarVAlign('bottom'); alert(o.getBarVAlign());},1000);"+
                    "}"
                ]
            },
            setBarSize:{
                $desc:"Sets the commands bar size",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.bv3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ButtonViews({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){o.setBarSize(30); alert(o.getBarSize());},1000);"+
                    "}"
                ]
            },
            getBarSize:{
                $desc:"Gets the commands bar size",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.bv4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ButtonViews({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){o.setBarSize(30); alert(o.getBarSize());},1000);"+
                    "}"
                ]
            },
            getSideBarSize:{
                $desc:"Gets side bar size",
                $rtn:"String"
            },
            setSideBarSize:{
                $desc:"Sets side bar size",
                $rtn:"[Number/String]",
                $paras:[
                    "value [Required] : String, em or px ",
                    $force
                ]
            },
            getSideBarStatus:{
                $desc:"gets side bar status",
                $rtn:"String"
            },
            setSideBarStatus:{
                $desc:"Sets side bar status",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, fold or expand",
                    $force
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","RadioBox"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.RadioBox Class",
        constructor:{
            $desc:"Creates a xui.UI.RadioBox Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getCheckBox:{
                $desc:"Gets whether the control shows checkbox style or not(radio style)",
                $rtn:"Boolean"
            },
            setCheckBox:{
                $desc:"Specifys whether the control shows checkbox style or not(radio style)",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getLabelSize:{
                $desc:"Gets the label's size",
                $rtn:"Number"
            },
            setLabelSize:{
                $desc:"Sets the label's size",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelPos:{
                $desc:"Gets the label's positoin",
                $rtn:"String"
            },
            setLabelPos:{
                $desc:"Sets the label's positoin",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : left, right, top, bottom \u00D6\u00AE\u00D2\u00BB",
                    $force
                ]
            },
            getLabelGap:{
                $desc:"Gets the gap between the label and the input",
                $rtn:"Number"
            },
            setLabelGap:{
                $desc:"Sets the the gap between label and input",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelCaption:{
                $desc:"Gets the label's caption",
                $rtn:"String"
            },
            setLabelCaption:{
                $desc:"Sets the label's caption",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getLabelHAlign:{
                $desc:"Gets the label's horizontal alignment",
                $rtn:"String"
            },
            setLabelHAlign:{
                $desc:"Sets the label's horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'. \u00C4\u00AC\u00C9\u008F\u00CE\u00AA 'left'",
                    $force
                ]
            },
            onLabelClick:{
                $desc:"Fired when user click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelDblClick:{
                $desc:"Fired when user double click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelActive:{
                $desc:"Fired when user mousedown the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            }
        }
    });


    xui.set(xui.Locale,["en","doc","xui","UI","ColorPicker"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.ColorPicker Class",
        constructor:{
            $desc:"Creates a xui.UI.ColorPicker Object"
        },
        getTextColor:{
            $desc:"Gets the text color that can be showd more well-marked in the specified background color",
            $rtn:'String',
            $paras:[
                "value [Required] : String, like '#FFFFFF' "
            ],
            $snippet:[
                "alert(xui.UI.ColorPicker.getTextColor('#00ff00'));alert(xui.UI.ColorPicker.getTextColor('#333333'));"
            ]
        },
        hex2rgb:{
            $desc:"Converts a normal HEX-color (like #FF00FF) into it's RGB values ([-16, 15, 240])",
            $rtn:'Array',
            $paras:[
                "hex [Required] : String"
            ],
            $snippet:[
                "alert(xui.UI.ColorPicker.hex2rgb('#00ff00'))"
            ]
        },
        hsv2rgb:{
            $desc:"Converts a normal HSV-color (like [233, 1, 0.94]) into it's RGB values ([0, 28, 241])",
            $rtn:'Array',
            $paras:[
                "h [Required] : Number. 0-360",
                "s [Required] : Number. 0-1",
                "v [Required] : Number. 0-1"
            ],
            $snippet:[
                "alert(xui.UI.ColorPicker.hsv2rgb(233, 1, 0.94))"
            ]
        },
        rgb2hsv:{
            $desc:"Converts a normal RGB values (like [0, 28, 241]) into it's HSV-color ([233, 1, 0.94])",
            $rtn:'Array',
            $paras:[
                "r [Required] : Number. 0-255",
                "g [Required] : Number. 0-255",
                "b [Required] : Number. 0-255"
            ],
            $snippet:[
                "alert(xui.UI.ColorPicker.rgb2hsv(0, 28, 241))"
            ]
        },
        rgb2hex:{
            $desc:"Converts a normal RGB values (like [0, 28, 241]) into it's HEX-color (#001CF1)",
            $rtn:'Array',
            $paras:[
                "r [Required] : Number. 0-255",
                "g [Required] : Number. 0-255",
                "b [Required] : Number. 0-255"
            ],
            $snippet:[
                "alert(xui.UI.ColorPicker.rgb2hex(0, 28, 241))"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]"
            },
            getColorName:{
                $desc:"Gets color name from the ColorPicker Object, if it exists",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.clr1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ColorPicker({position:'relative',closeBtn:false}));"+
                    "o.afterUIValueSet(function(){alert(o.getColorName())});"+
                    "}"
                ]
            },
            getAdvance:{
                $desc:"To determine whether advanced chooser shows up on the right side",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.clr2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ColorPicker({position:'relative',closeBtn:false}));"+
                    "xui.asyRun(function(){o.setAdvance(true);alert(o.getAdvance())},1000);"+
                    "}"
                ]
            },
            setAdvance:{
                $desc:"Specify whether advanced chooser shows up on the right side, and reflects it to DOM UI",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.clr2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ColorPicker({position:'relative',closeBtn:false}));"+
                    "xui.asyRun(function(){o.setAdvance(true);alert(o.getAdvance())},1000);"+
                    "}"
                ]
            },
            getCloseBtn:{
                $desc:"To determine whether close button shows up or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.clr3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ColorPicker({position:'relative'}));"+
                    "xui.asyRun(function(){o.setCloseBtn(false);alert(o.getCloseBtn())},1000);"+
                    "}"
                ]
            },
            setCloseBtn:{
                $desc:"Specifys whether close button shows up or not, and reflects it to DOM UI",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.clr4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ColorPicker({position:'relative'}));"+
                    "xui.asyRun(function(){o.setCloseBtn(false);alert(o.getCloseBtn())},1000);"+
                    "}"
                ]
            },
            getBarDisplay:{
                $desc:"To determine whether display bar shows up or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.clr5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ColorPicker({position:'relative'}));"+
                    "xui.asyRun(function(){o.setBarDisplay(false);alert(o.getBarDisplay())},1000);"+
                    "}"
                ]
            },
            setBarDisplay:{
                $desc:"Specifys whether display bar shows up or not, and reflects it to DOM UI",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.clr6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ColorPicker({position:'relative'}));"+
                    "xui.asyRun(function(){o.setBarDisplay(false);alert(o.getBarDisplay())},1000);"+
                    "}"
                ]
            },

            beforeClose:{
                $desc:"Fired before user click close button. If returns false, close function will be ignored",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.clr9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.ColorPicker({position:'relative'}));"+
                    "o.beforeClose(function(){return false;});"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","DatePicker"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.DatePicker Class",
        constructor:{
            $desc:"Creates a xui.UI.DatePicker Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]"
            },
            getTimeInput:{
                $desc:"To determine whether time input shows up or not",
                $rtn:"Boolean"
            },
            setTimeInput:{
                $desc:"Specifys whether time input shows up or not, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getFirstDayOfWeek:{
                $desc:"Gets the first day of week. 0-6 represents Sunday to Saturday",
                $rtn:"Number"
            },
            setFirstDayOfWeek:{
                $desc:"Sets the first day of week",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number. 0-6 represents Sunday to Saturday",
                    $force
                ]
            },
            getOffDays:{
                $desc:"Gets the Off Days info. 6 characters('0,'1','2','3','4','5','6') only. 0-6 represents Sunday to Saturday",
                $rtn:"String"
            },
            setOffDays:{
                $desc:"Sets the Off Days info, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. 6 characters('0,'1','2','3','4','5','6') only. 0-6 represents Sunday to Saturday",
                    $force
                ]
            },
            getHideWeekLabels:{
                $desc:"To determine whether week labels shows up or not",
                $rtn:"Boolean"
            },
            setHideWeekLabels:{
                $desc:"Specifys whether week labels shows up or not, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getDateInputFormat:{
                $desc:"Gets date input formats (Three inputs in the header)",
                $rtn:"String"
            },
            setDateInputFormat:{
                $desc:"Sets date input formats (Three inputs in the header), and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String.  'yyyy-mm-dd' or 'mm-dd-yyyy' or 'dd-mm-yyyy'",
                    $force
                ]
            },
            getCloseBtn:{
                $desc:"To determine whether close button shows up or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.dp1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.DatePicker({position:'relative'}));"+
                    "xui.asyRun(function(){o.setCloseBtn(false);alert(o.getCloseBtn())},1000);"+
                    "}"
                ]
            },
            setCloseBtn:{
                $desc:"Specifys whether close button shows up or not, and reflects it to DOM UI",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.dp2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.DatePicker({position:'relative'}));"+
                    "xui.asyRun(function(){o.setCloseBtn(false);alert(o.getCloseBtn())},1000);"+
                    "}"
                ]
            },
            getDateFrom:{
                $desc:"Gets the from date of the date",
                $rtn:"Object, Date Object",
                $snippet:[
                    "var id='xui.temp.dp2-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.DatePicker({position:'relative'}));"+
                    "xui.asyRun(function(){alert(o.getDateFrom())},1000);"+
                    "}"
                ]
            },

            beforeClose:{
                $desc:"Fired before user click close button. If returns false, close function will be ignored",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.dp3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.DatePicker({position:'relative'}));"+
                    "o.beforeClose(function(){alert('I stop you from closing it');return false;});"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","TimePicker"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.TimePicker Class",
        constructor:{
            $desc:"Creates a xui.UI.TimePicker Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]"
            },
            getCloseBtn:{
                $desc:"To determine whether close button shows up or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.tp1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.TimePicker({position:'relative'}));"+
                    "xui.asyRun(function(){o.setCloseBtn(false);alert(o.getCloseBtn())},1000);"+
                    "}"
                ]
            },
            setCloseBtn:{
                $desc:"Specifys whether close button shows up or not., and reflects it to DOM UI",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.tp2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.TimePicker({position:'relative'}));"+
                    "xui.asyRun(function(){o.setCloseBtn(false);alert(o.getCloseBtn())},1000);"+
                    "}"
                ]
            },
            beforeClose:{
                $desc:"Fired before user click close button. If returns false, close function will be ignored",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.tp3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.TimePicker({position:'relative'}));"+
                    "o.beforeClose(function(){return false;});"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Slider"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Slider Class",
        constructor:{
            $desc:"Creates a xui.UI.Slider Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getType:{
                $desc:"Gets Slider type'vertical' or 'horizontal'",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.sl2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Slider()));"+
                    "xui.asyRun(function(){o.setType('horizontal'); alert(o.getType())},1000);"+
                    "}"
                ]
            },
            setType:{
                $desc:"Sets Slider type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'vertical' or 'horizontal'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.sl3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Slider({width:50,height:150})));"+
                    "xui.asyRun(function(){o.setType('vertical'); alert(o.getType())},1000);"+
                    "}"
                ]
            },
            getSteps:{
                $desc:"Gets Slider steps property",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.sl4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Slider()));"+
                    "xui.asyRun(function(){o.setSteps(10).setUIValue('2:5'); alert(o.getSteps()); },1000);"+
                    "}"
                ]
            },
            setSteps:{
                $desc:"Sets Slider steps property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number, steps value(integer)",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.sl5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Slider()));"+
                    "xui.asyRun(function(){o.setSteps(10).setUIValue('2:5'); alert(o.getSteps()); },1000);"+
                    "}"
                ]
            },
            getShowIncreaseHandle:{
                $desc:"Gets showIncreaseHandle property",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.sl6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Slider()));"+
                    "xui.asyRun(function(){o.setShowIncreaseHandle(false); alert(o.getShowIncreaseHandle()); },1000);"+
                    "}"
                ]
            },
            setShowIncreaseHandle:{
                $desc:"Sets showIncreaseHandle property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.sl7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Slider()));"+
                    "xui.asyRun(function(){o.setShowIncreaseHandle(false); alert(o.getShowIncreaseHandle()); },1000);"+
                    "}"
                ]
            },
            getShowDecreaseHandle:{
                $desc:"Gets showDecreaseHandle property",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.sl8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Slider()));"+
                    "xui.asyRun(function(){o.setShowDecreaseHandle(false); alert(o.getShowDecreaseHandle()); },1000);"+
                    "}"
                ]
            },
            setShowDecreaseHandle:{
                $desc:"Sets showDecreaseHandle property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.sl9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Slider()));"+
                    "xui.asyRun(function(){o.setShowDecreaseHandle(false); alert(o.getShowDecreaseHandle()); },1000);"+
                    "}"
                ]
            },
            getIsRange:{
                $desc:"Gets isRange property",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.sl10'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Slider()));"+
                    "xui.asyRun(function(){o.setIsRange(false); alert(o.getIsRange()); },1000);"+
                    "}"
                ]
            },
            setIsRange:{
                $desc:"Sets isRange property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.sl11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Slider()));"+
                    "xui.asyRun(function(){o.setIsRange(false); alert(o.getIsRange()); },1000);"+
                    "}"
                ]
            },
            getLabelSize:{
                $desc:"Gets the label's size",
                $rtn:"Number"
            },
            setLabelSize:{
                $desc:"Sets the label's size",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelPos:{
                $desc:"Gets the label's positoin",
                $rtn:"String"
            },
            setLabelPos:{
                $desc:"Sets the label's positoin",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : left, right, top, bottom \u00D6\u00AE\u00D2\u00BB",
                    $force
                ]
            },
            getLabelGap:{
                $desc:"Gets the gap between the label and the input",
                $rtn:"Number"
            },
            setLabelGap:{
                $desc:"Sets the the gap between label and input",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelCaption:{
                $desc:"Gets the label's caption",
                $rtn:"String"
            },
            setLabelCaption:{
                $desc:"Sets the label's caption",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getLabelHAlign:{
                $desc:"Gets the label's horizontal alignment",
                $rtn:"String"
            },
            setLabelHAlign:{
                $desc:"Sets the label's horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'. \u00C4\u00AC\u00C9\u008F\u00CE\u00AA 'left'",
                    $force
                ]
            },
            onLabelClick:{
                $desc:"Fired when user click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelDblClick:{
                $desc:"Fired when user double click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelActive:{
                $desc:"Fired when user mousedown the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","List"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.List Class",
        constructor:{
            $desc:"Creates a xui.UI.List Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getShowValue:{
                $desc:"Gets control's display string",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.list00'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "o.setValue('b'); xui.asyRun(function(){ alert(o.getValue() + '->' + o.getShowValue()) },1000)"+
                    "}"
                ]
            },
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.list0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){o.activate();},1000)"+
                    "}"
                ]
            },
            adjustSize:{
                $desc:"To adjust list width and height automatically",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.list3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){o.adjustSize();},1000)"+
                    "}"
                ]
            },
            getMaxHeight:{
                $desc:"Gets maximal height",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.list4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "alert(o.setMaxHeight(40).getMaxHeight());xui.asyRun(function(){o.adjustSize();},1000)"+
                    "}"
                ]
            },
            setMaxHeight:{
                $desc:"Sets minimal height",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.list5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "alert(o.setMaxHeight(40).getMaxHeight());xui.asyRun(function(){o.adjustSize();},1000)"+
                    "}"
                ]
            },
            getSelMode:{
                $desc:"Gets selection mode. Could be 'none', 'single', 'multi' or 'multibycheckbox'",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.list6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setSelMode('multi').getSelMode());},1000)"+
                    "}"
                ]
            },
            setSelMode:{
                $desc:"Sets selection mode",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'none', 'multi', 'multibycheckbox', or 'single'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.list7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setSelMode('multi').getSelMode());},1000)"+
                    "}"
                ]
            },
            getNoCtrlKey:{
                $desc:"To determine whether using Ctrl keyboard to help select multi items or not",
                $rtn:"Boolean"
            },
            setNoCtrlKey:{
                $desc:"Specifies using Ctrl keyboard to help select multi items or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getLite:{
                $desc:"To determine whether it's a lite version or not",
                $rtn:"Boolean"
            },
            setLite:{
                $desc:"Specifies rendering as lite version or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getBorderType:{
                $desc:"Gets border type from the current UI Object",
                $rtn:"String"
            },
            setBorderType:{
                $desc:"Sets border type to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'none','inset','outset','groove'or 'ridge'",
                    $force
                ]
            },
            getItemRow:{
                $desc:"Gets whether items shows as row or a cell",
                $rtn:"Boolean"
            },
            setItemRow:{
                $desc:"Specifys whether items shows as row or a cell",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getTagCmds:{
                $desc:"Gets command buttons",
                $rtn:"Array"
            },
            setTagCmds:{
                $desc:"Sets command buttons",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array, the items",
                    $force
                ]
            },
            getOptBtn:{
                $desc:"To get the option button class",
                $rtn:"String"
            },
            setOptBtn:{
                $desc:"To set the option button class",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getLabelSize:{
                $desc:"Gets the label's size",
                $rtn:"Number"
            },
            setLabelSize:{
                $desc:"Sets the label's size",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelPos:{
                $desc:"Gets the label's positoin",
                $rtn:"String"
            },
            setLabelPos:{
                $desc:"Sets the label's positoin",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : left, right, top, bottom \u00D6\u00AE\u00D2\u00BB",
                    $force
                ]
            },
            getLabelGap:{
                $desc:"Gets the gap between the label and the input",
                $rtn:"Number"
            },
            setLabelGap:{
                $desc:"Sets the the gap between label and input",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelCaption:{
                $desc:"Gets the label's caption",
                $rtn:"String"
            },
            setLabelCaption:{
                $desc:"Sets the label's caption",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getLabelHAlign:{
                $desc:"Gets the label's horizontal alignment",
                $rtn:"String"
            },
            setLabelHAlign:{
                $desc:"Sets the label's horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'. \u00C4\u00AC\u00C9\u008F\u00CE\u00AA 'left'",
                    $force
                ]
            },
            onLabelClick:{
                $desc:"Fired when user click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelDblClick:{
                $desc:"Fired when user double click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelActive:{
                $desc:"Fired when user mousedown the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onItemSelected:{
                $desc:"Fired when list item is selected",
                $paras:[
                    $profile,
                    "item: Object, list item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid",
                    "type : Number, 0:no affacted; 1:checked; -1: unchecked"
                ],
                $snippet:[
                    "var id='xui.temp.list8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({selMode:'none',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "o.onItemSelected(function(p,item,s){alert(item.id);});"+
                    "}"
                ]
            },
            beforeClick:{
                $desc:"Fired before a list item was clicked. If returns false, click function will be ignored",
                $paras:[
                    $profile,
                    "item: list item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onClick:{
                $desc:"Fired when a list item was clicked",
                $paras:[
                    $profile,
                    "item: list item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            afterClick:{
                $desc:"Fired after a list item was clicked",
                $paras:[
                    $profile,
                    "item: list item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onDblclick:{
                $desc:"Fired when list item was dblclicked",
                $paras:[
                    $profile,
                    "item: list item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.list9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.List({selMode:'none',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "o.onDblclick(function(p,item,s){alert(item.id);});"+
                    "}"
                ]
            },
            onShowOptions :{
                $desc:"Fired when user click the option button",
                $paras:[
                    $profile,
                    "item: list item Object",
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onCmd:{
                $desc:"Fired when an inner command is clicked",
                $paras:[
                    $profile,
                    "item: Object, list item Object",
                    "cmdKey: String, the command key",
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","StatusButtons"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.StatusButtons Class",
        constructor:{
            $desc:"Creates a xui.UI.StatusButtons Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getItemMargin:{
                $desc:"Gets the item margin property value on the first UIProfile",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.llist1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.StatusButtons({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemMargin(10).getItemMargin());},1000)"+
                    "}"
                ]
            },
            setItemMargin:{
                $desc:"Sets the ItemMargin property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.llist2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.StatusButtons({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemMargin(10).getItemMargin());},1000)"+
                    "}"
                ]
            },
            getItemAlign:{
                $desc:"Gets item's text align",
                $rtn:"String"
            },
            setItemAlign:{
                $desc:"Sets item's text align",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String'left', 'center' or 'right'",
                    $force
                ]
            },
            getItemWidth:{
                $desc:"Gets item width",
                $rtn:"Number"
            },
            setItemWidth:{
                $desc:"Sets item width",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelSize:{
                $desc:"Gets the label's size",
                $rtn:"Number"
            },
            setLabelSize:{
                $desc:"Sets the label's size",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelPos:{
                $desc:"Gets the label's positoin",
                $rtn:"String"
            },
            setLabelPos:{
                $desc:"Sets the label's positoin",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : left, right, top, bottom \u00D6\u00AE\u00D2\u00BB",
                    $force
                ]
            },
            getLabelGap:{
                $desc:"Gets the gap between the label and the input",
                $rtn:"Number"
            },
            setLabelGap:{
                $desc:"Sets the the gap between label and input",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLabelCaption:{
                $desc:"Gets the label's caption",
                $rtn:"String"
            },
            setLabelCaption:{
                $desc:"Sets the label's caption",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getLabelHAlign:{
                $desc:"Gets the label's horizontal alignment",
                $rtn:"String"
            },
            setLabelHAlign:{
                $desc:"Sets the label's horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'. \u00C4\u00AC\u00C9\u008F\u00CE\u00AA 'left'",
                    $force
                ]
            },
            onLabelClick:{
                $desc:"Fired when user click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelDblClick:{
                $desc:"Fired when user double click the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onLabelActive:{
                $desc:"Fired when user mousedown the label",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onItemClick:{
                $desc:"Fired when list item is clicked",
                $paras:[
                    $profile,
                    "item: Object, list item Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.llist8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.StatusButtons({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "o.onItemClick(function(p,item,s){alert(item.id);});"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Gallery"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Gallery Class",
        constructor:{
            $desc:"Creates a xui.UI.Gallery Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getStatus:{
                $desc:"Gets a specified item image status",
                $paras:[
                    "subId [Required] : String, the sub Id"
                ],
                $rtn:"String, 'ini', 'error' or 'loaded'",
                $snippet:[
                    "var id='xui.temp.ga001'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.getStatus('c'));});"+
                    "xui.asyRun(function(){alert(o.getStatus('c'));},3000);"+
                    "}"
                ]
            },
            getAutoItemSize:{
                $desc:"To determine whether the size of item change with the size of the picture  automatically",
                $rtn:"Boolean"
            },
            setAutoItemSize:{
                $desc:"Specify whether the size of item change with the size of the picture  automatically",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getImgHeight:{
                $desc:"Gets item image height",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.ga1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemHeight(40).setImgHeight(30).getImgHeight());},1000)"+
                    "}"
                ]
            },
            setImgHeight:{
                $desc:"Sets item image heiht",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ga2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemHeight(40).setImgHeight(30).getItemMargin());},1000)"+
                    "}"
                ]
            },
            getImgWidth:{
                $desc:"Gets item image width",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ga3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemWidth(40).setImgWidth(40).getImgWidth());},1000)"+
                    "}"
                ]
            },
            setImgWidth:{
                $desc:"Sets item image width",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.da4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemWidth(40).setImgWidth(40).getItemMargin());},1000)"+
                    "}"
                ]
            },
            getItemWidth:{
                $desc:"Gets item width",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ga5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemWidth(40).getItemWidth());},1000)"+
                    "}"
                ]
            },
            setItemWidth:{
                $desc:"Sets item width",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ga6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemWidth(40).getItemMargin());},1000)"+
                    "}"
                ]
            },
            getItemHeight:{
                $desc:"Gets item height",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ga7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemHeight(40).getItemHeight());},1000)"+
                    "}"
                ]
            },
            setItemHeight:{
                $desc:"Sets item height",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ga8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemHeight(40).getItemMargin());},1000)"+
                    "}"
                ]
            },
            getItemMargin:{
                $desc:"Gets item margin",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ga9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemMargin(10).getItemMargin());},1000)"+
                    "}"
                ]
            },
            setItemMargin:{
                $desc:"Sets item margin",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ga10'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemMargin(10).getItemMargin());},1000)"+
                    "}"
                ]
            },
            getItemPadding:{
                $desc:"Gets item padding",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.ga11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemPadding(10).getItemPadding());},1000)"+
                    "}"
                ]
            },
            setItemPadding:{
                $desc:"Sets item padding",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.ga12'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Gallery({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]}));"+
                    "xui.asyRun(function(){alert(o.setItemPadding(10).getItemPadding());},1000)"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Panel"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Panel Class",
        constructor:{
            $desc:"Creates a xui.UI.Panel Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            resetPanelView:{
                $desc:"Resets the group's panel view -- removes all children and fold it",
                $rtn:"[self]",
                $paras:[
                    "remvoeChildren [Optional] : Boolean, to determine whether children will be remove or not",
                    "destroyChildren [Optional] : Boolean, to determine whether children will be destroyed or not"
                ]
            },
            iniPanelView:{
                $desc:"To fire onIniPanelView event",
                $rtn:"[self]"
            },
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]",
                $paras:[
                    "flag [Optional] : Boolean, false represents deactive"
                ],
                $snippet:[
                    "var id='xui.temp.panel01'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.activate();},500); xui.asyRun(function(){btn.activate(false);},1000);"+
                    "}"
                ]
            },
            getCloseBtn :{
                $desc:"To determine whether close button shows up or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.panel35'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.setCloseBtn(true); alert(btn.getCloseBtn ())},1000)"+
                    "}"
                ]
            },
            setCloseBtn :{
                $desc:"Specifys whether close button shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.panel36'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.setCloseBtn(true); alert(btn.getCloseBtn ())},1000)"+
                    "}"
                ]
            },
            getNoFrame:{
                $desc:"To determine whether outter frame shows up or not",
                $rtn:"Boolean"
            },
            setNoFrame:{
                $desc:"Specifys whether outter frame shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getPopBtn :{
                $desc:"To determine whether pop button shows up or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.panel37'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.setPopBtn(true); alert(btn.getPopBtn ())},1000)"+
                    "}"
                ]
            },
            setPopBtn :{
                $desc:"Specifys whether pop button shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.panel38'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.setPopBtn(true); alert(btn.getPopBtn ())},1000)"+
                    "}"
                ]
            },
            getOptBtn :{
                $desc:"To determine whether option button shows up or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.panel39'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.setOptBtn(true); alert(btn.getOptBtn ())},1000)"+
                    "}"
                ]
            },
            setOptBtn :{
                $desc:"Specifys whether option button shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.panel40'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.setOptBtn(true); alert(btn.getOptBtn ())},1000)"+
                    "}"
                ]
            },
            getInfoBtn :{
                $desc:"To determine whether help button shows up or not",
                $rtn:"Boolean"
            },
            setInfoBtn :{
                $desc:"Specifys whether help button shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getRefreshBtn :{
                $desc:"To determine whether refresh button shows up or not",
                $rtn:"Boolean"
            },
            setRefreshBtn :{
                $desc:"Specifys whether refresh button shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getToggleBtn :{
                $desc:"To determine whether toggle button shows up or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.panel41'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.setToggleBtn(true); alert(btn.getToggleBtn ())},1000)"+
                    "}"
                ]
            },
            setToggleBtn :{
                $desc:"Specifys whether toggle button shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.panel42'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.setToggleBtn(true); alert(btn.getToggleBtn ())},1000)"+
                    "}"
                ]
            },
            getCaption :{
                $desc:"Gets caption text",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.panel1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.setCaption ('tag'); alert(btn.getCaption ())},1000)"+
                    "}"
                ]
            },
            setCaption :{
                $desc:"Sets caption text",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.panel2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel);"+
                    "xui.asyRun(function(){btn.setCaption ('tag'); alert(btn.getCaption ())},1000)"+
                    "}"
                ]
            },
            getImage :{
                $desc:"Gets the image url",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.panel3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif'); alert(btn.getImage())},1000)"+
                    "}"
                ]
            },
            setImage :{
                $desc:"Sets the image url",
                $rtn:"[self]",
                $paras:[
                    "value [Required] :String,  image path",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.panel4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif'); alert(btn.getImage())},1000)"+
                    "}"
                ]
            },
            getImagePos :{
                $desc:"Gets image image position",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.panel5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif').setImagePos('left -16px'); alert(btn.getImagePos())},1000)"+
                    "}"
                ]
            },
            setImagePos :{
                $desc:"Sets image position",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.panel6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel({height:50}));"+
                    "xui.asyRun(function(){btn.setImage('img/img.gif').setImagePos('left -16px'); alert(btn.getImagePos())},1000)"+
                    "}"
                ]
            },
            getImageBgSize :{
                $desc:"Gets the image background size property value on the first UIProfile",
                $rtn:"String"
            },
            setImageBgSize :{
                $desc:"Sets the image background size property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ]
            },
            getToggle:{
                $desc:"Gets the toggle property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.panel7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel({html:'content'}));"+
                    "xui.asyRun(function(){btn.setToggle(false); alert(btn.getToggle ())},1000)"+
                    "}"
                ]
            },
            setToggle :{
                $desc:"Sets the toggle property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.panel8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var btn;xui(id).prepend(btn=new xui.UI.Panel({html:'content'}));"+
                    "xui.asyRun(function(){btn.setToggle(false); alert(btn.getToggle ())},1000)"+
                    "}"
                ]
            },
            getBorderType:{
                $desc:"Gets border type from the panel",
                $rtn:"String"
            },
            setBorderType:{
                $desc:"Sets border type to the panel",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'none','inset','outset','groove'or 'ridge'",
                    $force
                ]
            },
            beforeExpand:{
                $desc:"Fired before panel expands. If returns false, function will be ignored",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.panel9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.Panel({toggleBtn:true,html:'content'});"+
                    "o.beforeExpand(function(){alert('beforeExpand')}).beforeFold(function(){alert('beforeFold')}).onIniPanelView(function(){alert('onIniPanelView')});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            beforeFold:{
                $desc:"Fired before panel collapses. If returns false, function will be ignored",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.panel10'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.Panel({toggleBtn:true,html:'content'});"+
                    "o.beforeExpand(function(){alert('beforeExpand')}).beforeFold(function(){alert('beforeFold')}).onIniPanelView(function(){alert('onIniPanelView')});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            afterExpand:{
                $desc:"Fired after panel expands"
            },
            afterFold:{
                $desc:"Fired after panel collapses"
            },
            onIniPanelView:{
                $desc:"Fired when panel is initialized",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.panel11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.Panel({toggleBtn:true,html:'content'});"+
                    "o.beforeExpand(function(){alert('beforeExpand')}).beforeFold(function(){alert('beforeFold')}).onIniPanelView(function(){alert('onIniPanelView')});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            onClickBar:{
                $desc:"Fired when panel handler is clicked",
                $paras:[
                    $profile,
                    "src: String, the related DOM element"
                ],
                $snippet:[
                    "var id='xui.temp.panel12'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Panel({position:'relative',closeBtn:true,html:'content'}));"+
                    "o.onClickBar(function(){alert('onClickBar')});"+
                    "}"
                ]
            },
            beforePop:{
                $desc:"Fired before user click pop button. If returns false, pop function will be ignored",
                $paras:[
                    $profile,
                    "options : Object. the following keys: parent, host, properties, events, host, theme, CS, CC, CB, CF",
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            beforeClose:{
                $desc:"Fired before user click close button. If returns false, close function will be ignored",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.panel13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Panel({position:'relative',closeBtn:true,html:'content'}));"+
                    "o.beforeClose(function(){return false;});"+
                    "}"
                ]
            },
            onShowInfo:{
                $desc:"Fired when help command is clicked",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ]
            },
            onRefresh:{
                $desc:"Fired when refresh command is clicked",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ]
            },
            onShowOptions :{
                $desc:"Fired when user click the option button",
                $paras:[
                    $profile,
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.panel14'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Panel({position:'relative',optBtn:true,html:'content'}));"+
                    "o.onShowOptions(function(){alert('onShowOptions');});"+
                    "}"
                ]
            },
            onClickPanel:{
                $desc:"Fired when user click the panel",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element"
                ]
            }

        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","PageBar"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.PageBar Class",
        constructor:{
            $desc:"Creates a xui.UI.PageBar Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            setPage:{
                $desc:"Sets the current PageBar to the specified page",
                $rtn:"[self]",
                $paras:[
                    "value [Required]: Number. page number",
                    "force [Optional]: Boolean. force to set it. Default is false",
                    "type [Optional]: String. setting type: inited, input, click, code"
                ],
                $snippet:[
                    "var id='xui.temp.pb0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})));"+
                    "xui.asyRun(function(){o.setPage(100);},1000);"+
                    "}"
                ]
            },
            getPage:{
                $desc:"Gets the current page number, or total page number",
                $rtn:"Number",
                $paras:[
                    "total [Optional]: Boolean. To determine whether returns current page number, or total page number."
                ]
            },
            getTotalPages:{
                $desc:"Gets the total page number",
                $rtn:"Number"
            },
            setTotalCount:{
                $desc:"Sets the total record count",
                $rtn:"[self]",
                $paras:[
                    "count [Required]: Number. total count number"
                ]
            },
            getPageCount:{
                $desc:"Gets the record count for one page",
                $rtn:"Number"
            },
            setPageCount:{
                $desc:"Sets the record count for one page",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number, the record count for one page",
                    $force
                ]
            },
            getShowMoreBtns:{
                $desc:"To determine whether shows more buttons or doesn't",
                $rtn:"Boolean"
            },
            setShowMoreBtns:{
                $desc:"To specify whether shows more buttons or doesn't",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getCaption:{
                $desc:"Gets the caption string from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.pb1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})).setCaption('Page =>'));"+
                    "xui.asyRun(function(){alert(o.getCaption())});"+
                    "}"
                ]
            },
            setCaption:{
                $desc:"Sets the caption string to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the caption",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.pb2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})).setCaption('Page =>'));"+
                    "xui.asyRun(function(){alert(o.getCaption())});"+
                    "}"
                ]
            },
            getNextMark:{
                $desc:"Gets the NextMark string from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.pb3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})).setNextMark('next'));"+
                    "xui.asyRun(function(){alert(o.getNextMark())});"+
                    "}"
                ]
            },
            setNextMark:{
                $desc:"Sets the NextMark string to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the NextMark",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.pb4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})).setNextMark('next'));"+
                    "xui.asyRun(function(){alert(o.getNextMark())});"+
                    "}"
                ]
            },
            getPrevMark:{
                $desc:"Gets the PrevMark string from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.pb5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})).setPrevMark('prev'));"+
                    "xui.asyRun(function(){alert(o.getPrevMark('{'))});"+
                    "}"
                ]
            },
            setPrevMark:{
                $desc:"Sets the PrevMark string to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the PrevMark",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.pb6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})).setPrevMark('prev'));"+
                    "xui.asyRun(function(){alert(o.getPrevMark())});"+
                    "}"
                ]
            },
            getTextTpl:{
                $desc:"Gets the TextTpl string from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.pb7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})).setTextTpl('[*]'));"+
                    "xui.asyRun(function(){alert(o.getTextTpl())});"+
                    "}"
                ]
            },
            setTextTpl:{
                $desc:"Sets the TextTpl string to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the TextTpl",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.pb8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})).setTextTpl('[*]'));"+
                    "xui.asyRun(function(){alert(o.getTextTpl())});"+
                    "}"
                ]
            },
            getUriTpl:{
                $desc:"Gets the UriTpl string from the current UI Object",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.pb9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})).setUriTpl('#aaa=*'));"+
                    "xui.asyRun(function(){alert(o.getUriTpl())});"+
                    "}"
                ]
            },
            setUriTpl:{
                $desc:"Sets the UriTpl string to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, the UriTpl",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.pb10'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.PageBar({value:'1:3:300'})).setUriTpl('#aaa=*'));"+
                    "xui.asyRun(function(){alert(o.getUriTpl())});"+
                    "}"
                ]
            },


            onClick:{
                $desc:"onClick event handler",
                $paras:[
                    $profile,
                    "page : Numer, the target page"
                ],
                $snippet:[
                    "var id='xui.temp.pb11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "xui(id).prepend((new xui.UI.PageBar({value:'1:3:300'})).onClick(function(profile,page){profile.boxing().setPage(page);}))"+
                    "}"
                ]
            },
            onPageSet:{
                $desc:"onPage changed event handler",
                $paras:[
                    $profile,
                    "page : Number, the new page number",
                    "start: Number,  the new page record start number",
                    "count: Number, the record count for one page",
                    "eventType: String, the event type: inited, input, click, code",
                    "opage : Number, the old page number",
                    "ostart: Number, the old page record start number"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Layout"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Layout Class",
        constructor:{
            $desc:"Creates a xui.UI.Layout Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            append:{
                $desc:"Appends a set of xui.UIProfile objects to the inside of the first profile",
                $rtn:"[self]",
                $paras:[
                    "target [Required] : a xui.UI ojbect(including a set of xui.UIProfile objects)",
                    "subId [Optional] : String, the sub id that determines the [target] will be added to which sub DOM node. This parameter can be [false] too, that means the [target] will be appended to DOM only, no link created between the [target] UIProfiles and the parent UIProfile"
                ],
                $snippet:[
                    "var id='xui.temp.lo0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Layout({items:[{id:'main'},{id:'after',size:50}]})));"+
                    "xui.asyRun(function(){o.append(new xui.UI.Button,'after');},1000);"+
                    "}"
                ]
            },
            getPanel:{
                $desc:"Gets the panel DOM according to the specified subId",
                $rtn:"xui.Dom",
                $paras:[
                    "subId [Optional] : String, the sub id that determines the result. Default is 'main'"
                ],
                $snippet:[
                    "var id='xui.temp.lo1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Layout({items:[{id:'main'},{id:'after',size:50}]})));"+
                    "xui.asyRun(function(){o.getPanel('after').append(xui.create('<button>afgter</button>'));},1000);"+
                    "}"
                ]
            },
            getType:{
                $desc:"Gets layout type. Could be 'vertical' or 'horizontal' ",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.lo2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Layout({items:[{id:'main'},{id:'after',size:50}]})));"+
                    "xui.asyRun(function(){o.append(new xui.UI.Button).setType('horizontal'); alert(o.getType())},1000);"+
                    "}"
                ]
            },
            setType:{
                $desc:"Sets layout type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : 'vertical' or 'horizontal'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.lo3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Layout({items:[{id:'main'},{id:'after',size:50}]})));"+
                    "xui.asyRun(function(){o.append(new xui.UI.Button).setType('horizontal'); alert(o.getType())},1000);"+
                    "}"
                ]
            },
            insertItems:{
                $desc:"Inserts a set of layout items to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "arr [Required] : Array, A set of Item objects",
                    "base [Optional] : String, the base item id string",
                    "before [Optional] : Boolean, Indicates whether it inserts the target items before the base, or after the base. Default is false;"
                ],
                $snippet:[
                    "var id='xui.temp.lo3-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Layout({items:[{id:'main'},{id:'after',size:50}]})));"+
                    "xui.asyRun(function(){o.insertItems([{id:'a1',size:30}],'main',true)},1000);"+
                    "xui.asyRun(function(){o.insertItems([{id:'c1',size:30,cmd:false}],'main',false)},2000);"+
                    "xui.asyRun(function(){o.insertItems([{id:'a0',size:30, folded:true}],'after',true)},3000);"+
                    "xui.asyRun(function(){o.insertItems([{id:'c2',size:30}],'after',false)},4000);"+
                    "}"
                ]
            },
            updateItem:{
                $desc:"Updates the specified layout item and the corresponding DOM Element",
                $rtn:"[self]",
                $paras:[
                    "id [Required] : String, The node id",
                    "options [Required] : a key/value pairs Object or String"
                ],
                $snippet:[
                    "var id='xui.temp.lo3-2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Layout({items:[{id:'main'},{id:'after',size:50}]})));"+
                    "xui.asyRun(function(){o.updateItem('after',{size:30})},1000);"+
                    "xui.asyRun(function(){o.updateItem('after',{folded:true})},2000);"+
                    "xui.asyRun(function(){o.updateItem('after',{folded:false,cmd:false})},3000);"+
                    "xui.asyRun(function(){o.updateItem('after',{hidden:true})},4000);"+
                    "xui.asyRun(function(){o.updateItem('after',{folded:false,size:50,cmd:true,hidden:false})},5000);"+
                    "}"
                ]
            },
            setItems:{
                $desc:"Sets layout items, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array, the items"
                ],
                $snippet:[
                    "var id='xui.temp.lo4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Layout({items:[{id:'main'},{id:'before',size:50},{id:'after',size:50}]})));"+
                    "o.append(new xui.UI.Button).append(new xui.UI.Link, 'before').append(new xui.UI.Input, 'after');"+
                    "xui.asyRun(function(){o.setType('horizontal').setItems([{id:'before', pos:'before', 'size':50, min:50, max:200}, {id:'main', min:10}, {id:'after', pos:'after', size:50}, {id:'c', pos:'after', cmd:true, size:50}])},1000);"+
                    "}"
                ]
            },
            fireCmdClickEvent:{
                $desc:"Fires 'fold/expand' command button's click event",
                $rtn:"[self]",
                $paras:[
                    "subId [Required] : String, subId string"
                ],
                $snippet:[
                    "var id='xui.temp.lo6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Layout({items:[{id:'main'},{id:'after',cmd:true, size:50}]})));"+
                    "xui.asyRun(function(){o.fireCmdClickEvent('after'); },1000);"+
                    "}"
                ]
            },
            onClickPanel:{
                $desc:"Fired when user click the panel",
                $paras:[
                    $profile,
                    "item: Object, item Object",
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Tabs"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Tabs Class",
        constructor:{
            $desc:"Creates a xui.UI.Tabs Object"
        },
        getDropKeys:{
            $desc:"Gets the drop keys from the specified profile",
            $rtn:"String",
            $paras:[
                "profile [Required] : the target profile",
                "node [Required] : the related DOM element"
            ],
            $memo:"Generally, you don't need to use this function manually. This function might be overwrote in the sub Class"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            append:{
                $desc:"Appends a set of xui.UIProfile objects inside this tab",
                $rtn:"[self]",
                $paras:[
                    "target [Required] : a xui.UI ojbect(including a set of xui.UIProfile objects)",
                    "subId [Optional] : String, the sub id that determines the [target] will be added to which sub DOM node. This parameter can be [false] too, that means the [target] will be appended to DOM only, no link created between the [target] UIProfiles and the parent UIProfile"
                ],
                $snippet:[
                    "var id='xui.temp.tabs0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}],value:'a'})));"+
                    "xui.asyRun(function(){o.append(new xui.UI.Button,'a');},1000);"+
                    "}"
                ]
            },
            fireItemClickEvent:{
                $desc:"Fires the item click event",
                $rtn:"[self]",
                $paras:[
                    "subId [Required] : String, item's subId"
                ],
                $snippet:[
                    "var id='xui.temp.tabs004'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "xui.asyRun(function(){o.fireItemClickEvent('a')},1000);"+
                    "}"
                ]
            },
            resetPanelView:{
                $desc:"Resets the Tab's panel container -- removes all children in it",
                $rtn:"[self]",
                $paras:[
                    "subId [Required] : String, item's subId, [true] for all panels",
                    "remvoeChildren [Optional] : Boolean, to determine whether children will be remove or not",
                    "destroyChildren [Optional] : Boolean, to determine whether children will be destroyed or not"
                ]
            },
            iniPanelView:{
                $desc:"To fire onIniPanelView event",
                $rtn:"[self]",
                $paras:[
                    "subId [Required] : String, item's subId"
                ]
            },
            setItems:{
                $desc:"Sets the items property to the current UI Object, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array, the items"
                ],
                $snippet:[
                    "var id='xui.temp.tabs2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto'})));"+
                    "xui.asyRun(function(){o.setItems([{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}])},1000);"+
                    "}"
                ]
            },
            removeItems:{
                $desc:"Removes a set of items from the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "arr [Required] : Array, A set of id strings"
                ],
                $snippet:[
                    "var id='xui.temp.tabs4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "xui.asyRun(function(){o.removeItems(['a','b'])},1000);"+
                    "}"
                ]
            },
            clearItems:{
                $desc:"Removes all items from the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "key [Optional] : String, the template key which node includes all the items nodes. Defalt is 'ITEMS'"
                ],
                $snippet:[
                    "var id='xui.temp.tabs5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "xui.asyRun(function(){o.clearItems();},1000);"+
                    "}"
                ]
            },
            getHAlign :{
                $desc:"Gets horizontal alignment",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.tabs7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "alert(o.getHAlign());xui.asyRun(function(){o.setHAlign('center')},1000);"+
                    "}"
                ]
            },
            setHAlign :{
                $desc:"Sets horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tabs8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "alert(o.getHAlign());xui.asyRun(function(){o.setHAlign('right')},1000);"+
                    "}"
                ]
            },
            getItemAlign:{
                $desc:"Gets item's text align",
                $rtn:"String"
            },
            setItemAlign:{
                $desc:"Sets item's text align",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String'left', 'center' or 'right'",
                    $force
                ]
            },
            getItemWidth:{
                $desc:"Gets item width",
                $rtn:"Number"
            },
            setItemWidth:{
                $desc:"Sets item width",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getLazyAppend:{
                $desc:"Gets the 'lazy append' property value on the first UIProfile",
                $rtn:"Boolean"
            },
            setLayAppend :{
                $desc:"Sets the 'lazy append' value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getNoPanel :{
                $desc:"Gets the NoPanel property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.tabs9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "alert(o.getNoPanel());xui.asyRun(function(){o.setNoPanel(false)},1000);"+
                    "}"
                ]
            },
            setNoPanel :{
                $desc:"Sets the NoPanel property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tabs10'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "alert(o.getNoPanel());xui.asyRun(function(){o.setNoPanel(true)},1000);"+
                    "}"
                ]
            },
            getNoHandler :{
                $desc:"Gets the NoHandler property value on the first UIProfile",
                $rtn:"Boolean"
            },
            setNoHandler :{
                $desc:"Sets the NoHandler property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getDropKeysPanel :{
                $desc:"Gets the DropKeysPanel property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.tabs11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "xui.asyRun(function(){o.setDropKeysPanel('drap key for panel');alert(o.getDropKeysPanel());},1000);"+
                    "}"
                ]
            },
            setDropKeysPanel :{
                $desc:"Sets the DropKeysPanel property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tabs12'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "xui.asyRun(function(){o.setDropKeysPanel('drap key for panel');alert(o.getDropKeysPanel());},1000);"+
                    "}"
                ]
            },
            getCurPanel:{
                $desc:"Gets the current active panel DOM",
                $rtn:"xui.Dom",
                $snippet:[
                    "var id='xui.temp.tabs13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}],value:'a'})));"+
                    "xui.asyRun(function(){alert(o.getCurPanel().id())},1000);"+
                    "}"
                ]
            },
            getPanel:{
                $desc:"Gets the panel DOM according to the specified sub id",
                $rtn:"xui.Dom",
                $paras:[
                    "subId [Optional] : String, the sub id that determines the result"
                ],
                $snippet:[
                    "var id='xui.temp.tabs14'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "xui.asyRun(function(){alert(o.getPanel('b').id())},1000);"+
                    "}"
                ]
            },
            markItemCaption:{
                $desc:"Marks the specified tab's caption",
                $rtn:"[self]",
                $paras:[
                    "subId [Required] : String, the sub id that determines the result",
                    "mark [Required] : Boolean, to mark is not not",
                    "force [Optional]: Boolean, force to mark it. Default is false"
                ],
                $snippet:[
                    "var id='xui.temp.tabs15'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',caption:'c c'}]})));"+
                    "xui.asyRun(function(){o.markItemCaption('b',true)},1000);"+
                    "}"
                ]
            },
            getSelMode :{
                $desc:"Gets selection mode. Could be 'single', 'multi'. For noPanel widgets only",
                $rtn:"String"
            },
            setSelMode :{
                $desc:"Sets selection mode. For noPanel widgets only",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'single' or 'multi'. Default is 'single'",
                    $force
                ]
            },
            addPanel:{
                $desc:"Adds a panel to the current UI",
                $rtn:"[self]",
                $paras:[
                    "paras [Required] : a key/value pairs",
                    "children [Required] : Array, the panel's children",
                    "item [Optional] : Object"
                ],
                $snippet:[
                    "var id='xui.temp.tabs16'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var panel, tabs;"+
                    "xui(id).prepend(panel=new xui.UI.Panel({height:100,width:100,dock:'none',position:'relative'}));"+
                    "panel.append(new xui.UI.Button);"+
                    "xui(id).prepend(tabs=new xui.UI.Tabs({position:'relative',width:200, height:100, dock:'none',items:[{id:'a',caption:'a'},{id:'b',caption:'b'}]}));"+
                    "xui.asyRun(function(){tabs.addPanel(panel.getPanelPara(), panel.getPanelChildren()); panel.removePanel();},1000);"+
                    "}"
                ]
            },
            removePanel:{
                $desc:"Removes a panel from the current UI",
                $rtn:"[self]",
                $paras:[
                    "domId [Optional] : String, the DOM element id that determines which panel will be removed"
                ],
                $snippet:[
                    "var id='xui.temp.tabs17'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var tabs;"+
                    "xui(id).prepend(tabs=new xui.UI.Tabs({position:'relative',width:200, height:100, dock:'none',items:[{id:'a',caption:'a'},{id:'b',caption:'b'}]}));"+
                    "xui.asyRun(function(){tabs.removePanel(tabs.getSubNode('ITEM','b').id())},1000);"+
                    "}"
                ]
            },
            getPanelPara:{
                $desc:"Gets panel parameters from the current UI",
                $rtn:"Object",
                $snippet:[
                    "var id='xui.temp.tabs18'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var panel, tabs;"+
                    "xui(id).prepend(panel=new xui.UI.Panel({height:100,width:100,dock:'none',position:'relative'}));"+
                    "panel.append(new xui.UI.Button);"+
                    "xui(id).prepend(tabs=new xui.UI.Tabs({position:'relative',width:200, height:100, dock:'none',items:[{id:'a',caption:'a'},{id:'b',caption:'b'}]}));"+
                    "xui.asyRun(function(){tabs.addPanel(panel.getPanelPara(), panel.getPanelChildren()); panel.removePanel();},1000);"+
                    "}"
                ]
            },
            getPanelChildren:{
                $desc:"Gets panel chldren from the current UI",
                $rtn:"Array",
                $snippet:[
                    "var id='xui.temp.tabs19'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:10px;\">' + '<br /><button onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var panel, tabs;"+
                    "xui(id).prepend(panel=new xui.UI.Panel({height:100,width:100,dock:'none',position:'relative'}));"+
                    "panel.append(new xui.UI.Button);"+
                    "xui(id).prepend(tabs=new xui.UI.Tabs({position:'relative',width:200, height:100, dock:'none',items:[{id:'a',caption:'a'},{id:'b',caption:'b'}]}));"+
                    "xui.asyRun(function(){tabs.addPanel(panel.getPanelPara(), panel.getPanelChildren()); panel.removePanel();},1000);"+
                    "}"
                ]
            },
            beforePagePop:{
                $desc:"Fired before user clicked the pop button. If returns false, the tab won't be poped",
                $paras:[
                    $profile,
                    "item: Object, the current item",
                    "options : Object. the following keys: parent, host, properties, events, host, theme, CS, CC, CB, CF",
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            beforePageClose:{
                $desc:"Fired before user clicked the close button on a tab. If returns false, the tab won't be closed",
                $paras:[
                    $profile,
                    "item: Object, the current item",
                    "value : Object"
                ],
                $snippet:[
                    "var id='xui.temp.tabs21'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a',closeBtn:true},{id:'b',caption:'b b',closeBtn:true},{id:'c',caption:'c c'}]})));"+
                    "o.beforePageClose(function(p,item){if(item.id=='a')return false;})"+
                    "}"
                ]
            },
            afterPageClose:{
                $desc:"Fired after user clicked the close button on a tab",
                $paras:[
                    $profile,
                    "item: Object, the current item"
                ],
                $snippet:[
                    "var id='xui.temp.tabs22'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a',closeBtn:true},{id:'b',caption:'b b',closeBtn:true},{id:'c',caption:'c c'}]})));"+
                    "o.afterPageClose(function(p,item){alert(item.id);})"+
                    "}"
                ]
            },
            onItemSelected:{
                $desc:"Fired when a tab is selected",
                $paras:[
                    $profile,
                    "item: Object, item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.tabs23'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a',closeBtn:true},{id:'b',caption:'b b',closeBtn:true},{id:'c',caption:'c c'}]})));"+
                    "o.onItemSelected(function(p,item){alert(item.id);})"+
                    "}"
                ]
            },
            onCaptionActive:{
                $desc:"Fired when user click the current tab's caption",
                $paras:[
                    $profile,
                    "item: Object, item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.tabs24'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a',closeBtn:true},{id:'b',caption:'b b',closeBtn:true},{id:'c',caption:'c c'}]})));"+
                    "o.onCaptionActive(function(p,item){alert(item.id);})"+
                    "}"
                ]
            },
            onShowOptions :{
                $desc:"Fired when user click the option button",
                $paras:[
                    $profile,
                    "item: Object, list item Object",
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.tabs25'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.Tabs({height:'auto',dock:'none',items:[{id:'a',caption:'a a',optBtn:true,closeBtn:true},{id:'b',caption:'b b',optBtn:true,closeBtn:true},{id:'c',caption:'c c',optBtn:true}],value:'a'})));"+
                    "o.onShowOptions(function(p,item){alert(item.id);})"+
                    "}"
                ]
            },
            onIniPanelView:{
                $desc:"Fired on panel is initialized",
                $paras:[
                    $profile,
                    "item: Object, item Object"
                ],
                $snippet:[
                    "var id='xui.temp.tabs25'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.Tabs({height:'auto',items:['a','c','b'],value:'a'});"+
                    "o.onIniPanelView(function(p,item){xui.message(item.id);});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            onClickPanel:{
                $desc:"Fired when user click the panel",
                $paras:[
                    $profile,
                    "item: Object, item Object",
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","FoldingTabs"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.FoldingTabs Class",
        constructor:{
            $desc:"Creates a xui.UI.FoldingTabs Object"
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","ToolBar"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.ToolBar Class",
        constructor:{
            $desc:"Creates a xui.UI.ToolBar Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            updateItem:{
                $desc:"Updates the specified item and the corresponding DOM Element",
                $rtn:"[self]",
                $paras:[
                    "id [Required] : String, The node id",
                    "options [Required] : a key/value pairs Object or String"
                ],
                $snippet:[
                    "var id='xui.temp.tool01'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.ToolBar({items:[{id:'ga', sub:[{id:'ga1',caption:'ga1'},{id:'ga2',caption:'ga2'}]},{id:'gb',sub:[{id:'gb1',caption:'gb1'},{id:'gb2',Object:new xui.UI.ComboInput({type:'color'})}]}]})));"+
                    "xui.asyRun(function(){o.updateItem('ga1',{caption:'updated'})},1000);"+
                    "}"
                ]
            },
            getHAlign :{
                $desc:"Gets horizontal alignment",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.tool1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.ToolBar({items:[{id:'ga', sub:[{id:'ga1',caption:'ga1'},{id:'ga2',caption:'ga2'}]},{id:'gb',sub:[{id:'gb1',caption:'gb1'},{id:'gb2',Object:new xui.UI.ComboInput({type:'color'})}]}]})));"+
                    "alert(o.getHAlign());xui.asyRun(function(){o.setHAlign('right')},1000);"+
                    "}"
                ]
            },
            setHAlign :{
                $desc:"Sets horizontal alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tool2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.ToolBar({items:[{id:'a',caption:'a a'},{id:'b',caption:'b b'},{id:'c',Object:new xui.UI.ComboInput({type:'color'})}]})));"+
                    "alert(o.getHAlign());xui.asyRun(function(){o.setHAlign('right')},1000);"+
                    "}"
                ]
            },
            getHandler:{
                $desc:"To determine whether this tool bar has a handler",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.tool3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.ToolBar({items:[{id:'ga', sub:[{id:'ga1',caption:'ga1'},{id:'ga2',caption:'ga2'}]},{id:'gb',sub:[{id:'gb1',caption:'gb1'},{id:'gb2',Object:new xui.UI.ComboInput({type:'time'})}]}]})));"+
                    "alert(o.getHandler());xui.asyRun(function(){o.setHandler(false)},1000);"+
                    "}"
                ]
            },
            setHandler :{
                $desc:"Specifys whether this tool bar has a handler",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tool4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.ToolBar({items:[{id:'ga', sub:[{id:'ga1',caption:'ga1'},{id:'ga2',caption:'ga2'}]},{id:'gb',sub:[{id:'gb1',caption:'gb1'},{id:'gb2',Object:new xui.UI.ComboInput({type:'time'})}]}]})));"+
                    "alert(o.getHandler());xui.asyRun(function(){o.setHandler(false)},1000);"+
                    "}"
                ]
            },
            showGroup:{
                $desc:"Shows or hides the specified toolbar group",
                $rtn:"[self]",
                $paras:[
                    "grpId [Required] : String",
                    "value [Required] : Boolean, Default is true"
                ],
                $snippet:[
                    "var id='xui.temp.tool5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.ToolBar({items:[{id:'ga', sub:[{id:'ga1',caption:'ga1'},{id:'ga2',caption:'ga2'}]},{id:'gb',sub:[{id:'gb1',caption:'gb1'},{id:'gb2',Object:new xui.UI.ComboInput({type:'time'})}]}]})));"+
                    "xui.asyRun(function(){o.showGroup('ga',false)},1000);"+
                    "}"
                ]
            },
            showItem:{
                $desc:"To show/hide the specified item",
                $rtn:"[self]",
                $paras:[
                    "itemId [Required] : String",
                    "value: [Optional] : Boolean, Default is true"
                ],
                $snippet:[
                    "var id='xui.temp.tool7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.ToolBar({items:[{id:'ga', sub:[{id:'ga1',caption:'ga1'},{id:'ga2',caption:'ga2'}]}]})));"+
                    "xui.asyRun(function(){o.showItem('ga2',false)},1000);"+
                    "}"
                ]

            },
            onClick:{
                $desc:"Fired when an tool bar item is clicked",
                $paras:[
                    $profile,
                    "item : Object",
                    "group : Object",
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element"
                ],
                $snippet:[
                    "var id='xui.temp.tool8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=(new xui.UI.ToolBar({items:[{id:'ga', sub:[{id:'ga1',caption:'ga1'},{id:'ga2',caption:'ga2'}]}]})));"+
                    "o.onClick(function(p,i,j){alert(j.id+'->'+i.id)})"+
                    "}"
                ]
            }

        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","PopMenu"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.PopMenu Class",
        constructor:{
            $desc:"Creates a xui.UI.PopMenu Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            adjustSize:{
                $desc:"To adjust pop menu width automatically",
                $rtn:"[self]"
            },
            // xui.UI.PopMenu.prototype
            popUp:{
                $desc:"Pops this menu",
                $rtn:"[self]",
                $paras:[
                    "pos [Required] : Object{left:Nubmer,top:Number}/xui.UIProfile/Element/Event",
                    "type [Optional] : String. one of 'outer','inner','outerleft-outertop','left-outertop','center-outertop','right-outertop','outerright-outertop','outerleft-top','left-top','center-top','right-top','outerright-top','outerleft-middle','left-middle','center-middle','right-middle','outerright-middle','outerleft-bottom','left-bottom','center-bottom','right-bottom','outerright-bottom','outerleft-outerbottom','left-outerbottom','center-outerbottom','right-outerbottom','outerright-outerbottom','1','2','3','4','12','21'.Default is 'outer'",
                    "parent [Optional} : xui.Dom/Element,The popmenu's parent element",
                    "ignoreEffects [Optional} : determine whether ignore showing effects or not"
                ],
                $snippet:[
                    "var id='xui.temp.pm0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">Click blank to pop up menu' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.PopMenu({items:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}));"+
                    "xui(id).onClick(function(p,e,s){var p1=xui.Event.getPos(e), p2=xui([s]).offset(), pos={left:p1.left-p2.left,top:p1.top-p2.top}o.pop(pos,null,s); })"+
                    "}"
                ]
            },
            hide:{
                $desc:"Hides the the first UIProfile",
                $rtn:"[self]",
                $paras:[
                    "triggerEvent [Optional] :Boolean, triggers onHide event or not"
                ],
                $snippet:[
                    "var id='xui.temp.pm1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">Click blank to pop up menu' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.PopMenu({items:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}));"+
                    "xui(id).onClick(function(p,e,s){var p1=xui.Event.getPos(e), p2=xui([s]).offset(), pos={left:p1.left-p2.left,top:p1.top-p2.top}o.pop(pos,null,s); xui.asyRun(function(){o.hide();},3000);})"+
                    "}"
                ]
            },
            getAutoHide:{
                $desc:"To determine whether this popup menu hides automatically after showing up for several seconds",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.pm2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">Click blank to pop up menu' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.PopMenu({items:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true}]}));"+
                    "o.setAutoHide(true);"+
                    "alert(o.getAutoHide());"+
                    "xui(id).onClick(function(p,e,s){var p1=xui.Event.getPos(e), p2=xui([s]).offset(), pos={left:p1.left-p2.left,top:p1.top-p2.top}o.pop(pos,null,s); })"+
                    "}"
                ]
            },
            setAutoHide:{
                $desc:"Specifys whether this popup menu hides automatically ",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.pm3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">Click blank to pop up menu' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.PopMenu({items:[{id:'a',caption:'item a',tips:'item a'},{id:'b',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',tips:'item c'},{id:'d',Object:new xui.UI.CheckBox}]}));"+
                    "o.setAutoHide(true);"+
                    "alert(o.getAutoHide());"+
                    "xui(id).onClick(function(p,e,s){var p1=xui.Event.getPos(e), p2=xui([s]).offset(), pos={left:p1.left-p2.left,top:p1.top-p2.top}o.pop(pos,null,s); })"+
                    "}"
                ]
            },
            getHideAfterClick:{
                $desc:"To determine whether this popup menu hides automatically after being clicked",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.pm4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">Click blank to pop up menu' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.PopMenu({items:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true}]}));"+
                    "o.setHideAfterClick(false);"+
                    "alert(o.getHideAfterClick());"+
                    "xui(id).onClick(function(p,e,s){var p1=xui.Event.getPos(e), p2=xui([s]).offset(), pos={left:p1.left-p2.left,top:p1.top-p2.top}o.pop(pos,null,s); })"+
                    "}"
                ]
            },
            setHideAfterClick:{
                $desc:"Specifys whether this popup menu hides automatically after being clicked",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.pm5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">Click blank to pop up menu' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.PopMenu({items:[{id:'a',caption:'item a',tips:'item a'},{id:'b',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',tips:'item c'},{id:'d',Object:new xui.UI.CheckBox}]}));"+
                    "o.setHideAfterClick(false);"+
                    "alert(o.getHideAfterClick());"+
                    "xui(id).onClick(function(p,e,s){var p1=xui.Event.getPos(e), p2=xui([s]).offset(), pos={left:p1.left-p2.left,top:p1.top-p2.top}o.pop(pos,null,s); })"+
                    "}"
                ]
            },

            beforeHide:{
                $desc:"Fired before the menu hides. If returns false, hide function will be ignored",
                $paras:[
                    "profile : xui.UIProfile"
                ],
                $snippet:[
                    "var id='xui.temp.pm31'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">Click blank to pop up menu' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.PopMenu({items:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}));"+
                    "o.beforeHide(function(){alert('before hide')});"+
                    "xui(id).onClick(function(p,e,s){var p1=xui.Event.getPos(e), p2=xui([s]).offset(), pos={left:p1.left-p2.left,top:p1.top-p2.top}o.pop(pos,null,s);})"+
                    "}"
                ]
            },
            onHide:{
                $desc:"Fired when the menu hides",
                $paras:[
                    "profile : xui.UIProfile"
                ],
                $snippet:[
                    "var id='xui.temp.pm11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">Click blank to pop up menu' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.PopMenu({items:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}));"+
                    "o.onHide(function(){alert('hidden')});"+
                    "xui(id).onClick(function(p,e,s){var p1=xui.Event.getPos(e), p2=xui([s]).offset(), pos={left:p1.left-p2.left,top:p1.top-p2.top}o.pop(pos,null,s);})"+
                    "}"
                ]
            },
            onMenuSelected:{
                $desc:"Fired when a menu item is selected",
                $paras:[
                    "profile : xui.UIProfile",
                    "item : Object",
                    "src : Element.xui id or Dom Element"
                ],
                $snippet:[
                    "var id='xui.temp.pm12'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">Click blank to pop up menu' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.PopMenu({items:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}));"+
                    "o.onMenuSelected(function(p,item){if(item.type=='checkbox')alert(item.value); else alert(item.id); });"+
                    "xui(id).onClick(function(p,e,s){var p1=xui.Event.getPos(e), p2=xui([s]).offset(), pos={left:p1.left-p2.left,top:p1.top-p2.top}o.pop(pos,null,s);})"+
                    "}"
                ]
            },
            onShowSubMenu:{
                $desc:"Fired when a sub menu shows",
                $paras:[
                    "profile : xui.UIProfile",
                    "item : Object",
                    "src : Element.xui id or Dom Element"
                ],
                $snippet:[
                    "var id='xui.temp.pm13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">Click blank to pop up menu' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.PopMenu({autoHide:true, items:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:true},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}));"+
                    "var cp=(new xui.UI.ColorPicker).render(true);"+
                    "cp.beforeClose(function(){cp.hide();return false;})"+
                    ".afterUIValueSet(function(p,old,n){o.onMenuSelected(o.get(0),{id:'b',value:n}); o.hide();});"+
                    "o.onShowSubMenu(function(p,item,src){"+
                    "if(item.id=='b'){return cp;}"+
                    "})"+
                    ".onMenuSelected(function(p,i){alert(i.id+':'+i.value)});"+
                    "xui(id).onClick(function(p,e,s){var p1=xui.Event.getPos(e), p2=xui([s]).offset(), pos={left:p1.left-p2.left,top:p1.top-p2.top}o.pop(pos,null,s);})"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","MenuBar"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.MenuBar Class",
        constructor:{
            $desc:"Creates a xui.UI.MenuBar Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            clearPopCache:{
                $desc:"Clears all cached pop menus"
            },
            hide:{
                $desc:"Hides the the first UIProfile"
            },
            getParentID:{
                $desc:"Gets the parent DOM element's id for pop menus",
                $rtn:"String"
            },
            setParentID:{
                $desc:"Sets the parent DOM element id for pop menus",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getAutoShowTime:{
                $desc:"To determine after how many seconds menu shows up automatically",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.menu2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.MenuBar({items:[{id:'id',caption:'menu',sub:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}]}));"+
                    "xui(id).prepend(o);"+
                    "alert(o.getAutoShowTime());"+
                    "xui.asyRun(function(){o.setAutoShowTime(0)});"+
                    "}"
                ]
            },
            setAutoShowTime:{
                $desc:"Specifys after how many seconds menu shows up automatically",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.menu3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.MenuBar({items:[{id:'id',caption:'menu',sub:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}]}));"+
                    "xui(id).prepend(o);"+
                    "alert(o.getAutoShowTime());"+
                    "xui.asyRun(function(){o.setAutoShowTime(1000)});"+
                    "}"
                ]
            },
            getHandler:{
                $desc:"To determine whether menu bar has a hanlder",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.menu4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.MenuBar({items:[{id:'id',caption:'menu',sub:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}]}));"+
                    "xui(id).prepend(o);"+
                    "alert(o.getHandler());"+
                    "xui.asyRun(function(){o.setHandler(false)});"+
                    "}"
                ]
            },
            updateItem:{
                $desc:"Updates the specified item and the corresponding DOM Element",
                $rtn:"[self]",
                $paras:[
                    "id [Required] : String, The node id",
                    "options [Required] : a key/value pairs Object or String"
                ],
                $snippet:[
                    "var id='xui.temp.menu4-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.MenuBar({items:[{id:'id',caption:'menu',sub:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}]}));"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.updateItem('a',{caption:'item udpated'})});"+
                    "}"
                ]
            },
            setHandler:{
                $desc:"Specifys whether menu bar has a hanlder",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.menu5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.MenuBar({items:[{id:'id',caption:'menu',sub:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}]}));"+
                    "xui(id).prepend(o);"+
                    "alert(o.getHandler());"+
                    "xui.asyRun(function(){o.setHandler(false)});"+
                    "}"
                ]
            },
            onGetPopMenu:{
                $desc:"Fired before the drop menu was popped",
                $paras:[
                    "profile : xui.UIProfile",
                    "item : Object, ",
                    "callback : Function, callback function"
                ]
            },
            onMenuBtnClick:{
                $desc:"Fired when a menu item was clicked. only for those 'non-sub' items",
                $paras:[
                    "profile : xui.UIProfile",
                    "item : Object, ",
                    "src: String,  Element's xid"
                ]
            },
            beforePopMenu:{
                $desc:"Fired before a menu pop. If returns false, the default pop function will be ignored",
                $paras:[
                    "profile : xui.UIProfile",
                    "item : Object, ",
                    "src: String, Element's xid"
                ]
            },
            onMenuSelected:{
                $desc:"Fired when a menu item is selected",
                $paras:[
                    "profile : xui.UIProfile",
                    "popProfile: xui.UIProfile, the current popmenu's profile",
                    "item : Object",
                    "src : Element.xui id or Dom Element"
                ],
                $snippet:[
                    "var id='xui.temp.pm12'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.MenuBar({items:[{id:'id',caption:'menu',sub:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:[{id:'ba',caption:'item ba',tips:'item ba'},{id:'bb',caption:'item bb',tips:'item bb',sub:[{id:'bba',caption:'item bba',tips:'item bba'}]}]},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}]}));"+
                    "o.onMenuSelected(function(pm,p,item){if(item.type=='checkbox')xui.message(item.value); else xui.message(item.id); });"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            onShowSubMenu:{
                $desc:"Fired when a sub menu is showed",
                $paras:[
                    $profile,
                    "popProfile: xui.UIProfile, the current popmenu's profile",
                    "item : Object",
                    "src : Element.xui id or Dom Element"
                ],
                $snippet:[
                    "var id='xui.temp.menu13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:200px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=(new xui.UI.MenuBar({parentID:id,autoShowTime:0,items:[{id:'id',caption:'menu',sub:[{id:'a',caption:'item a',tips:'item a'},{id:'b',image:'img/img.gif',caption:'itemb',tips:'item b',sub:true},{id:'c',caption:'item c',type:'checkbox',value:false},{id:'d',caption:'item d',type:'checkbox',value:true,add:'[Esc]'}]}]}));"+
                    "var cp=(new xui.UI.ColorPicker).render(true);"+
                    "cp.beforeClose(function(){cp.hide();return false;})"+
                    ".afterUIValueSet(function(p,old,n){o.onMenuSelected(o.get(0),null,{id:'b',value:n}); o.hide();});"+
                    "o.onShowSubMenu(function(pm, p,item,src){"+
                    "if(item.id=='b'){cp.reBoxing().popToTop(src,2,xui(id));return cp;}"+
                    "})"+
                    ".onMenuSelected(function(pm,p,i){xui.message(i.id+':'+i.value)});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Dialog"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Dialog Class",
        constructor:{
            $desc:"Creates a xui.UI.Dialog Object"
        },
        alert:{
            $desc:"To show an alert dialog",
            $rtn:"xui.Dialog",
            $paras:[
                "title [Optional] : String, the title string",
                "content [Optional] : String, the content string",
                "onClose [Optional] : Function, the close callback function",
                "btnCap  [Optional] : String, the caption for button",
                "left [Optional] : Number, left value",
                "top [Optional] : Number, top value",
                "parent [Optional] : xui.Dom Object, or xui.UI Object. the parent node. Default is xui('body')",
                "subId [Optional] : String, the sub id",
                "noCache [Optional] : Boolean, to determine to use the cached alert dialog or not, Default is [false]"
            ],
            $snippet:[
                "xui.UI.Dialog.alert('title','content',function(){alert('ok')})",
                "xui.UI.Dialog.alert('title','content content content content content content content content content content content content ',function(){alert('ok')})"
            ]
        },
        confirm:{
            $desc:"To show an confirm dialog",
            $rtn:"xui.Dialog",
            $paras:[
                "title [Optional] : String, the title string",
                "content [Optional] : String, the content string",
                "onYes [Optional] : Function, the Yes callback function",
                "onNo [Optional] : Function, the No callback function",
                "btnCapYes [Optional] : String, the Yes button's caption",
                "btnCapNo [Optional] : String, the No button's caption",
                "left [Optional] : Number, left value",
                "top [Optional] : Number, top value",
                "parent [Optional] : xui.Dom Object, or xui.UI Object. the parent node. Default is xui('body')",
                "subId [Optional] : String, the sub id",
                "noCache [Optional] : Boolean, to determine to use the cached confirm dialog or not, Default is [false]"
            ],
            $snippet:[
                "xui.UI.Dialog.confirm('title','content',function(){alert('yes')},function(){alert('no')})",
                "xui.UI.Dialog.confirm('title','content content content content content content content content content content content content ',function(){alert('yes')},function(){alert('no')})"
            ]
        },
        pop:{
            $desc:"To show an message dialog",
            $rtn:"xui.Dialog",
            $paras:[
                "title [Optional] : String, the title string",
                "content [Optional] : String, the content string",
                "btnCap [Optional] : String, the command button string",
                "left [Optional] : Number, left value",
                "top [Optional] : Number, top value",
                "parent [Optional] : xui.Dom Object, or xui.UI Object. the parent node. Default is xui('body')",
                "subId [Optional] : String, the sub id"
            ],
            $snippet:[
                "xui.UI.Dialog.pop('title','content')",
                "xui.UI.Dialog.pop('title','content content content content content content content content content content content content ','I knew it!')"
            ]
        },
        prompt:{
            $desc:"To show an prompt dialog",
            $rtn:"xui.Dialog",
            $paras:[
                "title [Optional] : String, the title string",
                "caption [Optional] : String, the caption string",
                "content [Optional] : String, the content string",
                "onYes [Optional] : Function, the Yes callback function",
                "onNo [Optional] : Function, the No callback function",
                "btnCapYes [Optional] : String, the Yes button's caption",
                "btnCapNo [Optional] : String, the No button's caption",
                "left [Optional] : Number, left value",
                "top [Optional] : Number, top value",
                "parent [Optional] : xui.Dom Object, or xui.UI Object. the parent node. Default is xui('body')",
                "subId [Optional] : String, the sub id",
                "noCache [Optional] : Boolean, to determine to use the cached prompt dialog or not, Default is [false]"
            ],
            $snippet:[
                "xui.UI.Dialog.prompt('title','caption', 'content content ',function(str){alert(str)})"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]",
                $paras:[
                    "flag [Optional] : Boolean, false represents deactive"
                ],
                $snippet:[
                    "var dlg1=(new xui.UI.Dialog({html:'dlg1'})).show(), dlg2=(new xui.UI.Dialog({html:'dlg2',left:100,top:100})).show(); xui.asyRun(function(){dlg1.activate();},500); xui.asyRun(function(){dlg2.activate();},1000);xui.asyRun(function(){dlg2.activate(false)},1500);"
                ]
            },
            isPinned:{
                $desc:"To determine whether it is pinned or is't",
                $rtn:"Boolean"
            },
            close:{
                $desc:"To close the dialog",
                $rtn:"[self]",
                $paras:[
                    "triggerEvent [Optional] : Boolean, indicates if the function trigger beforeClose event or not. Defalut is [true]"
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); xui.asyRun(function(){dlg.close();},1000);"
                ]
            },
            showModal:{
                $desc:"To show the dialog in modal mode",
                $rtn:"[self]",
                $paras:[
                    "parent [Optional] : xui.Dom Object. the parent node. Default is xui('body')",
                    "left [Optional] Number, the left position",
                    "top [Optional] Number, the top position",
                    "callback[Optional] Fucntion, the callback fucntion"
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).showModal();",
                    "var dlg=(new xui.UI.Dialog).showModal(null,100,100);"
                ]
            },
            show:{
                $desc:"To show the dialog",
                $rtn:"[self]",
                $paras:[
                    "parent [Optional] : xui.Dom Object. the parent node. Default is xui('body')",
                    "modal [Optional] : Boolean, shows in modal mode or not Default is false",
                    "left [Optional] Number, the left position",
                    "top [Optional] Number, the top position",
                    "callback[Optional] Fucntion, the callback fucntion"
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100);",
                    "var dlg=(new xui.UI.Dialog).show(null,true, 100,100);",
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); (new xui.UI.Dialog).show(dlg.reBoxing(),true, 100,100);"
                ]
            },
            hide:{
                $desc:"To hide the dialog",
                $rtn:"[self]",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); xui.asyRun(function(){dlg.hide();},1000); xui.asyRun(function(){dlg.show();},2000);"
                ]
            },
            getIframeAutoLoad:{
                $desc:"Gets auto load(with iframe) iframe src property",
                $rtn:"String"
            },
            setIframeAutoLoad:{
                $desc:"Sets auto load(with iframe) iframe src property. Set it before control was rendered",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getAjaxAutoLoad:{
                $desc:"Gets auto load(with Ajax, same domain only) html file path property",
                $rtn:"String"
            },
            setAjaxAutoLoad:{
                $desc:"Sets auto load(with Ajax, same domain only) html file path property. Set it before control was rendered",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getCaption:{
                $desc:"Gets the Caption property value on the first UIProfile",
                $rtn:"String",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getCaption());xui.asyRun(function(){dlg.setCaption('c cc c');},1000);"
                ]
            },
            setCaption:{
                $desc:"Sets the Caption property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getCaption());xui.asyRun(function(){dlg.setCaption('c cc c');},1000);"
                ]
            },
            getHAlign :{
                $desc:"Gets caption alignment",
                $rtn:"String"
            },
            setHAlign :{
                $desc:"Sets caption alignment",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left', 'center' or 'right'",
                    $force
                ]
            },
            getCloseBtn:{
                $desc:"To determine whether this control has a close button",
                $rtn:"Boolean",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getCloseBtn());xui.asyRun(function(){dlg.setCloseBtn(false);},1000); xui.asyRun(function(){dlg.close();},2000);"
                ]
            },
            setCloseBtn:{
                $desc:"Specifys whether this control has a close button",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getCloseBtn());xui.asyRun(function(){dlg.setCloseBtn(false);},1000);xui.asyRun(function(){dlg.close();},2000);"
                ]
            },
            getInitPos:{
                $desc:"To get the dialog's init position"
            },
            setInitPos:{
                $desc:"To set the dialog's init position",
                $rtn:"[self]",
                $paras:[
                    "value [Optional] : String. one of 'auto','center'. Default is 'center'"
                ]
            },
            getMinBtn:{
                $desc:"To determine whether this control has a min button",
                $rtn:"Boolean",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getMinBtn());xui.asyRun(function(){dlg.setMinBtn(false);},1000);"
                ]
            },
            setMinBtn:{
                $desc:"Specifys whether this control has a min button",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getMinBtn());xui.asyRun(function(){dlg.setMinBtn(false);},1000);"
                ]
            },
            getRestoreBtn:{
                $desc:"To determine whether this control has a restore button",
                $rtn:"Boolean"
            },
            setRestoreBtn:{
                $desc:"Specifys whether this control has a restore button",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getMaxBtn:{
                $desc:"To determine whether this control has a max button",
                $rtn:"Boolean",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getMaxBtn());xui.asyRun(function(){dlg.setMaxBtn(false);},1000);"
                ]
            },
            setMaxBtn:{
                $desc:"Specifys whether this control has a max button",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getMaxBtn());xui.asyRun(function(){dlg.setMaxBtn(false);},1000);"
                ]
            },
            getPinBtn:{
                $desc:"To determine whether this control has a pin button",
                $rtn:"Boolean",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getPinBtn());xui.asyRun(function(){dlg.setPinBtn(false);},1000);"
                ]
            },
            setPinBtn:{
                $desc:"Specifys whether this control has a pin button",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getPinBtn());xui.asyRun(function(){dlg.setPinBtn(false);},1000);"
                ]
            },
            getModal:{
                 $desc:"To determine whether this dialog is modal or modaless",
                 $rtn:"Boolean"
            },
            setModal:{
                $desc:"Specifys whether this dialog is modal or modaless",
                $rtn:"[self]",
                $paras:[
                     "value [Required] : Boolean",
                    $force
              ]
            },
            getLandBtn:{
                $desc:"To determine whether this control has a landing button",
                $rtn:"Boolean",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getLandBtn());xui.asyRun(function(){dlg.setLandBtn(true);},1000);"
                ]
            },
            setLandBtn:{
                $desc:"Specifys whether this control has a landing button",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getLandBtn());xui.asyRun(function(){dlg.setLandBtn(true);},1000);"
                ]
            },
            getOptBtn:{
                $desc:"To determine whether this control has an option button",
                $rtn:"Boolean",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getOptBtn());xui.asyRun(function(){dlg.setOptBtn(true);},1000);"
                ]
            },
            setOptBtn:{
                $desc:"Specifys whether this control has an option button",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getOptBtn());xui.asyRun(function(){dlg.setOptBtn(true);},1000);"
                ]
            },
            getInfoBtn :{
                $desc:"To determine whether help button shows up or not",
                $rtn:"Boolean"
            },
            setInfoBtn :{
                $desc:"Specifys whether help button shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getRefreshBtn :{
                $desc:"To determine whether refresh button shows up or not",
                $rtn:"Boolean"
            },
            setRefreshBtn :{
                $desc:"Specifys whether refresh button shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getMovable:{
                $desc:"To determine whether end user can move this dialog by drag and drop",
                $rtn:"Boolean",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getMovable());xui.asyRun(function(){dlg.setMovable(false);},1000);"
                ]
            },
            setMovable:{
                $desc:"Specifys whether end user can move this dialog by drag and drop",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getMovable());xui.asyRun(function(){dlg.setMovable(false);},1000);"
                ]
            },
            getImage :{
                $desc:"Gets image url",
                $rtn:"String",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getImage());xui.asyRun(function(){dlg.setImage('img/img.gif');},1000);"
                ]
            },
            setImage :{
                $desc:"Sets image url",
                $rtn:"[self]",
                $paras:[
                    "value [Required] :String,  image path",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getImage());xui.asyRun(function(){dlg.setImage('img/img.gif');},1000);"
                ]
            },
            getImagePos :{
                $desc:"Gets image position",
                $rtn:"String",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getImagePos());xui.asyRun(function(){dlg.setImage('img/img.gif').setImagePos('left -16px');},1000);"
                ]
            },
            setImagePos :{
                $desc:"Sets image position",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); alert(dlg.getImagePos());xui.asyRun(function(){dlg.setImage('img/img.gif').setImagePos('left -16px');},1000);"
                ]
            },
            getImageBgSize :{
                $desc:"Gets the image background size property value on the first UIProfile",
                $rtn:"String"
            },
            setImageBgSize :{
                $desc:"Sets the image background size property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, corresponding CSS value",
                    $force
                ]
            },
            getHtml:{
                $desc:"Gets dialog inside html",
                $rtn:"String",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); xui.asyRun(function(){dlg.setHtml('<p>content</p>');alert(dlg.getHtml());},1000);"
                ]
            },
            setHtml:{
                $desc:"Sets dialog inside html",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); xui.asyRun(function(){dlg.setHtml('<p>content</p>');alert(dlg.getHtml());},1000);"
                ]
            },
            getStatus:{
                $desc:"Gets dialog status. Could be 'normal', 'min' or 'max'",
                $rtn:"String",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); xui.asyRun(function(){dlg.setStatus('min');alert(dlg.getStatus());},1000);"
                ]
            },
            setStatus:{
                $desc:"Sets dialog status",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'normal', 'min' or 'max'",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); xui.asyRun(function(){dlg.setStatus('max');alert(dlg.getStatus());},1000);"
                ]
            },
            getMinHeight:{
                $desc:"Gets dialog minimal height",
                $rtn:"Number",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); "+
                    "dlg.setMinHeight(200).setMinWidth(200);"+
                    "alert(dlg.getMinHeight()+':'+dlg.getMinWidth());"
                ]
            },
            setMinHeight:{
                $desc:"Sets dialog minimal height",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); "+
                    "dlg.setMinHeight(200).setMinWidth(200);"+
                    "alert(dlg.getMinHeight()+':'+dlg.getMinWidth());"
                ]
            },
            getMinWidth:{
                $desc:"Gets dialog minimal width",
                $rtn:"Number",
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); "+
                    "dlg.setMinHeight(200).setMinWidth(200);"+
                    "alert(dlg.getMinHeight()+':'+dlg.getMinWidth());"
                ]
            },
            setMinWidth:{
                $desc:"Sets dialog minimal width",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var dlg=(new xui.UI.Dialog).show(null,false, 100,100); "+
                    "dlg.setMinHeight(200).setMinWidth(200);"+
                    "alert(dlg.getMinHeight()+':'+dlg.getMinWidth());"
                ]
            },
            getFromRegion:{
                $desc:"Gets a region where dialog pops up from",
                $rtn:"Object",
                $snippet:[
                    "var dl=(new xui.UI.Dialog);"+
                    "dl.setFromRegion({left:0,top:0,width:10,height:10});"+
                    "alert(xui.serialize(dl.getFromRegion()));"+
                    "dl.show(null,false, 200,200);"
                ]
            },
            setFromRegion:{
                $desc:"Sets a region where dialog pops up from",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object.{left:Number,top:Number,width:Number,height:Number}",
                    $force
                ],
                $snippet:[
                    "var dl=(new xui.UI.Dialog);"+
                    "dl.setFromRegion({left:0,top:0,width:10,height:10});"+
                    "alert(xui.serialize(dl.getFromRegion()));"+
                    "dl.show(null,false, 200,200);"
                ]
            },
            onShow:{
                $desc:"Fires when the dialog shows",
                $paras:[
                    "profile : xui.UIProfile"
                ],
                $snippet:[
                    "var dlg,btn; dlg=new xui.UI.Dialog; dlg.append(btn=new xui.UI.Button);"+
                    "dlg.onShow(function(){btn.activate();});"+
                    "dlg.show(null,false, 100,100);"
                ]
            },
            beforeClose:{
                $desc:"Fired before user click close button. If returns false, close function will be ignored",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var dlg=new xui.UI.Dialog; "+
                    "dlg.beforeClose(function(){return false;});"+
                    "dlg.show(null,false, 100,100);"+
                    "xui.asyRun(function(){dlg.close();},3000);"
                ]
            },
            onShowInfo:{
                $desc:"Fired when help command is clicked",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ]
            },
            onRefresh:{
                $desc:"Fired when refresh command is clicked",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ]
            },
            onShowOptions :{
                $desc:"Fired when user click the option button",
                $paras:[
                    $profile,
                    "e: DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var dlg=new xui.UI.Dialog({optBtn:true}); "+
                    "dlg.onShowOptions(function(){alert('onShowOptions');});"+
                    "dlg.show(null,false, 100,100);"
                ]
            },
            onLand:{
                $desc:"Fired when user click the land button",
                $paras:[
                    $profile,
                    "e: DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onActivated:{
                $desc:"Fired when the dialog activated",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ]
            },
            beforeStatusChanged:{
                $desc:"Fired before user change the dialog's status.  If returns false, the status will not be changed",
                $paras:[
                    $profile,
                    "newStatus: String, the new status, min/max/normal",
                    "oldStatus: String, the old status, min/max/normal"
                ]
            },
            afterStatusChanged:{
                $desc:"Fired after the dialog status was changed",
                $paras:[
                    $profile,
                    "newStatus: String, the new status, min/max/normal",
                    "oldStatus: String, the old status, min/max/normal"
                ]
            },
            beforePin:{
                $desc:"Fired before user click the pin button",
                $paras:[
                    $profile,
                    "value: Boolean, pin status"
                ]
            },
            onClickPanel:{
                $desc:"Fired when user click the panel",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Element"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Element Class",
        constructor:{
            desc:"Creates a xui.UI.Element Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            fireClickEvent:{
                $desc:"Fires the click event",
                $rtn:"[self]"
            },
            getHtml:{
                $desc:"Gets the html string from the first UI Object",
                $rtn:"String"
            },
            setHtml:{
              $desc:"Sets the html string to the current UI Object",
              $rtn:"[self]",
              $paras:[
                  "value [Required] : String",
                  $force
              ]
            },
            getNodeName:{
                $desc:"Gets control's Dom node name",
                $rtn:"String"
            },
            setNodeName:{
                $desc:"Sets control's Dom node name",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getAttributes:{
                $desc:"Gets attributes on the Dom node",
                $rtn:"Object"
            },
            setAttributes:{
                $desc:"Sets attributes on the Dom node",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : key/value pairs",
                    $force
                ]
            },
            onClick:{
                $desc:"Fired when user click it",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","HTMLButton"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.HTMLButton Class",
        constructor:{
            desc:"Creates a xui.UI.HTMLButton Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getFontColor :{
                $desc:"Gets the font-color property",
                $rtn:"String"
            },
            setFontColor :{
                $desc:"Sets the font-color property ",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : color",
                    $force
                ]
            },
            getFontSize :{
                $desc:"Gets the font-size property",
                $rtn:"String"
            },
            setFontSize :{
                $desc:"Sets the font-size property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getFontWeight :{
                $desc:"Gets the font-weight property",
                $rtn:"String"
            },
            setFontWeight :{
                $desc:"Sets the font-weight property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getFontFamily :{
                $desc:"Gets the font-family property",
                $rtn:"String"
            },
            setFontFamily :{
                $desc:"Sets the font-family property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Span"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Span Class",
        constructor:{
            desc:"Creates a xui.UI.Span Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            fireClickEvent:{
                $desc:"Fires the click event",
                $rtn:"[self]"
            },
            getHtml:{
                $desc:"Gets the html string from the first UI Object",
                $rtn:"String"
            },
            setHtml:{
              $desc:"Sets the html string to the current UI Object",
              $rtn:"[self]",
              $paras:[
                  "value [Required] : String",
                  $force
              ]
            },
            getOverflow:{
                $desc:"Gets container's CSS overflow property",
                $rtn:"String"
            },
            setOverflow:{
                $desc:"Sets container's CSS overflow property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'auto','hidden','visible','' ",
                    $force
                ]
            },
            onClick:{
                $desc:"Fired when clicked",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Image"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Image Class",
        constructor:{
            $desc:"Creates a xui.UI.Image Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            fireClickEvent:{
                $desc:"Fires the click event",
                $rtn:"[self]"
            },
            getMaxHeight:{
                $desc:"Gets image max height",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.img1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({src:'img/logo.gif'}));"+
                    "alert(o.setMaxHeight(500).getMaxHeight());"+
                    "}"
                ]
            },
            setMaxHeight:{
                $desc:"Sets image max height",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.img2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({src:'img/logo.gif'}));"+
                    "alert(o.setMaxHeight(500).getMaxHeight());"+
                    "}"
                ]
            },
            getMaxWidth:{
                $desc:"Gets image max width",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.img3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({src:'img/logo.gif'}));"+
                    "alert(o.setMaxWidth(500).getMaxWidth());"+
                    "}"
                ]
            },
            setMaxWidth:{
                $desc:"Sets image max width",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.img4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;height:100px;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({src:'img/logo.gif'}));"+
                    "alert(o.setMaxWidth(500).getMaxWidth());"+
                    "}"
                ]
            },
            getItems:{
                $desc:"Gets the gallery items",
                $rtn:"Array"
            },
            setItems:{
                $desc:"Sets the gallery items",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array, the items",
                    $force
                ]
            },
            getActiveItem:{
                $desc:"Gets the active item's key in gallery",
                $rtn:"String"
            },
            setActiveItem:{
                $desc:"Sets the active item's key in gallery",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getAlt:{
                $desc:"Gets image alt value",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.img5-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({position:'relative',src:'img/logo.gif'}));"+
                    "xui.asyRun(function(){alert(o.setAlt('picture').getAlt())},1000);" +
                    "}"
                ]
            },
            setAlt:{
                $desc:"Sets image alt value",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.img6-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({position:'relative',src:'img/logo.gif'}));"+
                    "xui.asyRun(function(){alert(o.setAlt('picture').getAlt())},1000);" +
                    "}"
                ]
            },
            getSrc:{
                $desc:"Gets image src",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.img5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({position:'relative',src:'img/logo.gif'}));"+
                    "xui.asyRun(function(){alert(o.setSrc('img/xui.box.gif').getSrc())},1000);"+
                    "xui.asyRun(function(){o.setMaxHeight(200)},1500);"+
                    "}"
                ]
            },
            setSrc:{
                $desc:"Sets image src",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.img6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({position:'relative',src:'img/logo.gif'}));"+
                    "xui.asyRun(function(){alert(o.setSrc('img/xui.box.gif').getSrc())},1000);"+
                    "xui.asyRun(function(){o.setMaxHeight(200)},1500);"+
                    "}"
                ]
            },
            getCursor:{
                $desc:"Gets image cursor status",
                $rtn:"String"
            },
            setCursor:{
                $desc:"Sets image cursor status",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getRate:{
                $desc:"Gets the rate (the real image size / the showed image size)",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.img7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({position:'relative',src:'img/xui.box.gif',maxHeight:200}));"+
                    "xui.asyRun(function(){alert(o.getRate())},1000);"+
                    "}"
                ]
            },

            onError:{
                $desc:"Fired when the image does not exist",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.img15'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({position:'relative',maxHeight:200}));"+
                    "o.onError(function(){alert('the image does not exist')});"+
                    "o.setSrc('img/lo-go.gif')"+
                    "}"
                ]
            },
            beforeLoad:{
                $desc:"Fired before the src property is set",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object"
                ],
                $snippet:[
                    "var id='xui.temp.img16'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({position:'relative',maxHeight:200}));"+
                    "o.beforeLoad(function(){alert('beforeLoad')}).afterLoad(function(p,src,w,h){xui.message('width:'+w+' height:'+h,src)});"+
                    "o.setSrc('img/logo.gif');"+
                    "}"
                ]
            },
            afterLoad:{
                $desc:"Fired after the image is loaded successfully",
                $paras:[
                    $profile,
                    "path : String, src path",
                    "width : Number, image width",
                    "height : Number, image height"
                ],
                $snippet:[
                    "var id='xui.temp.img17'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o;xui(id).prepend(o=new xui.UI.Image({position:'relative', maxHeight:200}));"+
                    "o.beforeLoad(function(){alert('beforeLoad')}).afterLoad(function(p,src,w,h){xui.message('width:'+w+' height:'+h,src)});"+
                    "o.setSrc('img/logo.gif');"+
                    "}"
                ]
            },
            onClick:{
                $desc:"Fired when image is clicked",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element"
                ]
            },
            onDblclick:{
                $desc:"Fired when image is dblclicked",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element.xui id or Dom Element"
                ]
            }

        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","FoldingList"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.FoldingList Class",
        constructor:{
            $desc:"Creates a xui.UI.FoldingList Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getActiveLast :{
                $desc:"Gets the ActiveLast property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.fl5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.FoldingList({width:'auto',height:'auto',position:'relative',items:[{id:'a',title:'title 1',caption:'cap a'},{id:'b',title:'title b', caption:'cap b'},{id:'c',caption:'c'}]});"+
                    "o.setActiveLast(true); alert(o.getActiveLast());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setActiveLast :{
                $desc:"Sets the ActiveLast property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.fl6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.FoldingList({width:'auto',height:'auto',position:'relative',items:[{id:'a',title:'title 1',caption:'cap a'},{id:'b',title:'title b', caption:'cap b'},{id:'c',caption:'c'}]});"+
                    "o.setActiveLast(true); alert(o.getActiveLast());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            toggle:{
                $desc:"Toggles the list item according to the specified item id",
                $rtn:"[self]",
                $paras:[
                    "id [Required] :String, item id"
                ],
                $snippet:[
                    "var id='xui.temp.fl7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.FoldingList({width:'auto',height:'auto',position:'relative',items:[{id:'a',title:'title 1',caption:'cap a'},{id:'b',title:'title b', caption:'cap b'},{id:'c',caption:'c'}]});"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.toggle('a')},1000)"+
                    "}"
                ]
            },
            fillContent:{
                $desc:"Fills the specified item content according to the given item id",
                $rtn:"[self]",
                $paras:[
                    "id [Required] :String, item id",
                    "obj [Required]: xui.Dom Object or xui.UI Object. If obj is null, it will empty the specified item"
                ],
                $snippet:[
                    "var id='xui.temp.fl8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.FoldingList({width:'auto',height:'auto',position:'relative',items:[{id:'a',caption:'a1',tips:'a1 tips',text:'text1'},{id:'b',caption:'a2',text:'text2',tips:'a2 tips'}]});"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.toggle('a')},1000);"+
                    "xui.asyRun(function(){o.fillContent('a', new xui.UI.Button({position:'relative'}))},1200);"+
                    "}"
                ]
            },

            onShowOptions :{
                $desc:"Fired when user click the option button",
                $paras:[
                    $profile,
                    "item: Object, list item Object",
                    "e: DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.fl9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.FoldingList({width:'auto',height:'auto' , position:'relative',items:[{id:'a',optBtn:true,title:'title 1',caption:'cap a'},{id:'b',title:'title b', caption:'cap b'},{id:'c',caption:'c'}]});"+
                    "xui(id).prepend(o);"+
                    "o.onShowOptions(function(){alert('onShowOptions');});"+
                    "}"
                ]
            },
            onGetContent:{
                $desc:"Fired when the UI need to build inner content",
                $paras:[
                    $profile,
                    "item: Object, list item Object",
                    "callback : Function, callback function"
                ],
                $snippet:[
                    "var id='xui.temp.fl11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.FoldingList({width:'auto',height:'auto',position:'relative',items:[{id:'Button',title:'a1',tips:'a1 tips'},{id:'CheckBox',title:'a2',tips:'a2 tips'}]});"+
                    "o.setTagCmds([{id:'a',caption:'a'},{id:'b',caption:'b'},{id:'c',caption:'c'}]);"+
                    "xui(id).prepend(o);"+
                    "o.onGetContent(function(p,item){return new xui.UI[item.id]({position:'relative'})});"+
                    "}"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","TreeBar"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.TreeBar Class",
        constructor:{
            $desc:"Creates a xui.UI.TreeBar Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            fireItemClickEvent:{
                $desc:"To fires the click event on the specified item",
                $rtn:"[self]",
                $paras:[
                    "subId [Required] : String, the id value of target item"
                ],
                $snippet:[
                    "var id='xui.temp.tb01'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:[{id:'ba',caption:'caption ba'},{id:'bb',caption:'caption bb'}]},{id:'c',caption:'c'}]});"+
                    "xui(id).prepend(o);"+
                    "o.fireItemClickEvent('a');"+
                    "}"
                ]
            },
            getAnimCollapse :{
                $desc:"To determine whether to show animate when a tree node collapses",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.tb1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:[{id:'ba',caption:'caption ba'},{id:'bb',caption:'caption bb'}]},{id:'c',caption:'c'}]});"+
                    "o.setAnimCollapse(true); alert(o.getAnimCollapse());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setAnimCollapse :{
                $desc:"Specifys whether to show animate when a tree node collapses",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tb2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:[{id:'ba',caption:'caption ba'},{id:'bb',caption:'caption bb'}]},{id:'c',caption:'c'}]});"+
                    "o.setAnimCollapse(true); alert(o.getAnimCollapse());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getOptBtn:{
                $desc:"To get the option button class",
                $rtn:"String"
            },
            setOptBtn:{
                $desc:"To set the option button class",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getTagCmds:{
                $desc:"Gets command buttons",
                $rtn:"Array"
            },
            setTagCmds:{
                $desc:"Sets command buttons",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array, the items",
                    $force
                ]
            },
            getGroup :{
                $desc:"Gets the Group property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.tb3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:[{id:'ba',caption:'caption ba'},{id:'bb',caption:'caption bb'}]},{id:'c',caption:'c'}]});"+
                    "o.setGroup(true); alert(o.getGroup());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setGroup :{
                $desc:"Sets the Group property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tb4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:[{id:'ba',caption:'caption ba'},{id:'bb',caption:'caption bb'}]},{id:'c',caption:'c'}]});"+
                    "o.setGroup(true); alert(o.getGroup());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getDynDestory:{
                $desc:"Gets the DynDestory property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.tb5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:true},{id:'c',caption:'c',sub:true}]});"+
                    "o.setDynDestory(true); alert(o.getDynDestory());"+
                    "o.onGetContent(function(profile,item){var id=item.id;return [{id: id+'a',caption:'caption'},{id:id+'b',caption:'caption'}]});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setDynDestory :{
                $desc:"Sets the DynDestory property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tb6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:true},{id:'c',caption:'c',sub:true}]});"+
                    "o.setDynDestory(true); alert(o.getDynDestory());"+
                    "o.onGetContent(function(profile,item){var id=item.id;return [{id: id+'a',caption:'caption'},{id:id+'b',caption:'caption'}]});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getTogglePlaceholder:{
                $desc:"To determine whether the toggle button's placeholder shows or not",
                $rtn:"Boolean"
            },
            setTogglePlaceholder:{
                $desc:"Specifys whether the toggle button's placeholder shows or not ",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getIniFold :{
                $desc:"To determine whether parent node collapses initially",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.tb7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:[{id:'ba',caption:'caption ba'},{id:'bb',caption:'caption bb'}]},{id:'c',caption:'c'}]});"+
                    "o.setIniFold(true); alert(o.getIniFold());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setIniFold :{
                $desc:"Specifys whether parent node collapses initially",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tb8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:[{id:'ba',caption:'caption ba'},{id:'bb',caption:'caption bb'}]},{id:'c',caption:'c'}]});"+
                    "o.setIniFold(false); alert(o.getIniFold());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getSelMode :{
                $desc:"Gets selection mode. Could be 'none', 'single', 'multi' or 'multibycheckbox'",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.tb9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:[{id:'ba',caption:'caption ba'},{id:'bb',caption:'caption bb'}]},{id:'c',caption:'c'}]});"+
                    "o.setSelMode('none'); alert(o.getSelMode());"+
                    "o.onItemSelected(function(profile,item){xui.message(item.id)});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setSelMode :{
                $desc:"Sets selection mode",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'none', 'single' or 'multi'. Default is 'single'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tb10'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:[{id:'ba',caption:'caption ba'},{id:'bb',caption:'caption bb'}]},{id:'c',caption:'c'}]});"+
                    "o.setSelMode('multi'); alert(o.getSelMode());"+
                    "o.afterUIValueSet(function(profile,o,n){xui.message(n)});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getNoCtrlKey:{
                $desc:"To determine whether using Ctrl keyboard to help select multi items or not",
                $rtn:"Boolean"
            },
            setNoCtrlKey:{
                $desc:"Specifies using Ctrl keyboard to help select multi items or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getSingleOpen:{
                $desc:"To determine whether only one node is allowed to expand at one time",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.tb11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:true},{id:'c',caption:'c',sub:true}]});"+
                    "o.setSingleOpen(true); alert(o.getSingleOpen());"+
                    "o.onGetContent(function(profile,item){var id=item.id;return [{id: id+'a',caption:'caption'},{id:id+'b',caption:'caption'}]});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setSingleOpen :{
                $desc:"Specify whether only one node is allowed to expand at one time",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.tb12'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:true},{id:'c',caption:'c',sub:true}]});"+
                    "o.setSingleOpen(true); alert(o.getSingleOpen());"+
                    "o.onGetContent(function(profile,item){var id=item.id;return [{id: id+'a',caption:'caption'},{id:id+'b',caption:'caption'}]});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            insertItems:{
                $desc:"Inserts a set of items to the current UI Object",
                $rtn:"[self]",
                $paras:[
                    "arr [Required] : Array, A set of Item objects",
                    "pid [Optional] : String, The parent node id",
                    "base [Optional] : String, The base item id string",
                    "before [Optional] : Boolean, Indicates whether it inserts the target items before the base, or after the base. Default is false;"
                ],
                $snippet:[
                    "var id='xui.temp.tb13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',iniFold:false,height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:[{id:'bz',caption:'bz'}]},{id:'c',caption:'c',sub:[{id:'cz',caption:'cz'}]}]});"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.insertItems([{id: 'ba',caption:'caption'},{id:'bb',caption:'caption'}],'b',null,true)},1000);"+
                    "xui.asyRun(function(){o.insertItems([{id: 'ca',caption:'caption'},{id:'cb',caption:'caption'}],'c',null,false)},2000);"+
                    "xui.asyRun(function(){o.insertItems([{id:'aaa',caption:'a0'}],null,'b',false)},3000);"+
                    "xui.asyRun(function(){o.insertItems([{id:'bbb',caption:'b0'}],null,'b',true)},4000);"+
                    "}"
                ]
            },
            openToNode:{
                $desc:"Opens the specified node even if it's in the deeper layer",
                $rtn:"String",
                $paras:[
                    "id [Required] : String, The node id"
                ],
                $snippet:[
                    "var id='xui.temp.tb14'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',iniFold:true,height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'a'},{id:'b',caption:'b',sub:[{id:'bb',caption:'bb',sub:[{id: 'bba',caption:'bba'},{id:'bbb',caption:'bbb',sub:[{id:'bbba',caption:'bbba'}]}]}]},{id:'c',caption:'c',sub:[{id:'cz',caption:'cz'}]}]});"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.openToNode('bbba')},1000);"+
                    "}"
                ]
            },
            toggleNode:{
                $desc:"Expands or folds the specified node",
                $rtn:"[self]",
                $paras:[
                    "id [Required] : String, The node id. The root node can be represented as [empty] or [null]",
                    "expand [Optional] : Boolean, true=>expand;false=>fold",
                    "recursive [Optional] : Boolean, it's recursive or not"
                ],
                $snippet:[
                    "var id='xui.temp.tb17'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',iniFold:true,height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'a'},{id:'b',caption:'b',sub:[{id:'bb',caption:'bb',sub:[{id: 'bba',caption:'bba'},{id:'bbb',caption:'bbb',sub:[{id:'bbba',caption:'bbba'}]}]}]},{id:'c',caption:'c',sub:[{id:'cz',caption:'cz'}]}]});"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.toggleNode('b',true,true)},1000);"+
                    "xui.asyRun(function(){o.toggleNode('bb',false,true)},2000);"+
                    "xui.asyRun(function(){o.toggleNode('bb',true,false)},3000);"+
                    "}"
                ]
            },

            onGetContent:{
                $desc:"Fired when the UI needs to build a sub items",
                $paras:[
                    $profile,
                    "item: Object, list item Object",
                    "callback : Function, callback function"
                ],
                $snippet:[
                    "var id='xui.temp.tb18'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:true},{id:'c',caption:'c',sub:true}]});"+
                    "o.onGetContent(function(profile,item,callback,threadid){var id=item.id, data=[{id: id+'a',caption:'caption'},{id:id+'b',caption:'caption '+id}]; if(id=='b')return data; else callback(data);});"+
                    "o.onItemSelected(function(profile,item,src){xui.message(item.id)});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            onItemSelected:{
                $desc:"Fired when a specified item is clicked",
                $paras:[
                    $profile,
                    "item: Object, list item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid",
                    "type : Number, 0:no affacted; 1:checked; -1: unchecked"
                ],
                $snippet:[
                    "var id='xui.temp.tb20'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeBar({width:'auto',height:'auto',dock:'none',position:'relative',items:[{id:'a',caption:'cap a'},{id:'b',caption:'cap b',sub:true},{id:'c',caption:'c',sub:true}]});"+
                    "o.onItemSelected(function(profile,item,src){xui.message(item.id)});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            beforeClick:{
                $desc:"Fired before a list item was clicked. If returns false, click function will be ignored",
                $paras:[
                    $profile,
                    "item: list item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onClick:{
                $desc:"Fired when a list item was clicked",
                $paras:[
                    $profile,
                    "item: list item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onDblclick:{
                $desc:"Fired when list item was dblclicked",
                $paras:[
                    $profile,
                    "item: list item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            afterClick:{
                $desc:"Fired after a list item was clicked",
                $paras:[
                    $profile,
                    "item: list item Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            beforeExpand:{
                $desc:"Fired before a node expands. If returns false, function will be ignored",
                $paras:[
                    $profile,
                    "item: Object, list item Object"
                ]
            },
            beforeFold:{
                $desc:"Fired before a node collapses. If returns false, function will be ignored",
                $paras:[
                    $profile,
                    "item: Object, list item Object"
                ]
            },
            afterExpand:{
                $desc:"Fired after a node expands"
            },
            afterFold:{
                $desc:"Fired after a node collapses"
            },
            onShowOptions :{
                $desc:"Fired when user click the option button",
                $paras:[
                    $profile,
                    "item: list item Object",
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onCmd:{
                $desc:"Fired when an inner command is clicked",
                $paras:[
                    $profile,
                    "item: Object, list item Object",
                    "cmdKey: String, the command key",
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","TreeView"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.TreeView Class",
        constructor:{
            $desc:"Creates a xui.UI.TreeView Object"
        },
        prototype:{
            getNoIcon:{
                $desc:"To determine whether this control has icons or not",
                $rtn:"Boolean"
            },
            setNoIcon:{
                $desc:"Specifys whether this control has icons or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            }
        }
    });


    xui.set(xui.Locale,["en","doc","xui","UI","TreeGrid"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.TreeGrid Class",
        constructor:{
            $desc:"Creates a xui.UI.TreeGrid Object"
        },
        getCellOption:{
            $desc:"Gets the spcefied cell's property value according to the given property key",
            $rtn:"String",
            $paras:[
                "profile [Required] : xui.UIProfile, the xui.UIProfile of TreeGrid",
                "cell [Required] : Object, the cell Object",
                "key [Required] : String, the target property key"
            ],
            $snippet:[
                "var id='xui.temp.grid0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                "o.setActiveMode('cell').afterCellActive(function(profile, cell){xui.message(profile.box.getCellOption(profile,cell,'type'))});"+
                "xui(id).prepend(o);"+
                "}"
            ]
        },
        isHotRow:{
            $desc:"To determine whether or not the row is the Hot Row",
            $rtn:"Boolean",
            $paras:[
                "row [Required] : String/Object, the row id or object"
            ]
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            activate:{
                $desc:"Activates it(set focus)",
                $rtn:"[self]"
            },
            getActiveMode :{
                $desc:"To determine grid active mode",
                $rtn:"String, 'cell', 'row' or 'none'",
                $snippet:[
                    "var id='xui.temp.grid1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setActiveMode('cell'); alert(o.getActiveMode());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setActiveMode :{
                $desc:"Sets grid active mode",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'cell', 'row' or 'none'.Default is 'row'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,altRowsBg:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setActiveMode('row'); alert(o.getActiveMode());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            offEditor:{
                $desc:"To off the cell's edit mode"
            },
            autoRowHeight:{
                $desc:"To auto adjust row height for a certain row or all rows",
                $paras:[
                    "rowId [Optional] : String, row id. [null] for all rows"
                ]
            },
            autoColWidth:{
                $desc:"To auto adjust column width for a certain column or all columns",
                $paras:[
                    "colId [Optional] : String, col id"
                ]
            },
            autoColHeight:{
                $desc:"To auto adjust header height"
            },
            editCell:{
                $desc:"To bind a specified cell to a specified editor",
                $paras:[
                    "cell [Required] : String, cell's id or cell object"
                ]
            },
            focusCell:{
                $desc:"Sets focus to the cell",
                $paras:[
                    "cell [Required] : String, cell's id or cell object"
                ]
            },
            focusCellbyRowCol:{
                $desc:"Sets focus to cell by row id and col id",
                $paras:[
                    "rowId [Required] : String, the row id",
                    "colId [Required] : String, the col id"
                ]
            },
            editCellbyRowCol:{
                $desc:"To bind a specified cell to a specified editor by row id and col id",
                $paras:[
                    "rowId [Required] : String, the row id",
                    "colId [Required] : String, the col id"
                ],
                $snippet:[
                    "var id='xui.temp.grid3'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.editCellbyRowCol('row2','col2')},1000);"+
                    "}"
                ]
            },
            getExcelCellId:{
                $desc:"Gets the simulated Excel cell's id",
                $rtn:"String"
            },
            setExcelCellId:{
                $desc:"Sets the simulated Excel cell's id",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force                ]
            },
            getValueSeparator:{
                $desc:"Gets the separator for string value(only for selMode is 'multi' or 'multibycheckbox'); Default is ';'",
                $rtn:"String"
            },
            setValueSeparator:{
                $desc:"Sets the separator for string value(only for selMode is 'multi' or 'multibycheckbox')",
                $rtn:"[self]"
            },
            getCurrencyTpl:{
                $desc:"Gets the currency template",
                $rtn:"String"
            },
            setCurrencyTpl:{
                $desc:"Sets the currency template",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. Must be a string with a '*' and be not in [^1-9.,]",
                    $force
                ]
            },
            getNumberTpl:{
                $desc:"Gets the number template",
                $rtn:"String"
            },
            setNumberTpl:{
                $desc:"Sets the number template",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. Must be a string with a '*' and be not in [^1-9.,-]",
                    $force
                ]
            },
            getUidColumn:{
                $desc:"Gets the uid column id",
                $rtn:"String"
            },
            setUidColumn:{
                $desc:"Sets the uid column id",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String. Must be a column id",
                    $force
                ]
            },
            getAltRowsBg :{
                $desc:"To determine whether to show rows in stripe",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid4'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setAltRowsBg(true); alert(o.getAltRowsBg());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setAltRowsBg :{
                $desc:"Specifys whether to show rows in stripe.",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid5'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setAltRowsBg(true); alert(o.getAltRowsBg());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getDirectInput:{
                $desc:"To determine whether editor input value into grid cell without pressing 'enter' keyboard",
                $rtn:"Boolean"
            },
            setDirectInput:{
                $desc:"Specifys whether editor input value into grid cell without pressing 'enter' keyboard",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getAnimCollapse :{
                $desc:"Gets the Animate property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid6'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setAnimCollapse(true); alert(o.getAnimCollapse());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setAnimCollapse :{
                $desc:"Sets the Animate property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid7'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setAnimCollapse(true); alert(o.getAnimCollapse());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getCell:{
                $desc:"Gets the cell Object according to its id",
                $rtn:"Ojbect",
                $paras:[
                    "cellId [Required] : String/Object, the cell object or cell id",
                    "type [Optional] : String, 'data': get full key/value' data; 'map':get min key/value pair, 'min/value': get value only; else, return the original object"
                ]
            },
            isDirtied:{
                $desc:"To check whether or not the grid is modified",
                $rtn:"Boolean"
            },
            getCells:{
                $desc:"Gets cells",
                $rtn:"Objcet. {cellId:{rowId:, colId:, value:, oValue:}}",
                $paras:[
                    "rowId : [Optional] : String, return this row's cell only",
                    "colId : [Optional] : String, return this col's cell only",
                    "type [Optional] : String, 'data': get key/value' data; 'min/value': get value only; else, return the original object"
                ]
            },
            getCells2:{
                $desc:"Gets cells data. No rowId + now ColId, returns [[...]]; rowId or colId, returns [...], rowId+colId, return s ...)",
                $rtn:"Array/Objecct. [[...]], [...], ...; '...': type='data' > {rowId, colId, value, oValue}, type='min' > value, else > [cell object].",
                $paras:[
                    "rowId : [Optional] : String, return this row's cell only",
                    "colId : [Optional] : String, return this col's cell only",
                    "type [Optional] : String, 'data': get key/value' data; 'min/value': get value only; else, return the original object"
                ]
            },
            isCellDirtied:{
                $desc:"To check whether or not the cell is modified",
                $rtn:"Boolean",
                $paras:[
                    "cell [Required] : Object, the cell"
                ]
            },
            isRowDirtied:{
                $desc:"To check whether or not the row is modified",
                $rtn:"Boolean",
                $paras:[
                    "row [Required] : Object, the row"
                ]
            },
            getDirtied:{
                $desc:"Gets all dirtied cells value",
                $rtn:"Objcet. {cellId:{rowId:, colId:, value:, oValue:}}",
                $paras:[
                    "rowId : [Optional] : String, return this row's cell only",
                    "colId : [Optional] : String, return this col's cell only"
                ]
            },
            getCellbyRowCol:{
                $desc:"Gets the cell Object according to its row id and col id",
                $rtn:"Ojbect",
                $paras:[
                    "rowId [Required] : String, row id",
                    "colId [Requried] : String, column id",
                    "type [Optional] : String, 'data': get full key/value' data; 'map':get min key/value pair, 'min/value': get value only; else, return the original object"
                ],
                $snippet:[
                    "var id='xui.temp.grid7.1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "alert(o.getCellbyRowCol('row2','col2').value);"+
                    "}"
                ]
            },
            getColHidable:{
                $desc:"To determine whether columns are hidable",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid8.2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColHidable(true); alert(o.getColHidable());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setColHidable :{
                $desc:"Specifys whether columns are hidable",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid9.2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColHidable(true); alert(o.getColHidable());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getColMovable :{
                $desc:"To determine whether columns are movable",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid8'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColMovable(false); alert(o.getColMovable());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setColMovable :{
                $desc:"Specifys whether columns are movable",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid9'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColMovable(true); alert(o.getColMovable());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getColResizer :{
                $desc:"To determine whether columns are resizable",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid10'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColResizer(false); alert(o.getColResizer());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setColResizer :{
                $desc:"Specifys whether columns are resizable",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid11'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColResizer(true); alert(o.getColResizer());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getColSortable :{
                $desc:"To determine whether columns are sortable",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid12'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColSortable(false); alert(o.getColSortable());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setColSortable :{
                $desc:"Specify whether columns are sortable",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid13'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColSortable(true); alert(o.getColSortable());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getEditable :{
                $desc:"To determine whether grid are editable or read-only",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid14'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setEditable(false); alert(o.getEditable());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setEditable :{
                $desc:"Sets grid to editable or read-only.",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid15'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setEditable(true); alert(o.getEditable());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getHeaderHeight :{
                $desc:"Get grid header height",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.grid16'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setHeaderHeight(40); alert(o.getHeaderHeight());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setHeaderHeight :{
                $desc:"Set grid header height",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid17'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setHeaderHeight(40); alert(o.getHeaderHeight());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getRowHandlerWidth :{
                $desc:"Get row handler width",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.grid16-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowHandlerWidth(40); alert(o.getRowHandlerWidth());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setRowHandlerWidth :{
                $desc:"Set row handler width",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid17-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowHandlerWidth(40); alert(o.getRowHandlerWidth());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getGridHandlerCaption :{
                $desc:"Get grid handler caption",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.grid16-2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setGridHandlerCaption('tg'); alert(o.getGridHandlerCaption());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setGridHandlerCaption :{
                $desc:"Set grid handler caption",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid17-2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setGridHandlerCaption('tg'); alert(o.getGridHandlerCaption());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getRowHeight :{
                $desc:"Get grid row height",
                $rtn:"Number",
                $snippet:[
                    "var id='xui.temp.grid18'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowHeight(40); alert(o.getRowHeight());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setRowHeight :{
                $desc:"Sets grid row height",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid19'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowHeight(40); alert(o.getRowHeight());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getFreezedColumn:{
                $desc:"Gets the freezed column",
                $rtn:"Number"
            },
            setFreezedColumn :{
                $desc:"Sets the freezed column",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getFreezedRow:{
                $desc:"Gets the freezed row",
                $rtn:"Number"
            },
            setFreezedRow:{
                $desc:"Sets the freezed row",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number",
                    $force
                ]
            },
            getIniFold :{
                $desc:"Gets the IniFold property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid20'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setIniFold(false); alert(o.getIniFold());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setIniFold :{
                $desc:"Sets the IniFold property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid21'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setIniFold(true); alert(o.getIniFold());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getRowResizer :{
                $desc:"To determine whether row can be resized by end user",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid22'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowResizer(false); alert(o.getRowResizer());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setRowResizer :{
                $desc:"Specify whether row can be resized by end user",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid23'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowResizer(true); alert(o.getRowResizer());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getRowHandler :{
                $desc:"To determine whether row has handle in the front",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid124'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowHandler(false); alert(o.getRowHandler());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setRowHandler :{
                $desc:"Specify whether row has handle in the front.",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid125'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowHandler(true); alert(o.getRowHandler());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getSelMode :{
                $desc:"Gets grid selection mode. Could be 'none', 'single', 'multi' or 'multibycheckbox'",
                $rtn:"String",
                $snippet:[
                    "var id='xui.temp.grid126'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setSelMode('none'); alert(o.getSelMode());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setSelMode :{
                $desc:"Sets grid selection mode",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'none', 'single' or 'multi'. Default is 'single'",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid127'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setSelMode('multi'); alert(o.getSelMode());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getNoCtrlKey:{
                $desc:"To determine whether using Ctrl keyboard to help select multi items or not",
                $rtn:"Boolean"
            },
            setNoCtrlKey:{
                $desc:"Specifies using Ctrl keyboard to help select multi items or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            insertRows:{
                 $desc:"Inserts a set of rows to the current grid",
                 $rtn:"[self]",
                 $paras:[
                    "arr [Required] : Array, A set of Item objects",
                    "pid [Optional] : String, the parent id",
                    "base [Optional] : String, the base row id string",
                    "before [Optional] : Boolean, Indicates whether it inserts the target rows before the base, or after the base. Default is false;",
                    "ignoreMixColumn [Optional] : Boolean, Indicates whether ignore the mix column effect or not. Default is false;"
                 ],
                $snippet:[
                    "var id='xui.temp.grid128'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,iniFold:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.insertRows([{id : 'row_1',cells:['cell_1',1,true,'label1']},{id : 'row_11',cells:['cell_11',1,true,'label1']}],'row4',null,true)},1000);"+
                    "xui.asyRun(function(){o.insertRows([{id : 'row_2',cells:['cell_2',1,true,'label1']}],'row4',null,false)},2000);"+
                    "xui.asyRun(function(){o.insertRows([{id : 'row_3',cells:['cell_3',1,true,'label1']}],null,'row2',false)},3000);"+
                    "xui.asyRun(function(){o.insertRows([{id : 'row_4',cells:['cell_4',1,true,'label1']}],null,'row2',true)},4000);"+
                    "}"
                ]
            },
            toggleRow:{
                $desc:"Expands or folds the specified row. It makes sense with rows containing children only",
                $paras:[
                    "id [Required] : String, The node id",
                    "expand [Optional] : Boolean, true=>expand;false=>fold"
                ],
                $snippet:[
                    "var id='xui.temp.grid129'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.toggleRow('row4',true)},1000);"+
                    "}"
                ]
            },
            updateRow:{
                $desc:"Updates a specifed row",
                $rtn:"[self]",
                $paras:[
                    "rowId [Optional] : String, row id, default is the current",
                    "options [Required] : key/value Object, the keys/values to be updated"
                ],
                $snippet:[
                    "var id='xui.temp.grid130-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.updateRow('row1',{caption:'new row1',height:100,sub:[]})},1000);"+
                    "}"
                ]
            },
            updateCell:{
                $desc:"Updates a specified cell",
                $rtn:"[self]",
                $paras:[
                    "cellId [Required] : String, the cell id",
                    "options [Required] : key/value Object, the keys/values to be updated",
                    "dirtyMark [Optional] : Boolean, Make dirty mark not not. Default is [true]"
                ],
                $snippet:[
                    "var id='xui.temp.grid130'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.updateCell('c_a',{value:'a a a a'})},1000);"+
                    "}"
                ]
            },
            updateCellByRowCol2:{
                $desc:"Updates a specified cell according to row index and col index",
                $rtn:"[self]",
                $paras:[
                    "mixedId [Required] : String, [row index : col index]",
                    "hash [Required] : key/value Object, the keys/values to be updated",
                    "dirtyMark [Optional] : Boolean, Make dirty mark not not. Default is [true]",
                    "triggerEvent [Optional] : Boolean, trigger event not not. Default is [false]"
                ]
            },
            updateCellByRowCol:{
                $desc:"Updates a specified cell according to row id and col id",
                $rtn:"[self]",
                $paras:[
                    "rowId [Required] : String, the corresponding row id",
                    "colId [Required] : String, the corresponding col id",
                    "hash [Required] : key/value Object, the keys/values to be updated",
                    "dirtyMark [Optional] : Boolean, Make dirty mark not not. Default is [true]",
                    "triggerEvent [Optional] : Boolean, trigger event not not. Default is [false]"
                ],
                $snippet:[
                    "var id='xui.temp.grid131'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.updateCellByRowCol('row1','col1',{value:'b b b b'})},1000);"+
                    "}"
                ]
            },
            getActiveRow:{
                $desc:"Gets the current active row",
                $paras:[
                    "type [Optional] : String, 'data': get key/value' data; 'min/value': get value only; else, return the original object"
                ],
                $rtn:"Object",
                $snippet:[
                    "var id='xui.temp.grid1311'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.setActiveRow('row1')},1000);"+
                    "xui.asyRun(function(){alert(o.getActiveRow().id)},1500);"+
                    "}"
                ]
            },
            setActiveRow:{
                $desc:"Sets the current active row",
                $rtn:"[self]",
                $paras:[
                    "rowId [Required] : String/Number, row id string, or the order number, -1 for the last row"
                ],
                $snippet:[
                    "var id='xui.temp.grid1312'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.setActiveRow('row1')},1000);"+
                    "xui.asyRun(function(){alert(o.getActiveRow().id)},1500);"+
                    "}"
                ]
            },
            getActiveCell:{
                $desc:"Gets the current active cell",
                $rtn:"Object",
                $snippet:[
                    "var id='xui.temp.grid1313'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative',activeMode:'cell'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.setActiveCell('row1','col1')},1000);"+
                    "xui.asyRun(function(){alert(o.getActiveCell().value)},1500);"+
                    "}"
                ]
            },
            setActiveCell:{
                $desc:"Sets the current active cell",
                $rtn:"[self]",
                $paras:[
                    "rowId [Required] : String, row id",
                    "colId [Required] : String, column id"
                ],
                $snippet:[
                    "var id='xui.temp.grid1314'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative',activeMode:'cell'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.setActiveCell('row1','col1')},1000);"+
                    "xui.asyRun(function(){alert(o.getActiveCell().value)},1500);"+
                    "}"
                ]
            },
            getRowDraggable :{
                $desc:"To determine whether rows are draggable by end user",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid32'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowDraggable(false); alert(o.getRowDraggable());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setRowDraggable :{
                $desc:"Specifys whether rows are draggable by end user",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid33'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowDraggable(true); alert(o.getRowDraggable());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getRows :{
                $desc:"Gets the all rows of this grid",
                $paras:[
                    "type [Optional] : String, 'data': get key/value' data; 'min/value': get value only; else, return the original object"
                ],
                $rtn:"Array",
                $snippet:[
                    "var id='xui.temp.grid32'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui.asyRun(function(){o.setRows([{id : 'row_1',cells:['cell_1',1,true,'label1']},{id : 'row_11',cells:['cell_11',1,true,'label1']}]); alert(o.getRows().length); alert(xui.serialize(o.getRows('data'))); alert(xui.serialize(o.getRows('min')))});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setRows :{
                $desc:"Set rows of this grid",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid33'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui.asyRun(function(){o.setRows([{id : 'row_1',cells:['cell_1',1,true,'label1']},{id : 'row_11',cells:['cell_11',1,true,'label1']}]); alert(o.getRows().length)});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getDataset:{
                $desc:"Gets the grid's dataset",
                $rtn:"Object"
            },
            setDataset:{
                $desc:"Sets the grid's dataset",
                $rtn:"[self]",
                $paras:[
                    "data: Object, json object"
                ]
            },
            getRawData :{
                $desc:"Gets the grid's raw mapped data",
                $paras:[
                    "row [Optional] : Object, the row",
                    "splitMixColumn [Optional] : Boolean, determine to split mix column or not, default is [false]"
                ],
                $rtn:"Array"
            },
            setRawData :{
                $desc:"Sets the grid's raw mapped data",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array. [{col1:v1,col2:v1}]",
                    $force
                ]
            },
            getHeader :{
                $desc:"Get grid header Object",
                $paras:[
                    "type [Optional] : String, 'data': get key/value' data; 'min/value': get value only; else, return the original object"
                ],
                $rtn:"Array",
                $snippet:[
                    "var id='xui.temp.grid34'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui.asyRun(function(){alert(o.getHeader().length)});"+
                    "xui.asyRun(function(){alert(xui.serialize(o.getHeader('data')))});"+
                    "xui.asyRun(function(){alert(xui.serialize(o.getHeader('min')))});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setHeader :{
                $desc:"Set grid header with a header Object",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid35'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui.asyRun(function(){alert(o.getHeader().length)});"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getTagCmds:{
                $desc:"Gets command buttons",
                $rtn:"Array"
            },
            setTagCmds:{
                $desc:"Sets command buttons",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Array, the items",
                    $force
                ]
            },
            setGrpCols :{
                $desc:"Set the column group array, and refresh UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ]
            },
            getGrpCols :{
                $desc:"Gets the column group array",
                $rtn:"[Array]"
            },
            getHeaderByColId:{
                $desc:"Gets a specified column's header value",
                $rtn:"Ojbect",
                $paras:[
                    "colId [Required] : String, column id",
                    "type [Optional] : String, 'data': get key/value' data; 'min/value': get value only; else, return the original object"
                ],
                $snippet:[
                    "var id='xui.temp.grid35-0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui.asyRun(function(){alert(o.getHeaderByColId('col1').id)},1000);"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            updateHeader:{
                $desc:"Updates a specified column's header value",
                $rtn:"[self]",
                $paras:[
                    "colId [Required] : String, column id",
                    "options [Required] : key/value Object"
                ],
                $snippet:[
                    "var id='xui.temp.grid35-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui.asyRun(function(){o.updateHeader('col1',{caption:'updated',width:100})},1000);"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getRowByDom:{
                $desc:"Gets the row Object according to a specified DOM element or an id string",
                $rtn:"Object, row object",
                $paras:[
                    "src [Required] : DOM element or id string"
                ]
            },
            getHeaderByDom:{
                $desc:"Gets the column header Object according to a specified DOM element or an id string",
                $rtn:"Object, column header oject",
                $paras:[
                    "src [Required] : DOM element or id string"
                ]
            },
            getCellByDom:{
                $desc:"Gets the cell Object according to a specified DOM element or an id string",
                $rtn:"Object, cell object",
                $paras:[
                    "src [Required] : DOM element or id string"
                ]
            },
            getRowbyRowId  :{
                $desc:"Gets a row item Object according to a given row id",
                $rtn:"Object",
                $paras:[
                    "rowId [Required] : String",
                    "type [Optional] : String, 'data': get key/value' data; 'min/value': get value only; else, return the original object"
                ],
                $snippet:[
                    "var id='xui.temp.grid36'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){alert(o.getRowbyRowId('row2'))});"+
                    "}"
                ]
            },
            udpateCellValue:{
                $desc:"Updates the cell",
                $rtn:"[self]",
                $paras:[
                    "cell [Required] : Object/String"
                ]
            },
            resetCellValue:{
                $desc:"Resets the cell",
                $rtn:"[self]",
                $paras:[
                    "cell [Required] : Object/String"
                ]
            },
            getRowbyCell:{
                $desc:"Gets a row item Object according to a cell Object",
                $rtn:"Object",
                $paras:[
                    "cell [Required] : Object",
                    "type [Optional] : String, 'data': get key/value' data; 'min/value': get value only; else, return the original object"
                ]
            },
            getHeaderByCell:{
                $desc:"Gets a header(col) item Object according to a cell Object",
                $rtn:"Object",
                $paras:[
                    "cell [Required] : Object",
                    "type [Optional] : String, 'data': get key/value' data; 'min/value': get value only; else, return the original object"
                ]
            },
            getHeaderbyCell:{
                $desc:"Gets a column header Object according to a cell Object",
                $rtn:"Object",
                $paras:[
                    "cell [Required] : Object"
                ]
            },
            getSubNodeInGrid:{
                $desc:"Gets one or a set of specified inner DOM elements (in the root DOM element) in the grid",
                $rtn:"xui.Dom",
                $paras:[
                    "key [Required] : String, key string",
                    "rowId [Optional] : String row id",
                    "colId [Optional] : String column id"
                ],
                $snippet:[
                    "var id='xui.temp.grid36-0'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){alert(o.getSubNodeInGrid('ROW').get().length)});"+
                    "xui.asyRun(function(){alert(o.getSubNodeInGrid('ROW','row1').get().length)});"+
                    "xui.asyRun(function(){alert(o.getSubNodeInGrid('CELL').get().length)});"+
                    "xui.asyRun(function(){alert(o.getSubNodeInGrid('CELL','row1','col1').get().length)});"+
                    "}"
                ]
            },
            adjustEditor:{
                $desc:"To adjust cell editor",
                $rtn:"[self]",
                $paras:[
                    "adjustFun [Optional] : Function(/Object:editor, Object:cell/), adjust function(if it's no-specified, 'adjustEditor' will adjust editor's positoin/size according to cell)"
                ]
            },
            getEditor:{
                $desc:"Gets the cell editor",
                $rtn:"Object"
            },
            updateEditor:{
                $desc:"Sets the cell editor",
                 $rtn:"[self]",
                $paras:[
                    "value [Optional] : Object, the value",
                    "caption [Optional] : String, the caption string",
                    "prop [Optional] : Hash, the properties"
                ]
            },
            getEditCell:{
                $desc:"Gets the editing cell object",
                $rtn:"Object"
            },
            getRowMap:{
                $desc:"Gets the active or specified  row's map",
                $rtn:"Object",
                $paras:[
                    "rowId [Optional] : String, [null] represents the current actived row",
                    "withRowVars[Optional] : Boolean, whether return the specific mark keys of row(  begin with '__row__'), defautl is [true]"
                ]
            },
            setRowMap :{
                $desc:"Uses map to set the active or specified row",
                $rtn:"[self]",
                $paras:[
                    "rowId [Optional] : String, [null] represents the current actived row",
                    "hash [Required] : Object.  key/value paires",
                    "dirtyMark [Optional] : Boolean, Make dirty mark not not. Default is [true]",
                    "triggerEvent [Optional] : Boolean, trigger event not not. Default is [false]"
                ]
            },
            getRowNumbered :{
                $desc:"Gets the RowNumbered property value on the first UIProfile",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid37'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowNumbered(true); alert(o.getRowNumbered());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setRowNumbered :{
                $desc:"Sets the RowNumbered property value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid38'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setRowNumbered(true); alert(o.getRowNumbered());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getEditMode:{
                $desc:"Sets edit moce 'focus', 'sharp', 'hover', 'hovershape' or 'inline'. Default is 'focus'",
                $rtn:"String"
            },
            setEditMode:{
                $desc:"Gets edit moce ",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String'focus', 'sharp', 'hover' or 'inline'",
                    $force
                ]
            },
            getShowHeader :{
                $desc:"To determines whether grid header shows up or not",
                $rtn:"Boolean",
                $snippet:[
                    "var id='xui.temp.grid39'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false, position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setShowHeader(false); alert(o.getShowHeader());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            setShowHeader :{
                $desc:"Specifys whether grid header shows up or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ],
                $snippet:[
                    "var id='xui.temp.grid40'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setShowHeader(false); alert(o.getShowHeader());"+
                    "xui(id).prepend(o);"+
                    "}"
                ]
            },
            getRowOptions:{
                $desc:"Gets the grid rows' customized prop",
                $rtn:"Object"
            },
            setRowOptions :{
                $desc:"Sets the grid rows' customized prop",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ]
            },
            getColOptions:{
                $desc:"Gets the grid cols' customized prop",
                $rtn:"Object"
            },
            setColOptions:{
                $desc:"Sets the grid cols' customized prop",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ]
            },
            getTreeMode:{
                $desc:"Gets the tree mode",
                $rtn:"String"
            },
            setTreeMode:{
                $desc:"Sets the tree mode",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String'none','inhandler' or 'infirstcell'",
                    $force
                ]
            },
            getHotRowMode:{
                $desc:"Gets the grid's hot row mode",
                $rtn:"String'none'[no hot row], 'show'[hot row always show], 'hide'[auto hide invalid row(beforeHotRowAdded return false)] or 'auto'[auto hide invalid row(beforeHotRowAdded return false), and auto adding a hot row with empty grid]"
            },
            setHotRowMode:{
                $desc:"Sets the grid's hot row mode",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String'none'[no hot row], 'auto'[auto show or hide] or 'show'[always show]",
                    $force
                ]
            },
            getHotRowNumber:{
                $desc:"Gets the Grid's hot row's number string",
                $rtn:"String"
            },
            setHotRowNumber:{
                $desc:"Sets the Grid's hot row's number string",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getHotRowCellCap:{
                $desc:"Gets the Grid's hot row's required cell string",
                $rtn:"String"
            },
            setHotRowCellCap:{
                $desc:"Sets the Grid's hot row's required cell string",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getHotRowRequired:{
                $desc:"Gets the Grid's hot row's required columns (use valueSeparator for multi)",
                $rtn:"String"
            },
            setHotRowRequired:{
                $desc:"Sets the Grid's hot row's required columns (use valueSeparator for multi)",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            updateGridValue:{
                $desc:"Resets all cells' value in the grid, and clears all dirty marks",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.grid41'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "o.updateCellByRowCol('row1','col1',{value:'a'}).updateCellByRowCol('row1','col2',{value:5}).updateCellByRowCol('row2','col2',{value:8});"+
                    "xui.asyRun(function(){o.updateGridValue();},1000);"+
                    "}"
                ]
            },
            updateColValue:{
                $desc:"Resets all cells' value in a col, and clears those dirty marks",
                $rtn:"[self]",
                $paras:[
                    "colId [Required] : String, the column's id string"
                ]
            },
            updateRowValue:{
                $desc:"Resets all cells' value in a row, and clears those dirty marks",
                $rtn:"[self]",
                $paras:[
                    "rowId [Required] : String, the row's id string"
                ],
                $snippet:[
                    "var id='xui.temp.grid41-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "o.updateCellByRowCol('row1','col1',{value:'a'}).updateCellByRowCol('row1','col2',{value:5}).updateCellByRowCol('row2','col2',{value:8});"+
                    "xui.asyRun(function(){o.updateRowValue('row1')},1000);"+
                    "}"
                ]
            },
            showColumn :{
                $desc:"Shows/hides a specified column",
                $rtn:"[self]",
                $paras:[
                    "colId [Required] : String, the column id",
                    "flag [Required] : Boolean, to determine to show or hide the specified column. Default is true(to show)"
                ],
                $snippet:[
                    "var id='xui.temp.grid42'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.showColumn('col1',false)},1000);"+
                    "xui.asyRun(function(){o.showColumn('col1')},2000);"+
                    "}"
                ]
            },
            sortColumn:{
                $desc:"To sort column",
                $rtn:"[self]",
                $paras:[
                    "colId [Required] : String, the column id",
                    "desc [Required] : Boolean, [True] for desc, [false] for asc. No-specified or null for switching between desc and asc",
                    "sortby [Required] : Function, sortby function(x,y,values,asc,colIndex,colCells){return 0|1|-1}"
                ]
            },
            removeAllRows:{
                $desc:"Removes all rows",
                $rtn:"[self]",
                $snippet:[
                    "var id='xui.temp.grid43'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.removeAllRows();},1000);"+
                    "}"
                ]
            },
            removeCols:{
                $desc:"Removes the specified columns",
                $rtn:"[self]",
                $paras:[
                    "ids [Required] : Array or String, column id string, or a set of column id strings"
                ]
            },
            removeRows:{
                $desc:"Removes the specified rows, or the current actived row",
                $rtn:"[self]",
                $paras:[
                    "ids [Optional] : Array or String, row id string, or a set of row id strings"
                ],
                $snippet:[
                    "var id='xui.temp.grid44'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "xui.asyRun(function(){o.removeRows(['row1','row2'])},1000);" +
                    "}"
                ]
            },
            addHotRow:{
                $desc:"To add the hot row",
                $rtn:"[self]",
                $paras:[
                    "focusColId [Optional] : String, the focused column id"
                ]
            },
            removeHotRow:{
                $desc:"To remove the hot row",
                $rtn:"[self]"
            },
            getHotRow:{
                $desc:"Gets the hot row",
                $rtn:"Object",
                $paras:[
                    "type [Optional] : String, 'data': get key/value' data; 'min/value': get value only; else, return the original object"
                ]
            },
            updateHotRow:{
                $desc:"To update the hot row",
                $rtn:"[self]",
                $paras:[
                    "cells [Required] : Hash/Array, the row cells map or array"
                ]
            },
            beforeCellActive:{
                $desc:"Fired before the cell is activated. If returns false, the activation will be ignored",
                $paras:[
                    $profile,
                    "cell : Object"
                ],
                $snippet:[
                    "var id='xui.temp.grid50'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setActiveMode('cell');"+
                    "xui(id).prepend(o);"+
                    "o.beforeCellActive(function(p,c){return false;});" +
                    "}"
                ]
            },
            onBodyLayout:{
                $desc:"Fired when the grid boy completing layout",
                $paras:[
                    $profile,
                    "trigger : String, trigger type"
                ]
            },
            beforeRowActive:{
                $desc:"Fired before the row is activated. If returns false, the activation will be ignored",
                $paras:[
                    $profile,
                    "row : Object"
                ],
                $snippet:[
                    "var id='xui.temp.grid51'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setActiveMode('row');"+
                    "xui(id).prepend(o);"+
                    "o.beforeRowActive(function(p,c){return false;});" +
                    "}"
                ]
            },
            afterCellActive:{
                $desc:"Fired after the cell is activated",
                $paras:[
                    $profile,
                    "cell : Object"
                ],
                $snippet:[
                    "var id='xui.temp.grid52'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setActiveMode('cell');"+
                    "xui(id).prepend(o);"+
                    "o.afterCellActive(function(p,c){xui.message(c.value);});" +
                    "}"
                ]
            },
            beforeCellKeydown:{
                $desc:"Fired before cell keyboard event",
                $paras:[
                    $profile,
                    "cell : Object, cell object",
                    "keys : Object, Please refer to xui.Event.getKey "
                ]
            },
            afterCellFocused:{
                $desc:"Fired after the cell is focused",
                $paras:[
                    $profile,
                    "cell : Object. cell object",
                    "row : Object, cell's row object"
                ]
            },
            onBeginEdit:{
                $desc:"Fired when the cell's editor is showed",
                $paras:[
                    $profile,
                    "cell : Object. cell object",
                    "editor: Object, the editor object"
                ]
            },
            beforeEditApply:{
                $desc:"Fired before the cell's editor apply changed. If returns false, the activation will be ignored",
                $paras:[
                    $profile,
                    "cell : Object. cell object",
                    "options: Object. updated content",
                    "editor: Object, the editor object",
                    "tag: String,  action source"
                ]
            },
            onEndEdit:{
                $desc:"Fired when the cell's editor is hidden",
                $paras:[
                    $profile,
                    "cell : Object. cell object",
                    "editor: Object, the editor object"
                ]
            },
            beforeIniEditor:{
                $desc:"Fired before the cell switch to edit mode. If returns false, the default edit action will be ignored",
                $paras:[
                    $profile,
                    "cell : Object. cell object",
                    "cellNode : xui.Dom, cell's dom object",
                    "pNode : xui.Dom, the Editor's parent Node"
                ]
            },
            beforeInitHotRow:{
                $desc:"Fired before the hot row initialization.[when hotRowMode is not 'none'] If returns false, the default edit action will be ignored",
                $paras:[
                    $profile,
                    "cell : Object. cell object",
                    "row : Object, cell's row object"
                ]
            },
            onInitHotRow:{
                $desc:"Fired when the hot row need to be inited. [Needs to return an init row object.]",
                $paras:[
                    "profile : xui.UIProfile. The current control's profile object",
                    "row : Object, hot row's map object"
                ]
            },
            beforeHotRowAdded:{
                $desc:"Fired before the hot row is added. If it returns true, the new row will be added; if it returns false, the hot row will be removed; if it returns cell, the new row will not be added, and the cell in the hot row will be focused; if it returns [null], do nothing",
                $paras:[
                    $profile,
                    "cellMap : Object. row map object",
                    "row : Object. row object",
                    "leaveGrid : Booean. to determine the event cursor leaves grid or not"
                ]
            },
            afterHotRowAdded:{
                $desc:"Fired after the hot row is added",
                $paras:[
                    $profile,
                    "row : Object. row object"
                ]
            },
            onRowDirtied:{
                $desc:"Fired when the row is dirtied in asynchronous mode",
                $paras:[
                    $profile,
                    "row : Object. row object"
                ]
            },
            afterRowActive:{
                $desc:"Fired after the row is activated",
                $paras:[
                    $profile,
                    "row : Object"
                ],
                $snippet:[
                    "var id='xui.temp.grid53'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setActiveMode('row');"+
                    "xui(id).prepend(o);"+
                    "o.afterRowActive(function(p,c){xui.message(c.id);});" +
                    "}"
                ]
            },
            beforeColMoved:{
                $desc:"Fired before the column is moved. If returns false, the move action will be ignored",
                $paras:[
                    $profile,
                    "colId : String, the moved column id",
                    "toId : String, [colId] will be moved to the front of which column"
                ],
                $snippet:[
                    "var id='xui.temp.grid54'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColMovable(true);"+
                    "xui(id).prepend(o);"+
                    "o.beforeColMoved(function(p,colId){if(colId=='col1')return false;});" +
                    "o.afterColMoved(function(p,colId,toId){xui.message(colId +' is moved to the the front of '+ toId)});" +
                    "}"
                ]
            },
            afterColMoved:{
                $desc:"Fired after the column is moved",
                $paras:[
                    $profile,
                    "colId : String, the moved column id",
                    "toId : String, [colId] will be moved to the front of which column"
                ],
                $snippet:[
                    "var id='xui.temp.grid55'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColMovable(true);"+
                    "xui(id).prepend(o);"+
                    "o.beforeColMoved(function(p,colId){if(colId=='col1')return false;});" +
                    "o.afterColMoved(function(p,colId,toId){xui.message(colId +' is moved to the the front of '+ toId)});" +
                    "}"
                ]
            },
            beforeColSorted:{
                $desc:"Fired before the column is sorted. If returns false, the sort action will be ignored",
                $paras:[
                    $profile,
                    "col : Object, the column header object"
                ]
            },
            afterColSorted:{
                $desc:"Fired after the column is sorted",
                $paras:[
                    $profile,
                    "col : Object, the column header object"
                ]
            },
            beforeColShowHide:{
                $desc:"Fired before the column is hidden or showed. If returns false, the action will be ignored",
                $paras:[
                    $profile,
                    "colId : String, the target col id",
                    "flag: Boolean, true->show; false->hide"
                ]
            },
            afterColShowHide:{
                $desc:"Fired after the column is hidden or showed",
                $paras:[
                    $profile,
                    "colId : String, the target col id",
                    "flag: Boolean, true->show; false->hide"
                ]
            },
            beforeColResized:{
                $desc:"Fired before the column's width is modified. If returns false, the action will be ignored",
                $paras:[
                    $profile,
                    "colId : String, the target col id",
                    "width: Number, col width"
                ]
            },
            afterColResized:{
                $desc:"Fired after the column's width is modified",
                $paras:[
                    $profile,
                    "col : Object, the target col id",
                    "width: Number, col width"
                ]
            },
            beforeRowResized:{
                $desc:"Fired before the row's height is modified. If returns false, the action will be ignored",
                $paras:[
                    $profile,
                    "rowId : String, the target row id",
                    "height: Number, row height"
                ]
            },
            afterRowResized:{
                $desc:"Fired after the row's height is modified",
                $paras:[
                    $profile,
                    "rowId : String, the target row id",
                    "height: Number, row height"
                ]
            },
            beforeColDrag:{
                $desc:"Fired before the column is draged. If returns false, the drag action will be ignored",
                $paras:[
                    $profile,
                    "colId : String, the column id"
                ],
                $snippet:[
                    "var id='xui.temp.grid56'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColMovable(true);"+
                    "xui(id).prepend(o);"+
                    "o.beforeColDrag(function(p,colId){if(colId=='col1')return false;});" +
                    "}",
                    "var id='xui.temp.grid57'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s; hash.header[0].colMovable=false; o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setColMovable(true);"+
                    "xui(id).prepend(o);"+
                    "}"
               ],
                $memo:"Equals to set 'colMovable' to false in the specified column in header array"
            },

            onGetContent:{
                $desc:"Fired when treegrid need to get content to build a set of sub rows",
                $paras:[
                    $profile,
                    "row : Object, the parent row",
                    "callback : Function, callback function"
                ],
                $snippet:[
                    "var id='xui.temp.grid57'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;hash.rows[3].sub=hash.rows[4].sub=true;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "o.onGetContent(function(p,row){return row.id=='row4'?[['a',1,true,{type:'checkbox',value:true}]]:[['b',3,false,'#555555']];});" +
                    "}"
               ]
            },
            onRowSelected:{
                $desc:"Fired when a row is selected",
                $paras:[
                    $profile,
                    "row:  Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid",
                    "type : Number, 0:no affacted; 1:checked; -1: unchecked"
                ],
                $snippet:[
                    "var id='xui.temp.grid58'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "o.onRowSelected(function(p,row){xui.message(row.id)});" +
                    "}"
               ]
            },
            onDblclickRow:{
                $desc:"Fired when a row is dblclicked",
                $paras:[
                    $profile,
                    "row: Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.grid59'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "o.onDblclickRow(function(p,row){xui.message(row.id)});" +
                    "}"
               ]
            },
            beforeComboPop :{
                $desc:"Fired when a cell's editor pop button is clicked. Cell type must in 'date,time,datetime,listbox,combobox,helpinput,color,getter,popbox,cmdbox'",
                $paras:[
                    $profile,
                    "cell: Object",
                    "proEditor: xui.UIProfile, the editor profile Object, if the editor exists",
                    "pos: Object, the click event mouse position",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.grid60'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;hash.header[0].type='button';hash.header[1].type='cmdbox';hash.header[2].type='popbox';o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "o.setEditable(true);"+
                    "xui(id).prepend(o);"+
                    "o.beforeComboPop(function(p,cell){xui.message(cell.value)});" +
                    "}"
               ]
            },
            beforePopShow :{
                $desc:"Fired before cell's editor drop window is showed. Cell type must in 'date,time,datetime,listbox,combobox,helpinput,color'",
                $paras:[
                    $profile,
                    "cell: Object",
                    "proEditor: xui.UIProfile, the editor profile Object, if the editor exists",
                    "popCtl : xui.UIProfile, pop-up window UI Control",
                    "items : Array, the list items"
                ]
            },
            afterPopShow :{
                $desc:"Fired after cell's editor drop window is showed. Cell type must in 'date,time,datetime,listbox,combobox,helpinput,color'",
                $paras:[
                    $profile,
                    "cell: Object",
                    "proEditor: xui.UIProfile, the editor profile Object, if the editor exists",
                    "popCtl : xui.UIProfile, pop-up window UI Control"
                ]
            },
            onCommand :{
                $desc:"Fired when a cell's editor command button is clicked. Cell type must in 'date,time,datetime,listbox,combobox,helpinput,color,getter,popbox,cmdbox'",
                $paras:[
                    $profile,
                    "cell: Object",
                    "proEditor: xui.UIProfile, the editor profile Object, if the editor exists",
                    "src : String, command button's xid"
                ]
            },
            onEditorClick:{
                $desc:"Fired when a cell's editor is clicked",
                $paras:[
                    $profile,
                    "cell: Object",
                    "proEditor: xui.UIProfile, the editor profile Object, if the editor exists",
                    "type: String, to determine which button be clicked. left or right",
                    "src : String, command button's xid"
                ]
            },
            onClickGridHandler:{
                $desc:"Fired when the left/top cell is clicked",
                $paras:[
                    $profile,
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onRowHover:{
                $desc:"Fired when mouse hover a row",
                $paras:[
                    $profile,
                    "row: Object,  row Object",
                    "hover : Boolean, mouse over or out",
                    "e : Event, the DOM event Object",
                    "src: String, the event source DOM element's xid"
                ]
            },
            onClickHeader:{
                $desc:"Fired when a column header is clicked",
                $paras:[
                    $profile,
                    "col: Object,  column Object",
                    "e : Event, the DOM event Object",
                    "src: String, the event source DOM element's xid"
                ]
            },
            onCmd:{
                $desc:"Fired when an inner command is clicked",
                $paras:[
                    $profile,
                    "item: Object, list item Object",
                    "cmdKey: String, the command key",
                    "e: Event, DOM event Object",
                    "src : String, the event source DOM element's xid"
                ]
            },
            onClickRow:{
                $desc:"Fired when a row is clicked",
                $paras:[
                    $profile,
                    "row: Object,  row Object",
                    "e : Event, the DOM event Object",
                    "src: String, the event source DOM element's xid"
                ]
            },
            onClickRowHandler:{
                $desc:"Fired when a row handler is clicked",
                $paras:[
                    $profile,
                    "row: Object,  row Object",
                    "e : Event, the DOM event Object",
                    "src: String, the event source DOM element's xid"
                ]
            },
            onClickCell:{
                $desc:"Fired when a cell(type is 'label/button' or not editable) is clicked",
                $paras:[
                    $profile,
                    "cell: Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.grid60-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;hash.header[0].type='button';o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "o.onClickCell(function(p,cell){xui.message(cell.value)});" +
                    "}"
               ]
            },
            onDblclickCell:{
                $desc:"Fired when a cell(type is 'label/button' or not editable) is double clicked",
                $paras:[
                    $profile,
                    "cell: Object",
                    "e: Event, the DOM event Object",
                    "src : String, the event source DOM element's xid"
                ],
                $snippet:[
                    "var id='xui.temp.grid60-2'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;hash.header[0].type='button';o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "o.onDblclickCell(function(p,cell){xui.message(cell.value)});" +
                    "}"
               ]
            },
            beforeIniEditor: {
                $desc:"Fired before a specified cell will be changed to edit mode(attach an editor to it). If returns [false] or the customized editor, that action will be cancelled",
                $paras:[
                    $profile,
                    "cell : Object",
                    "cellNode: xui.Dom, the cell's node"
                ],
                $snippet:[
                    "var id='xui.temp.grid61-1'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:true,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "o.beforeIniEditor(function(p,cell){if(cell._col.id!='col2')return false;});" +
                    "}"
               ]
            },
            beforeCellUpdated: {
                $desc:"Fired before a specified cell is update. If returns false, the update action will be ignored",
                $paras:[
                    $profile,
                    "cell :Object, the cell Object",
                    "options : Object, the keys/values to be updated",
                    "isHotRow : Boolean. Is the cell in the hot row"
                ],
                $snippet:[
                    "var id='xui.temp.grid61'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "o.beforeCellUpdated(function(){xui.message('Cant update cell!');return false;});" +
                    "xui.asyRun(function(){o.updateCellByRowCol('row1','col1','abc')},1000);"+
                    "}"
               ]
            },
            afterCellUpdated: {
                $desc:"Fired before a specified cell is update. If returns false, the update action will be ignored",
                $paras:[
                    $profile,
                    "cell : Object, the cell Object",
                    "options : Object, the keys/values to be updated",
                    "isHotRow : Boolean. Is the cell in the hot row"
                ],
                $snippet:[
                    "var id='xui.temp.grid62'; if(!xui.Dom.byId(id)){this.prepend(xui.create('<div id='+id+' style=\"border:solid 1px;padding:20px;position:relative;width:300px;height:200px;\">' + '<button style=\"position:absolute; bottom:0px; z-index:2;\" onclick=\"xui(this).parent().remove()\">remove this example</button>' + '</div>'));"+
                    "var o=new xui.UI.TreeGrid({editable:false,position:'relative'});"+
                    "xui.Ajax('App/js/grid.js','',function(s){var hash=s;o.setHeader(hash.header).setRows(hash.rows);},null,null,{asy:false}).start();"+
                    "xui(id).prepend(o);"+
                    "o.afterCellUpdated(function(p,cell,hash){xui.message('cell updated!');});" +
                    "xui.asyRun(function(){o.updateCellByRowCol('row1','col1','abc')},1000);"+
                    "xui.asyRun(function(){o.updateCellByRowCol('row1','col2',{type:'checkbox',value:false})},2000);"+
                    "}"
               ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","UI","Flash"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.Flash Class",
        constructor:{
            $desc:"Creates a xui.UI.Flash Object"
        },
        getFlashVersion:{
            $desc:"Gets the browser's Flash version",
            $rtn:"String"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getParameters:{
                $desc:"Gets url parameters to Flash",
                $rtn:'Object'
            },
            setParameters:{
                $desc:"Sets Flash's url parameters",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ]
            },
            getFlashvars:{
                $desc:"Gets Flash's vars",
                $rtn:'Object'
            },
            setFlashvars:{
                $desc:"Sets vars to Flash",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    $force
                ]
            },
            getCover:{
                $desc:"Gets whether Flash has a cover on it or not",
                $rtn:"Boolean"
            },
            setCover:{
                $desc:"To determine whether Flash has a cover on it or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getFlash:{
                $desc:"Gets the inner Flash Object",
                $rtn:"Object"
            },
            getSrc:{
                $desc:"Gets Flash's src",
                $rtn:"String"
            },
            setSrc:{
                $desc:"Sets Flash's src",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            refreshFlash:{
                $desc:"Refresh the Flash"
            }
        }
    });
     xui.set(xui.Locale,["cn","doc","xui","UI","ECharts"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.ECharts Class",
        constructor:{
            $desc:"Creates a xui.UI.ECharts Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            getECharts:{
                $desc:"Gets ECharts object",
                $rtn:"Object, Echarts object"
            },
            optionAdapter:{
                $desc:"Function for adjusting ECharts' option object (will be called before setOption )",
                $rtn:"Object, Echarts option",
                $paras:[
                    "option [Required] : String, Echarts option"
                ]
            },
            echarts_call:{
                $desc:"Calls ECharts' function",
                $rtn:"Object",
                $paras:[
                    "funName [Required] : String, function name",
                    "params [Optional] : Array,  function parameters"
                ]
            },
            echarts_dispatchAction:{
                $desc:"Triggers chart actions",
                $rtn:"null",
                $paras:[
                    "payload [Required] : Object, parameter can trigger multiple actions through batch attribute."
                ]
            },
            echarts_showLoading:{
                $desc:"Shows loading animation.",
                $rtn:"null",
                $paras:[
                    "type [Optional] : String,  Optional; type of loading animation; only 'default' is supported by far",
                    "params [Optional] : Object,  Optional; configuration item of loading animation, which is related to type"
                ]
            },
            echarts_hideLoading:{
                $desc:"Hides animation loading effect",
                $rtn:"null"
            },
            echarts_getOption:{
                $desc:"Gets option object maintained in current instance, which contains configuration item and data merged from previous setOption operations by users, along with user interaction states",
                $rtn:"Object"
            },
            echarts_setOption:{
                $desc:"Configuration item, data, universal interface, all parameters and data can all be modified through setOption",
                $rtn:"null",
                $paras:[
                    "option [Required] : Object, Configuration item and data",
                    "notMerge[Optional] : Boolean, Optional; states whether not to merge with previous option; false by defualt, stating merging",
                    "lazyUpdate[Optional] : Boolean, Optional; states whether not to update chart immediately; false by defualt, stating update immediately",
                    "silent[Optional] : Boolean, Optional; states whether not to prevent triggering events when calling setOption; false by defualt, stating trigger events"
                ]
            },
            echarts_getDataURL: {
                $desc:"Exports chart image; returns a base64 URL; can be set to src of Image",
                $rtn:"String",
                $paras:[
                    "opts [Optional] : Object, options"
                ]
            },
            echarts_getConnectedDataURL: {
                $desc:"Exports connected chart image; returns a base64 url; can be set to src of Image",
                $rtn:"String",
                $paras:[
                    "opts [Optional] : Object, options"
                ]
            },
            echarts_appendData: {
                $desc:"The method is used in rendering millions of data , to load required chunked data",
                $rtn:"String",
                $paras:[
                    "opts [Optional] : Object, options"
                ]
            },
            echarts_clear: {
                $desc:"Clears current instance; removes all components and charts in current instance",
                $rtn:"null"
            },
            echarts_isDisposed: {
                $desc:"Returns whether current instance has been disposed",
                $rtn:"Boolean"
            },
            getChartCDN:{
                $desc:"Gets ECharts base lib CDN address",
                $rtn:'String'
            },
            setChartCDN:{
                $desc:"Sets ECharts base lib CDN address",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getChartCDNGL:{
                $desc:"Gets ECharts GL lib CDN address",
                $rtn:'String'
            },
            setChartCDNGL:{
                $desc:"Sets ECharts GL lib CDN address",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getChartTheme:{
                $desc:"Gets ECharts theme",
                $rtn:'String'
            },
            setChartTheme:{
                $desc:"Sets ECharts theme",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getChartRenderer:{
                $desc:"Gets ECharts rendering type",
                $rtn:'String'
            },
            setChartRenderer:{
                $desc:"Sets ECharts rendering type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'canvas' or 'svg'. Default is 'svg'",
                    $force
                ]
            },
            getChartDevicePixelRatio:{
                $desc:"Gets ECharts device pixel ratio",
                $rtn:'Number'
            },
            setChartDevicePixelRatio:{
                $desc:"Sets ECharts device pixel ratio",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number. Ratio of one physical pixel to the size of one device independent pixels. Browser's window.devicePixelRatio is used by default",
                    $force
                ]
            },
            getChartResizeSilent:{
                $desc:"To determine whether or not to prevent triggering events when resize",
                $rtn:'Boolean'
            },
            setChartResizeSilent:{
                $desc:"To specify whether or not to prevent triggering events when resize. Default is false",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getChartOption:{
                $desc:"Gets option object maintained in current instance, which contains configuration item and data merged from previous setOption operations by users, along with user interaction states",
                $rtn:'Object'
            },
            setChartOption:{
                $desc:"Configuration item, data, universal interface, all parameters and data can all be modified through setOption",
                $rtn:"[self]",
                $paras:[
                    "JSON: Object, JSON object"
                ]
            },
            getDataset:{
                $desc:"Gets dataset",
                $rtn:"Object"
            },
            setDataset:{
                $desc:"Sets dataset to ECharts (only for some certain types)",
                $rtn:"[self]",
                $paras:[
                    "data: Object, dataset object"
                ]
            },
            getOptionUpdater:{
                $desc:"Gets option updater object",
                $rtn:"Object"
            },
            setOptionUpdater:{
                $desc:"Sets option updater object",
                $rtn:"[self]",
                $paras:[
                    "data: Object, update object"
                ]
            },

            onMouseEvent:{
                $desc:"Triggerred when any ECharts mouse event is raised",
                $paras:[
                    $profile,
                    "eventName: String, event name",
                    "eventParams : Object, event parameters"
                ]
            },
            onChartEvent:{
                $desc:"Triggerred when any ECharts non-mouse event is raised",
                $paras:[
                    $profile,
                    "eventName: String, event name",
                    "eventParams : Object, event parameters"
                ]
            },
            beforeSetOption:{
                $desc:"Triggerred before settig option to ECharts",
                $paras:[
                    $profile,
                    "option: Object, option object"
                ]
            }
        }
    });
    xui.set(xui.Locale,["en","doc","xui","UI","FusionChartsXT"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.FusionChartsXT Class",
        constructor:{
            $desc:"Creates a xui.UI.FusionChartsXT Object"
        },
        prototype:{
            KEY:{$desc:"Class Name"},
            callFC:{
                $desc:"Calss FusionChartsXT's inner function",
                $rtn:"Object",
                $paras:[
                    "funName [Required] : String, function name",
                    "params [Optional] : Array, parameters"
                ]
            },
            configure:{
                $desc:"Configures print Manager",
                $paras:[
                    "options [Required] : Object"
                ],
                $memo:"Please refer to FusionChartsXT's configure function"
            },
            getChartType:{
                $desc:"Gets the chart's type",
                $rtn:'String'
            },
            setChartType:{
                $desc:"To set the chart's type",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    "force [Optional]: Boolean, force to take [obj] as a {}. Default is false"
                ],
                $memo:"Please refer to FusionChartsXT's chart type"
            },
            getChartAttribute:{
                $desc:"Gets FusionChartsXT's attribute",
                $rtn:'Object',
                $memo:"Please refer to FusionChartsXT's getChartAttribute function"
            },
            setChartAttribute:{
                $desc:"To set FusionChartsXT's Attribute",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Object",
                    "force [Optional]: Boolean, force to take [obj] as a {}. Default is false"
                ],
                $memo:"Please refer to FusionChartsXT's setChartAttribute function"
            },
            getJSONData:{
                $desc:"Returns the JSON data of chart as Object",
                $rtn:"Object"
            },
            setJSONData:{
                $desc:"To set JSON data",
                $rtn:"[self]",
                $paras:[
                    "JSON: Object, JSON Ojbect"
                ]
            },
            getPlotData:{
                $desc:"Gets plot data",
                $rtn:"Object"
            },
            setPlotData:{
                $desc:"Sets plot data",
                $rtn:"[self]",
                $paras:[
                    "data: Object, data object"
                ]
            },
            getFeedData:{
                $desc:"Gets the last real-time data",
                $rtn:"Object"
            },
            setFeedData:{
                $desc:"Feal-time feed data",
                $rtn:"[self]",
                $paras:[
                    "data: Object, data object"
                ]
            },
            getJSONUrl:{
                $desc:"Gets JSON URL",
                $rtn:"String"
            },
            setJSONUrl:{
                $desc:"Sets JSON URL",
                $rtn:"[self]",
                $paras:[
                    "url: String, URL"
                ]
            },
            getXMLData:{
                $desc:"Returns the XML data of chart as string",
                $rtn:"String"
            },
            setXMLData:{
                $desc:"To set xml string",
                $rtn:"[self]",
                $paras:[
                    "xml: String, xml string"
                ]
            },
            getXMLUrl:{
                $desc:"Gets XML URL",
                $rtn:"String"
            },
            setXMLUrl:{
                $desc:"To set XML URL",
                $rtn:"[self]",
                $paras:[
                    "url: String, URL string"
                ]
            },
            getSVGString:{
                $desc:"Gets FusionChartsXT's SVG string",
                $rtn:"String"
            },
            setTransparent:{
                $desc:"To set FusionChartsXT background transparent",
                $rtn:"[self]",
                $paras:[
                    "isTransparent: Boolean, to determine whether it's transparent or not"
                ]
            },
            fillData:{
                $desc:"Fill data to FusionChartsXT",
                $rtn:"[self]",
                $paras:[
                    "data: Object, data",
                    "index: Number, index",
                    "isLineset: Boolean, to determine whether it sets lineset or not"
                ]
            },
            updateData:{
                $desc:"This function feeds real-time data to real-time gauges. In single value gauges (LEDs, Bulb, Cylinder, Thermometer) The function takes a numeric value as the parameter. For Angular gauge and Horizontal Linear gauge, this function accepts two parameters - the dial number and the value to update",
                $rtn:"[self]",
                $paras:[
                    "index: Number, index or value",
                    "value: Number, value"
                ]
            },
            updateDataById:{
                $desc:"This function feeds real-time data to Angular gauge or Linear gauge. This function is required when you have set IDs to dials or pointers in these gauges. The function takes the dial ID as the first parameter and a numeric value (the updated data) as the second parameter",
                $rtn:"[self]",
                $paras:[
                    "key: String, id",
                    "value: Number, value"
                ]
            },
            getFCObject:{
                $desc:"Gets FusionChartsXT object",
                $rtn:"Object"
            },
            refreshChart:{
                $desc:"Refresh FusionChart"
            },
            onDataClick:{
                $desc:"Fired when FusionChart's plot data was clicked",
                $paras:[
                    $profile,
                    "argsMap: Object, events arguments map"
                ]
            },
            onLabelClick:{
                $desc:"Fired when FusionChart's x-axis label was clicked",
                $paras:[
                    $profile,
                    "argsMap: Object, events arguments map"
                ]
            },
            onAnnotationClick:{
                $desc:"Fired when FusionChart's annotation was clicked",
                $paras:[
                    $profile,
                    "argsMap: Object, events arguments map"
                ]
            },
            onFusionChartsEvent:{
                $desc:"All FusionChart events",
                $paras:[
                    $profile,
                    "eventObject: Object, FusionChartsXT event's eventObject",
                    "argumentsObject : Object, FusionChartsXT event's argumentsObject"
                ],
                $memo:"Please refer to FusionChartsXT all events"
            }
        }
    });


    xui.set(xui.Locale,["en","doc","xui","UI","SVGPaper"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.UI.SVGPaper Class",
        constructor:{
            $desc:"Creates a xui.UI.SVGPaper Object"
        },
        prototype:{
            append:{
                $desc:"Appends a set of xui.UIProfile objects",
                $rtn:"[self]",
                $paras:[
                    "target [Required] : a xui.UI ojbect(including a set of xui.UIProfile objects)"
                ]
            },
            getPaper:{
                $desc:"Gets SVG Paper object(Raphael Paper)",
                $rtn:'Object'
            },
            getScaleChildren:{
                $desc:"Gets whether the control scales children when resize",
                $rtn:"Boolean"
            },
            setScaleChildren:{
                $desc:"Specifys whether the control scales children when resize",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            }

        }
    });

    //svg
    xui.set(xui.Locale,["en","doc","xui","svg"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg Class",
        constructor:{
            $desc:"Creates a xui.svg Object"
        },
        prototype:{
            getLeft:{
                $desc:"Returns the distance between the left side of an element and the left side of its parent paper",
                $rtn:"Number"
            },
            setLeft:{
                $desc:"Sets the distance between the left side of an element and the left side of its parent paper",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number"
                ]
            },
            getTop:{
                $desc:"Returns the distance between the top side of an element and the left side of its parent paper\u00C2\u00A1\u00C2\u00A3",
                $rtn:"Number"
            },
            setTop:{
                $desc:"Sets the distance between the top side of an element and the left side of its parent paper",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Number"
                ]
            },
            getWidth:{
                $desc:"Gets the element width",
                $rtn:"Number"
            },
            setWidth:{
                $desc:"Sets the element width",
                $rtn:"[self]",
                 $paras:[
                    "value [Required] : nonnegative Number"
                ]
            },
            getHeight:{
                $desc:"Gets the element height",
                $rtn:"Number"
            },
            setHeight:{
                $desc:"Sets the element height",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : nonnegative Number"
                ]
            },
            toFront:{
                $desc:"Moves the element so it is the closest to the viewer\u00C2\u00A1\u00C2\u00AFs eyes, on top of other elements",
                $rtn:"[self]"
            },
            toBack:{
                $desc:"Moves the element so it is the furthest from the viewer\u00C2\u00A1\u00C2\u00AFs eyes, behind other elements",
                $rtn:"[self]"
            },
            getAttr:{
                $desc:"Gets the attributes of the element",
                $rtn:"Object",
                $paras:[
                    "key [Required] : the sub node key"
                ]
            },
            setAttr:{
                $desc:"Sets the attributes of the element",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : String, the sub node key",
                    "atrr [Required] : Object, attributes object",
                    "reset [Optional] : Boolean, to determine whether reset other attributes by its default value or not. Default is [true]",
                    "notify [Optional] : Boolean, to determine whether notify other elements of the control or not. Default is [true]"
                ]
            },
            getAllNodes:{
                $desc:"Gets all dom elements",
                $rtn:"xui.Dom"
            },
            getElemSet:{
                $desc:"Gets the elements set(Raphael Set)",
                $rtn:"Object"
            },
            getPaper:{
                $desc:"Gets it's SVG Paper object(Raphael Paper)",
                $rtn:'Object'
            },
            elemsAnimate:{
                $desc:"Creates and starts animation for all elements",
                $rtn:'Object',
                $paras:[
                    "params [Required] : Object, final attributes",
                    "ms [Required] : Number, number of milliseconds for animation to run",
                    "easing [Optional] : String, easing type'linear', '<' or 'easeIn' or 'ease-in', '>' or 'easeOut' or 'ease-out', '<>' or 'easeInOut' or 'ease-in-out', 'backIn' or 'back-in', 'backOut' or 'back-out', 'elastic', 'bounce'. Default is 'linear'",
                    "callback [Optional] : Function, callback function. Will be called at the end of animation"
                ]
            },
            getShadow:{
                $desc:"To determine whether this widget has shadow",
                $rtn:"Boolean"
            },
            setShadow:{
                $desc:"Specifys whether this widget has shadow, and reflects it to DOM UI",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getSvgTag:{
                $desc:"Gets the svg tag value on the first UIProfile",
                $rtn:"String"
            },
            setSvgTag:{
                $desc:"Sets the svg tag value on the each UIProfile",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getAnimDraw:{
                $desc:"Gets the anim draw property",
                $rtn:"String"
            },
            setAnimDraw:{
                $desc:"Sets the anim draw property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getOffsetFlow:{
                $desc:"Gets the Flow property",
                $rtn:"String"
            },
            setOffsetFlow:{
                $desc:"Sets the Flow property",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            onClick:{
                $desc:"onClick event handler",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : String, Element xui id"
                ]
            }

        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","circle"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.circle Class",
        constructor:{
            $desc:"Creates a xui.svg.circle Object"
        },
        prototype:{
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","ellipse"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.ellipse Class",
        constructor:{
            $desc:"Creates a xui.svg.ellipse Object"
        },
        prototype:{
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","rect"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.rect Class",
        constructor:{
            $desc:"Creates a xui.svg.rect Object"
        },
        prototype:{
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","image"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.image Class",
        constructor:{
            $desc:"Creates a xui.svg.image Object"
        },
        prototype:{
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","text"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.text Class",
        constructor:{
            $desc:"Creates a xui.svg.text Object"
        },
        prototype:{
            getText :{
                $desc:"Get text",
                $rtn:"String"
            },
            setText :{
                $desc:"Set text",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","path"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.path Class",
        constructor:{
            $desc:"Creates a xui.svg.path Object"
        },
        prototype:{
            getPath:{
                $desc:"Gets the path string",
                $rtn:"String"
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","absComb"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.absComb Class",
        constructor:{
            $desc:"Creates a xui.svg.absComb Object"
        },
        prototype:{
            getAttr:{
                $desc:"Gets the attributes of the element",
                $rtn:"Object",
                $paras:[
                    "key [Required] : the sub node key"
                ]
            },
            setAttr:{
                $desc:"Sets the attributes of the element",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : String, the sub node key",
                    "atrr [Required] : Object, attributes object",
                    "reset [Optional] : Boolean, to determine whether reset other attributes by its default value or not. Default is [true]",
                    "notify [Optional] : Boolean, to determine whether notify other elements of the control or not. Default is [true]"
                ]
            },
            getText :{
                $desc:"Get text",
                $rtn:"String"
            },
            setText :{
                $desc:"Set text",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String",
                    $force
                ]
            },
            getHAlign :{
                $desc:"Gets the HAlign property of the text element",
                $rtn:"String"
            },
            setHAlign :{
                $desc:"Sets the HAlign property to the text element",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left','25%','center','75%','right','outterleft','outterright'",
                    $force
                ]
            },
            getVAlign :{
                $desc:"Gets the VAlign property of the text element",
                $rtn:"String"
            },
            setVAlign :{
                $desc:"Sets the VAlign property value to the text element",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'top','25%','middle','75%','bottom','outtertop','outterbottom'",
                    $force
                ]
            },
            onClick:{
                $desc:"onClick event handler",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element xui id"
                ]
            },
            onTextClick:{
                $desc:"onClick event handler for text element",
                $paras:[
                    $profile,
                    "e : Event, Dom event object",
                    "src : Element xui id"
                ]
            }
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","rectComb"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.rectComb Class",
        constructor:{
            $desc:"Creates a xui.svg.rectComb Object"
        },
        prototype:{
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","circleComb"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.circleComb Class",
        constructor:{
            $desc:"Creates a xui.svg.circleComb Object"
        },
        prototype:{
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","ellipseComb"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.ellipseComb Class",
        constructor:{
            $desc:"Creates a xui.svg.ellipseComb Object"
        },
        prototype:{
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","pathComb"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.pathComb Class",
        constructor:{
            $desc:"Creates a xui.svg.pathComb Object"
        },
        prototype:{
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","imageComb"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.imageComb Class",
        constructor:{
            $desc:"Creates a xui.svg.imageComb Object"
        },
        prototype:{
        }
    });

    xui.set(xui.Locale,["en","doc","xui","svg","connector"], {
        KEY:{$desc:"Class Name"},
        $desc:"xui.svg.connector Class",
        constructor:{
            $desc:"Creates a xui.svg.connector Object"
        },
        prototype:{
            getBgLine:{
                $desc:"To determine whether the background line hide or not",
                $rtn:"Boolean"
            },
            setBgLine:{
                $desc:"Specify whether the background line hide or not",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : Boolean",
                    $force
                ]
            },
            getType:{
                $desc:"Gets the connector's type",
                $rtn:"String"
            },
            setType:{
                $desc:"Sets the connector's type (only valid before the control was rendered)",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'straight','bezier','flowchart'",
                    $force
                ]
            },
            getFromObj:{
                $desc:"Gets the connector's 'connect from' object alias",
                $rtn:"String"
            },
            setFromObj:{
                $desc:"Sets the connector's 'connect from' object alias",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, object alias",
                    $force
                ]
            },
            getFromPoint:{
                $desc:"Gets the connector's 'connect from' point",
                $rtn:"String"
            },
            setFromPoint:{
                $desc:"Sets the connector's 'connect from' point",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left','top','right','bottom'",
                    $force
                ]
            },
            getToObj:{
                $desc:"Gets the connector's 'connect to' object alias",
                $rtn:"String"
            },
            setToObj:{
                $desc:"Sets the connector's 'connect to' object alias",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, object alias",
                    $force
                ]
            },
            getToPoint:{
                $desc:"Gets the connector's 'connect to' point",
                $rtn:"String"
            },
            setToPoint:{
                $desc:"Sets the connector's 'connect to' point",
                $rtn:"[self]",
                $paras:[
                    "value [Required] : String, 'left','top','right','bottom'",
                    $force
                ]
            },
            getAttr:{
                $desc:"Gets the attributes of the element",
                $rtn:"Object",
                $paras:[
                    "key [Required] : the sub node key"
                ]
            },
            setAttr:{
                $desc:"Sets the attributes of the element",
                $rtn:"[self]",
                $paras:[
                    "key [Required] : String, the sub node key",
                    "atrr [Required] : Object, attributes object",
                    "reset [Optional] : Boolean, to determine whether reset other attributes by its default value or not. Default is [true]",
                    "notify [Optional] : Boolean, to determine whether notify other elements of the control or not. Default is [true]"
                ]
            }
        }
    });

})();